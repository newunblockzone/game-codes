_STR = ["UHJlZl8=", "dW5kZWZpbmVk", "c2Vfc3RhcnQg", "c2FmYXJp", "aXBob25l", "aXBhZA==", "d2luZG93cw==", "Y2hyb21l", "ZmlyZWZveA==", "QmFkU3RyaW5ncw==", "TW9iaWxlU3RyaW5ncw==", "cnVieQ==", "c2Vfc291bmRfZmlyc3Q=", "V2ViIEF1ZGlvIEFQSSBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3Nlcg==", "YXVkaW8=", "YXVkaW8vbXAz", "Lm1wMw==", "U291bmRFWFQgLT4=", "bG9hZGluZw==", "YXJyYXlidWZmZXI=", "bnVtYmVy", "b3JpZW50YXRpb25jaGFuZ2U=", "UmVzaXplIENhbnZhcyB0byA=", "Y2FsYygxMDAlIC0g", "d2ViZ2w=", "SW1wb3NzaWJsZSBkJ2luaXRpYWxpc2VyIGxlIFdlYkdMLiBJbCBlc3QgcG9zc2libGUgcXVlIHZvdHJlIG5hdmlnYXRldXIgbmUgc3VwcG9ydGUgcGFzIGNldHRlIGZvbmN0aW9ubmFsaXTpLg==", "IEZyYW1lYnVmZmVyIHVuc3VwcG9ydGVk", "IEZyYW1lYnVmZmVyIGluY29tcGxldGUgYXR0YWNobWVudA==", "IEZyYW1lYnVmZmVyIGluY29tcGxldGUgZGltZW5zaW9ucw==", "IEZyYW1lYnVmZmVyIGluY29tcGxldGUgbWlzc2luZyBhdHRhY2htZW50", "IEZyYW1lYnVmZmVyIGZhaWxlZCBmb3IgdW5zcGVjaWZpZWQgcmVhc29u", "Q3JlYXRpbmcgRkJPIFs=", "QXR0YWNoIHRleHR1cmU=", "QW5vbnltb3Vz", "RHluYVRleHR1cmUgRXJyb3IgVHJ5IE6wOg==", "RHluYVRleHR1cmU6", "IGlkOg==", "RXJyb3IgSW1hZ2Ug", "cmVzb3VyY2VzL2ltYWdlcy8=", "LmF0bGFzPw==", "b2Jsb24=", "Y3Vyc29y", "RGVsZXRl", "QmFja3NwYWNl", "SW5zZXJ0", "SW52YWxpZCBNYXRyaXhQb3Ah", "U0hJRlQ=", "U1BBQ0U=", "RU5URVI=", "Y29sb3I=", "dGV4dHVyZQ==", "Zm9udA==", "cGFydGljbGVz", "Ymx1ci13", "Ymx1ci1o", "ZnJvbnQ=", "dHJhaWw=", "c2xpZGU=", "bGF2YQ==", "VmVydGV4UG9z", "VmVydGV4UG9zQg==", "VGV4dHVyZUNvb3I=", "VmVydGV4Tm9ybWFs", "UHJNYXRyaXg=", "TXZNYXRyaXg=", "Tm9NYXRyaXg=", "Q2FNYXRyaXg=", "U2hNYXRyaXg=", "VGV4dHVyZTA=", "VGV4dHVyZTE=", "VGV4dHVyZTI=", "VGV4dHVyZTM=", "VGV4dHVyZTQ=", "UGFydGljbGVzWFlaUw==", "UGFydGljbGVzUlQ=", "Q29sb3Jz", "TGlnaHREaXI=", "Q2FtUG9z", "R2x5cGhQb3M=", "RXJyb3IgQ29tcGlsZSBWZXJ0ZXggU2hhZGVyIFs=", "RXJyb3IgQ29tcGlsZSBGcmFnbWVudCBTaGFkZXIgWw==", "Q291bGQgbm90IGluaXRpYWxpc2Ugc2hhZGVyOiA=", "c2hhZGVyIA==", "TWljcm9zb2Z0LlhNTEhUVFA=", "dGV4dC9wbGFpbg==", "cmVzb3VyY2VzL3NoYWRlcnMv", "LmZzaD8=", "LnZzaD8=", "U2hhZGVy", "U2hhZGVyIE5vdCBWYWxpZDo=", "dG91Y2hzdGFydA==", "dG91Y2htb3Zl", "dG91Y2hlbmQ=", "dG91Y2hjYW5jZWw=", "dG91Y2hsZWF2ZQ==", "c2VfZm9udF9sb2FkIA==", "LnBuZz8=", "LmZudA==", "Y29tbW9u", "Y2hhciBpZD0=", "Y2hhcklkPQ==", "a2luZGxl", "cGxheWJvb2s=", "a2Zzb3dp", "c2lsaw==", "dGFibGV0", "bW9iaWxl", "YW5kcm9pZA==", "YmxhY2tiZXJyeQ==", "bm9raWE=", "b3BlcmEgbWluaQ==", "d2luZG93cyBtb2JpbGU=", "d2luZG93cyBwaG9uZQ==", "aWVtb2JpbGU=", "cXdlcnR5dWlvcGFzZGZnaGprbCd6eGN2Ym5tLC5RV0VSVFlVSU9QQVNERkdISktMJ1pYQ1ZCTk0sLjEyMzQ1Njc4OTBAIyQlJiotKygpIVwiOi8/Xz0gICA=", "YXplcnR5dWlvcHFzZGZnaGprbG13eGN2Ym4nLC5BWkVSVFlVSU9QUVNERkdISktMTVdYQ1ZCTicsLjEyMzQ1Njc4OTBAIyQlJiotKygpIVwiOi8/Xz0gICA=", "cXdlcnR6dWlvcGFzZGZnaGprbCd5eGN2Ym5tLC5RV0VSVFpVSU9QQVNERkdISktMJ1lYQ1ZCTk0sLjEyMzQ1Njc4OTBAIyQlJiotKygpIVwiOi8/Xz0gICA=", "TWVzaCBJRCBvdXQgb2YgcmFuZ2U=", "Lm9iag==", "LmJzbHVycA==", "LnpzbHVycA==", "YmxvYg==", "ZmlsdGVyPQ==", "ZmlsdGVy", "c3BlZWQ=", "Zm9yY2U=", "LnBuZw==", "T0JKRUNU", "S0VFUA==", "QklOQVJZPg==", "U0tJUA==", "aW1hZ2U=", "bWVzaA==", "cmVzb3VyY2VzL21lc2hzLw==", "cmVzb3VyY2VzL2ZvbnRzLw==", "c291bmQ=", "cmVzb3VyY2VzL3NvdW5kcy8=", "YXRsYXM=", "TG9hZGVyIERPTkU=", "cmVzb3VyY2VzL2xpc3QudHh0Pw==", "YmxvY2s=", "QWRkaW5nIFBhcnRpY2xlIEVtaXRlciA=", "YnViYmxlcw==", "ZHVhbC1ydW1ibGU=", "cmVzb3VyY2VzL2hlaWdodG1hcHMv", "Lm1hcA==", "eG1saHR0cC5yZWFkeVN0YXRlOg==", "SGVpZ2h0TWFwOg==", "cGxhbmU6", "Zm91bmQgZ3JvdW5kIHBsYW5l", "cGF0aDo=", "VFJJR0dFUl9QYXRo", "VFJJR0dFUl9TdGFydA==", "VFJJR0dFUl9Qb3M=", "VFJJR0dFUl9TT0JK", "VFJJR0dFUl9CT09TVA==", "V0FMTF8zRA==", "cmVzb3VyY2VzL3BhdGhzLw==", "LnBhdGg=", "IFdhbGxzIEFkZGVk", "IFdhbGxzIDNEIEFkZGVk", "KioqKioqKioqKioqKioqKioqKio=", "SU5URUdSQVRJT04gVFlQRSA=", "SDVfQVBQ", "RkFNT0JJ", "RGVidWdfQWRkIA==", "RVZFTlRfTElWRVNDT1JF", "ZmFtby1ibHVy", "ZmFtby1yZXN1bWU=", "ZW5hYmxlQXVkaW8=", "ZGlzYWJsZUF1ZGlv", "TmVvblJpZGVy", "Q2FudCBzdGFydCBGQU1PIEFuYWx5dGljcw==", "ZXh0ZXJuYWxfbXV0ZQ==", "cmVzb3VyY2VzL2ltYWdlcy9wbGFjZWhvbGRlci5wbmc=", "RVZFTlRfTEVWRUxTVEFSVA==", "RVZFTlRfTEVWRUxSRVNUQVJU", "QWRkaW5nIEFkcyBTcGFjZQ==", "RVZFTlRfQ1VTVE9N", "TEVWRUxFTkQ=", "ZmFpbA==", "RVZFTlRfTEVWRUxGQUlM", "ZGVhZA==", "RVZFTlRfVE9UQUxTQ09SRQ==", "U2VuZGluZyB3aW5kb3cuZmFtb2JpLmdhbWVSZWFkeSgpOw==", "RmFtb19Qb3VyY2VudA==", "U2VuZGluZyBFVkVOVF9MRVZFTFNVQ0NFU1MgbGV2ZWxOYW1lOg==", "RVZFTlRfTEVWRUxTVUNDRVNT", "TGV2ZWwg", "U2VuZGluZyB3aW5kb3cuZmFtb2JpLnBsYXllclJlYWR5KCk7", "RVZFTlRfVk9MVU1FQ0hBTkdF", "cmV3YXJkZWQ=", "cmV3YXJkZWRBZA==", "YnV0dG9uOm1haW46bmV4dA==", "cm90YXRl", "bGFuZA==", "UnVieVByZWZDb3VudA==", "RGVzdHJveSBDYXI=", "Ym9vbQ==", "UGVyZmVjdExhbmRpbmdFZmZlY3Q=", "LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLT5Gb3JjZSBDaHVuayBJRDo=", "TGV2ZWxzW0N1cnJlbnRMZXZlbF1bQ3VycmVudExldmVsUG9zXQ==", "Q3lsaW5kZXJSZXY=", "Q3lsaW5kZXI=", "TGV2ZWw=", "Ymxhc3Q=", "QmVhbQ==", "U2xvdw==", "U2NpZQ==", "U2NpU3RhdGlj", "UnVieQ==", "TGV0dGVy", "Ym9vc3Qy", "UGxhdGVQaXZvdA==", "UGxhdGVB", "VXBEb3du", "RmxhdE1l", "TGF2ZVdhbGw=", "TGF2YQ==", "Um90Q3ViZQ==", "UGxhdGVGYWxs", "Qm9vc3Q=", "U3RhcnRCTEFTVA==", "bXVzaWNfYm9udXM=", "ZmFsbA==", "Pj4+Pj4+Pj4+Pj4+UGxhdGVQaXZvdCA=", "Pj4+Pj4+Pj4+Pj4+Q3lsaW5kZXIg", "Pj4+Pj4+Pj4+Pj4+VXBEb3duIA==", "Pj4+Pj4+Pj4+Pj4+RmxhdE1lIA==", "Pj4+Pj4+Pj4+Pj4+UGxhdGVBIA==", "Pj4+Pj4+Pj4+Pj4+UGxhdGVGYWxsIA==", "Pj4+Pj4+Pj4+Pj4+Um90ZWF0aW9uIEN1YiA=", "RGVzdHJveSBPYmplY3Qg", "LWJvbnVzLS0w", "LS0tLS0tLS0tLS0tLQ==", "LWJvbnVzLS0=", "Ym9vc3Q=", "Ym9vc3Qz", "Q3JlYXRpbmcgRkJPIA==", "RGVsZXRlIENodW5rIEZyb20gTGlzdCBDb3VudDo=", "cHJlU29sdmU=", "cG9zdFN0ZXA=", "UHVzaCBPYmplY3Qg", "TmV3IGNodW5r", "TGluZXNGb3JQaHlzaWMgYWRk", "T2JqZWN0cyBUbyBhZGQ=", "Q2h1bmtfTGlzdCA=", "UEVSRkVDVCBMQU5ESU5H", "MC45OTk=", "c2F2ZSBoaXNjb3Jl", "aGlzY29yZQ==", "bXVzaWNfaW5nYW1l", "bGV2ZWw=", "cmVzb3VyY2VzL2ltYWdlcy91aS1hdGxhcw==", "UHJlZlNvdW5kcw==", "VW5sb2NrZWRMZXZlbA==", "bXVzaWNfdGl0bGU=", "Yi1zdGFydA==", "Yi1zb3VuZDE=", "Yi1zb3VuZDI=", "LS0tLS0tLS0tLS0gVEFEQQ==", "Yi1iYWNr", "cmV2Mw==", "cmV2MQ==", "cmV2NA==", "bGV2ZWwt", "bHZsMQ==", "bHZsMg==", "bHZsMw==", "Y29tcGxldGVk", "a2V5ZG93bg==", "QXJyb3dMZWZ0", "QXJyb3dSaWdodA==", "QXJyb3dVcA==", "QXJyb3dEb3du", "a2V5dXA=", "J3gn"];function _TX(ID) {    return atob(_STR[ID])};function se_savePref(PrefiID, Data) {    if (Trigger_DisablePreferences == true) return;    var Key = _TX(0) + PrefiID;    try {        window.famobi.localStorage.setItem(Key, Data);    } catch (error) {        localStorage.setItem(Key, Data);    }};function se_GetPref(PrefiID) {    if (Trigger_DisablePreferences == true) return -1;    var Key = _TX(0) + PrefiID;    try {        Temp = window.famobi.localStorage.getItem(Key);    } catch (error) {        Temp = localStorage.getItem(Key);    }    Temp = parseInt(Temp);    if (typeof Temp == _TX(1)) return -1;    if (isNaN(Temp)) return -1;    if (Temp == Temp * 1) return Temp * 1;    return Temp;};function se_GetStringPref(PrefiID) {    if (Trigger_DisablePreferences == true) return -1;    var Key = _TX(0) + PrefiID;    var Temp;    try {        Temp = window.famobi.localStorage.getItem(Key);    } catch (error) {        Temp = localStorage.getItem(Key);    }    window.famobi.log(Key, Temp)    if (typeof Temp == _TX(1)) return -1;    return Temp;};function f222(a, b) {    return Math.atan2(b.y - a.y, b.x - a.x);};function f174(Pa, Pb) {    return Math.atan2(Pb[1] - Pa[1], Pb[0] - Pa[0]);};function f236(x, y, z, w) {    this.x = x;    this.y = y;    this.z = z;    this.w = w;};function f175(value) {    return (value & (value - 1)) == 0;};function f176(a, b) {    return a[0] * b[0] + a[1] * b[1];};function f237(degrees) {    return degrees * Math.PI / 180;};function f207(vecA, vecB) {    var a = vecA.x - vecB.x;    var b = vecA.y - vecB.y;    var c = vecA.z - vecB.z;    return Math.sqrt(a * a + b * b + c * c);};function f238(x1, y1, x2, y2) {    var a = x1 - x2;    var b = y1 - y2;    return Math.sqrt(a * a + b * b);};function f193(x, y) {    if (x == 0 && y == 0) return [x, y];    var angle = Math.atan2(y, x);    var nx = Math.cos(angle);    var ny = Math.sin(angle);    return [nx, ny];};function f194(vector) {    var s397v = new f236();    var rec_scalar;    if (vector.x == 0.0 && vector.y == 0.0 && vector.z == 0.0) {        s397v.x = 0.0;        s397v.y = 0.0;        s397v.z = 0.0;        return s397v;    }    rec_scalar = 1.0 / Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);    s397v.x = vector.x * rec_scalar;    s397v.y = vector.y * rec_scalar;    s397v.z = vector.z * rec_scalar;    return s397v;};function f208(p1, p2, p3) {    var v1 = new f236();    var v2 = new f236();    var normal = new f236();    v1.x = p2.x - p3.x;    v1.y = p2.y - p3.y;    v1.z = p2.z - p3.z;    v2.x = p1.x - p3.x;    v2.y = p1.y - p3.y;    v2.z = p1.z - p3.z;    normal.x = v1.y * v2.z - v1.z * v2.y;    normal.y = v1.z * v2.x - v1.x * v2.z;    normal.z = v1.x * v2.y - v1.y * v2.x;    return f194(normal);};function f250(a, b) {    if (a < b) return a;    else return b;};function f251(a, b) {    if (a > b) return a;    else return b;};function f133(p, a, b) {    var atob = {        x: b.x - a.x,        y: b.y - a.y,        z: b.z - a.z    };    var atop = {        x: p.x - a.x,        y: p.y - a.y,        z: p.z - a.z    };    var len = atob.x * atob.x + atob.y * atob.y + atob.z * atob.z;    var dot = atop.x * atob.x + atop.y * atob.y + atop.z * atob.z;    var t = f250(1, f251(0, dot / len));    dot = (b.x - a.x) * (p.y - a.y) - (b.y - a.y) * (p.x - a.x) - (b.z - a.z) * (p.z - a.z);    return {        x: a.x + atob.x * t,        y: a.y + atob.y * t,        z: a.z + atob.z * t    };};function f195(p, a, b) {    var atob = {        x: b.x - a.x,        y: b.y - a.y    };    var atop = {        x: p.x - a.x,        y: p.y - a.y    };    var len = atob.x * atob.x + atob.y * atob.y;    var dot = atop.x * atob.x + atop.y * atob.y;    var t = f250(1, f251(0, dot / len));    dot = (b.x - a.x) * (p.y - a.y) - (b.y - a.y) * (p.x - a.x);    return {        x: a.x + atob.x * t,        y: a.y + atob.y * t    };};function f242(vector, normal) {    var DotVecNorm = (vector.x * normal.x) + (vector.y * normal.y);    return {        x: vector.x - (DotVecNorm * normal.x * 2),        y: vector.y - (DotVecNorm * normal.y * 2)    };}var f247elta = 20;function f248(a, b, value) {    if (value > 1) value = 1;    if (value < 0) value = 0;    var value_b = value * (f247elta / 16.666);    var value_a = 1.0 - value_b;    return a * value_a + b * value_b;};function f223(a, b, value) {    if (value == 1) return a;    if (value > 1.0) value = 1.0;    if (value < 0.0) value = 0.0;    return a * value + b * (1.0 - value);}var se_canvas;function se_start(canvasid, integrationtype) {    window.famobi.log(_TX(2) + canvasid + " " + integrationtype);    Integration_Type = integrationtype;    se_canvas = document.getElementById(canvasid);    f142();    f151();    f157();    f139();    f118();    f162();    f181();    f184();    f81()    f127();    f63();    f146();    requestAnimationFrame(f167);}var Sounds = {};var s335v = {};var s339v = {};var v43;var v19 = 0;function f209() {    var s122v = [_TX(3), 'ios', _TX(4), _TX(5)];    var BadStrings = [_TX(6), _TX(7), _TX(8), 'edg'];    var UserAgent = " " + navigator.userAgent.toLowerCase();    for (var i = 0; i < BadStrings.length; i++) {        var MOBILE_Search = UserAgent.search(BadStrings[i]);        if (MOBILE_Search > 1) {            window.famobi.log(_TX(9), BadStrings[i]);            return false;        }    }    for (var i = 0; i < s122v.length; i++) {        var MOBILE_Search = UserAgent.search(s122v[i]);        if (MOBILE_Search > 1) {            window.famobi.log(_TX(10), s122v[i]);            return true;        }    }    return false;}var v9 = true;function f134() {    if (v9 != true) return;    f156(_TX(11), 0.1, 1, 0, true);    v9 = false;    window.famobi.log(_TX(12));};function f151() {    v19 = 1;    try {        window.AudioContext = window.AudioContext || window.webkitAudioContext;        v43 = new AudioContext();    } catch (e) {        alert(_TX(13));        v19 = 0;        return;    }    var myTempAudio = document.createElement(_TX(14));    if (myTempAudio.canPlayType(_TX(15))) {        s344v = _TX(16);        window.famobi.log(_TX(17), s344v);        return;    }    v19 = 0;};function f243() {};function f152(id, path) {    v18++;    var Path = path + s344v + "?" + Game_Version;    window.famobi.log(_TX(18) + Path);    var request = new XMLHttpRequest();    request.open('GET', Path, true);    request.responseType = _TX(19);    request.onload = function() {        v43.decodeAudioData(request.response, function(buffer) {            Sounds[id] = buffer;            v18--;        }, f243);    }    request.send();};function f153(id) {    if (s339v[id] === undefined) return;    if (!s339v[id].stop) {        s339v[id].s339v[id] = s339v[id].noteOff;    }    s339v[id].stop(0);}var v72 = -1;var v44;var v53;var v54;function f92(volume) {    if (v72 == -1) return;    if (H5_H5app_IsH5 == true) return;    if (PREF_Music == 0) volume = 0;    v44 = volume;    if (s335v[v72] === undefined) f155(v72, v44, v53, v54);    s335v[v72].gain.value = volume;};function f154() {    if (v72 == -1) return;    if (H5_H5app_IsH5 == true) return;    if (s335v[v72] !== undefined) {        s335v[v72].gain.value = 0;        f153(v72);        s335v[v72] = undefined;    }    v72 = -1;};function f93(Rate) {    if (v72 == -1 || v53 == Rate) return;    if (s339v[v72] === undefined) return;    if (H5_H5app_IsH5 == true) return;    v53 = Rate;    s339v[v72].playbackRate.value = Rate;};function f35(rate) {    if (v19 == 0) return;    if (s339v[v72] === undefined) return;    if (H5_H5app_IsH5 == true) return;    var Rate = s339v[v72].playbackRate.value * rate;    f93(Rate)};function f94(rate) {    if (v19 == 0) return;    if (s335v[v72] === undefined) return;    if (H5_H5app_IsH5 == true) return;    var volume = s335v[v72].gain.value * rate;    if (PREF_Music == 0) volume = 0;    if (volume < 0) volume = 0;    s335v[v72].gain.value = volume;};function f155(id, volume, Rate, loop) {    if (H5_H5app_IsH5 == true) return;    if (v72 == id) {        f92(volume);        return;    }    if (v72 != -1) f154();    v72 = id;    v53 = Rate;    v54 = loop;    if (v19 == 0) return;    if (PREF_Music == 0) volume = 0.0;    v44 = volume;    s339v[id] = v43.createBufferSource();    s339v[id].loop = loop;    s339v[id].playbackRate.value = Rate;    s335v[id] = v43.createGain();    s335v[id].gain.value = volume;    s335v[id].connect(v43.destination);    s339v[id].buffer = Sounds[id];    s339v[id].connect(s335v[id]);    s339v[id].start ? s339v[id].start(0) : s339v[id].noteOn(0);    window.famobi.log(s339v[id]);};function f135() {    if (s335v[v72] !== undefined) {        s335v[v72].gain.value = 0;    }};function f95() {    f92(v44)};function f96(id, volume) {    if (s335v[id] === undefined) return;    s335v[id].gain.value = volume;};function f97(id, rate) {    if (v19 == 0) return;    if (s335v[id] === undefined) return;    var volume = s335v[id].gain.value * rate;    if (PREF_Sounds == 0) volume = 0;    if (volume < 0) volume = 0;    s335v[id].gain.value = volume;};function f112(id, volume, Rate, loop) {    if (v19 == 0) return;    if (PREF_Sounds == 0) volume = 0;    if (volume < 0) volume = 0;    if (s335v[id] === undefined) {        f156(id, volume, Rate, loop);        return;    }    s339v[id].loop = loop;    s339v[id].playbackRate.value = Rate;    s335v[id].gain.value = volume;};function f156(id, volume, Rate, loop, forced) {    if (forced != true) {        if (v19 == 0) return;        if (PREF_Sounds == 0) return;        if (volume < 0.05) return;        if (Rate < 0.25) return;    }    s339v[id] = v43.createBufferSource();    s339v[id].loop = loop;    s339v[id].playbackRate.value = Rate;    s335v[id] = v43.createGain();    s335v[id].gain.value = volume;    s335v[id].connect(v43.destination);    s339v[id].buffer = Sounds[id];    s339v[id].connect(s335v[id]);    s339v[id].start ? s339v[id].start(0) : s339v[id].noteOn(0);};function f113(id, x, y, z, volume, Rate) {    var SoundCamf238 = f238(x, z, CamX, CamZ);    if (SoundCamf238 > 1000) return;    f156(id, (1 - (SoundCamf238 / 1000)) * volume, Rate, 0);}var s343v = {    x: 0,    y: 0};var half_s343v = {    x: 0,    y: 0};var s210v = {    x: 0,    y: 0};var half_s210v = {    x: 0,    y: 0};var v55 = 0;function f114() {    if (typeof(window.innerWidth) == _TX(20)) {        return window.innerWidth;    }    if (document.documentElement && (document.documentElement.clientWidth || document.documentElement.clientHeight)) {        return document.documentElement.clientWidth;    }    if (document.body && (document.body.clientWidth || document.body.clientHeight)) {        return document.body.clientWidth;    }    return 100;};function f98() {    if (typeof(window.innerWidth) == _TX(20)) {        myHeight = window.innerHeight;    }    if (document.documentElement && (document.documentElement.clientWidth || document.documentElement.clientHeight)) {        return document.documentElement.clientHeight;    }    if (document.body && (document.body.clientWidth || document.body.clientHeight)) {        return document.body.clientHeight;    }    return 100;};function f44() {    window.onresize = function() {        f99();    }    window.addEventListener(_TX(21), function(e) {        window.setTimeout(function() {            f99();        }, 800);    });}var v36 = 0;var v14 = 0;var v27 = 0;var v20 = 0;function f99() {    s343v.x = f114() - v27 - v20;    s343v.y = f98() - v36 - v14;    v21 = 1.0;    window.famobi.log(_TX(22) + s343v.x + "x" + s343v.y);    v21 = window.devicePixelRatio || 1.0;    if (v21 > 1.0) v21 *= 0.6;    se_canvas.width = s343v.x * v21;    se_canvas.height = s343v.y * v21;    se_canvas.style.marginTop = v36 + "px";    se_canvas.style.marginLeft = v27 + "px";    se_canvas.style.width = _TX(23) + (v27 + v20) + "px)";    se_canvas.style.height = _TX(23) + (v36 + v14) + "px)";    se_canvas.focus();    s210v.y = 512;    s210v.x = s343v.x * s210v.y / s343v.y;    if (s210v.x < v7) {        s210v.x = v7;        s210v.y = s343v.y * s210v.x / s343v.x;        if (s210v.y > 1000) s210v.y = 1000;    }    half_s343v.x = s343v.x * 0.5;    half_s343v.y = s343v.y * 0.5;    half_s210v.x = s210v.x * 0.5;    half_s210v.y = s210v.y * 0.5;    v55 = s343v.x / s210v.x;    BlureBipass = true;    f199();}var gl;var v56 = false;var v28 = false;var v15 = false;var v29 = false;var v37 = false;var v21 = 1;var v7 = 400;function f157(index) {    try {        gl = se_canvas.getContext(_TX(24), {            premultipliedAlpha: v15,            antialias: v28,            alpha: v56,            stencil: v37,            preserveDrawingBuffer: v29        });    } catch (e) {}    if (!gl) {        alert(_TX(25));    }    f99();    f44();}var v88 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];function f244(width, height) {    this.buffer;    this.depth;    this.depthtexture;    this.texture;    this.width = width;    this.height = height;    this.vertex;    this.uv;    this.index};function f115(id) {    gl.bindTexture(gl.TEXTURE_2D, v88[id].texture);};function f45(id) {    gl.activeTexture(gl.TEXTURE2);    gl.bindTexture(gl.TEXTURE_2D, v88[id].depthtexture);    gl.activeTexture(gl.TEXTURE0);};function f136(id) {    if (id == -1) {        gl.bindFramebuffer(gl.FRAMEBUFFER, null);        return;    }    gl.bindFramebuffer(gl.FRAMEBUFFER, v88[id].buffer);};function f239(id) {    gl.bindTexture(gl.TEXTURE_2D, v88[id].texture);    f39();    if (shader[v46].TextureCoor != -1) {        gl.bindBuffer(gl.ARRAY_BUFFER, v88[id].uv);        gl.vertexAttribPointer(shader[v46].TextureCoor, v88[id].uv.itemSize, gl.FLOAT, false, 0, 0);    }    gl.bindBuffer(gl.ARRAY_BUFFER, v88[id].vertex);    gl.vertexAttribPointer(shader[v46].s213v, v88[id].vertex.itemSize, gl.FLOAT, false, 0, 0);    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, v88[id].index);    gl.drawElements(gl.TRIANGLES, v88[id].index.numItems, gl.UNSIGNED_SHORT, 0);    v74 += 2;};function f116(Position) {    var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);    if (status !== gl.FRAMEBUFFER_COMPLETE) {        switch (status) {            case gl.FRAMEBUFFER_UNSUPPORTED:                throw new Error(Position + _TX(26))            case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:                throw new Error(Position + _TX(27))            case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:                throw new Error(Position + _TX(28))            case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:                throw new Error(Position + _TX(29))            default:                throw new Error(Position + _TX(30))        }    }};function f210(id, width, height, DepthBuffer) {    window.famobi.log(_TX(31) + id + "] " + width + ", " + height);    v88[id] = new f244(width, height);    v88[id].buffer = gl.createFramebuffer();    gl.bindFramebuffer(gl.FRAMEBUFFER, v88[id].buffer);    v88[id].texture = gl.createTexture();    gl.bindTexture(gl.TEXTURE_2D, v88[id].texture);    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, v88[id].texture, 0);    if (DepthBuffer == true) {        v88[id].depthtexture = gl.createRenderbuffer();        gl.bindRenderbuffer(gl.RENDERBUFFER, v88[id].depthtexture);        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, v88[id].depthtexture);    }    f116(_TX(32));    gl.colorMask(true, true, true, true);    gl.clearColor(0.0, 0.0, 0.0, 1.0);    gl.clear(gl.COLOR_BUFFER_BIT);    v88[id].vertex = gl.createBuffer();    gl.bindBuffer(gl.ARRAY_BUFFER, v88[id].vertex);    var vertices = [-width * 0.5, height * 0.5, -0.2, width * 0.5, height * 0.5, -0.2, width * 0.5, -height * 0.5, -0.2, -width * 0.5, -height * 0.5, -0.2];    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);    v88[id].vertex.itemSize = 3;    v88[id].vertex.numItems = 4;    v88[id].uv = gl.createBuffer();    gl.bindBuffer(gl.ARRAY_BUFFER, v88[id].uv);    var textureCoords = [0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0];    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoords), gl.STATIC_DRAW);    v88[id].uv.itemSize = 2;    v88[id].uv.numItems = 4;    v88[id].index = gl.createBuffer();    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, v88[id].index);    var ndices = [0, 1, 2, 0, 2, 3];    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(ndices), gl.STATIC_DRAW);    v88[id].index.itemSize = 1;    v88[id].index.numItems = 6;    gl.bindFramebuffer(gl.FRAMEBUFFER, null);}var v67 = new Array();var v22 = true;function f211() {    this.path;    this.texture;    this.width = 0;    this.height = 0;    this.vertex;    this.uv;    this.index    this.valide = false;    this.s348v = false;};function f36(width, height) {    if (width != 4 && width != 8 && width != 16 && width != 32 && width != 64 && width != 128 && width != 256 && width != 512 && width != 1024 && width != 2048) return gl.NEAREST;    if (height != 4 && height != 8 && height != 16 && height != 32 && height != 64 && height != 128 && height != 256 && height != 512 && height != 1024 && height != 2048) return gl.NEAREST;    return gl.LINEAR;};function f46(id) {    var width = v67[id].texture.image.width;    var height = v67[id].texture.image.height;    v67[id].width = width;    v67[id].height = height;    gl.bindTexture(gl.TEXTURE_2D, v67[id].texture);    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, v67[id].texture.image);    if (f175(width) && f175(height)) {        if (v22 == true) {            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);            gl.generateMipmap(gl.TEXTURE_2D);        } else {            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);        }    } else {        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);        if (v22 == true) {            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);        } else {            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);        }    }    gl.bindTexture(gl.TEXTURE_2D, null);    v67[id].vertex = gl.createBuffer();    gl.bindBuffer(gl.ARRAY_BUFFER, v67[id].vertex);    var vertices = [-width * 0.5, height * 0.5, -0.2, width * 0.5, height * 0.5, -0.2, width * 0.5, -height * 0.5, -0.2, -width * 0.5, -height * 0.5, -0.2];    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);    v67[id].vertex.itemSize = 3;    v67[id].vertex.numItems = 4;    v67[id].uv = gl.createBuffer();    gl.bindBuffer(gl.ARRAY_BUFFER, v67[id].uv);    var textureCoords = [0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0];    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoords), gl.STATIC_DRAW);    v67[id].uv.itemSize = 2;    v67[id].uv.numItems = 4;    v67[id].index = gl.createBuffer();    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, v67[id].index);    var ndices = [0, 1, 2, 0, 2, 3];    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(ndices), gl.STATIC_DRAW);    v67[id].index.itemSize = 1;    v67[id].index.numItems = 6;    v67[id].valide = true;    v18--;};function f76(i) {    v67[i].path = v67[i].path.replace('png', 'jpg');    v67[i].texture.image.src = v67[i].path;};function f77(i) {    v67[i].path = v67[i].path.replace('jpg', 'png');    v67[i].texture.image.src = v67[i].path;}var v10 = -1;var Dynas389v = {};var s352v = {};function f37(path) {    try {        if (v67[Dynas389v[path]].s348v == true) return Dynas389v[path];    } catch {}    for (var i = 1000; i < 2000; i++) {        if (v67[i].s348v == false) {            s352v[path] = 0;            v67[i].s348v = true;            Dynas389v[path] = i;            v18++;            v67[i].path = path;            v67[i].texture = gl.createTexture();            v67[i].texture.image = new Image();            v67[i].texture.image.crossOrigin = _TX(33);            v67[i].texture.image.onload = function() {                f46(i);                v25++;            };            v67[i].texture.image.onerror = function() {                s352v[path]++;                if (s352v[path] == 1) f76(i);                if (s352v[path] == 2) f77(i);                if (s352v[path] == 3) f76(i);                if (s352v[path] == 4) f77(i);                if (s352v[path] == 5) v18--;                else {                    window.famobi.log(_TX(34) + s352v[path], ", " + v67[i].texture.image.src);                    Dynas389v[path] = i;                }            };            v67[i].texture.image.src = path;            window.famobi.log(_TX(35) + path + _TX(36) + i);            return i;        }    }};function f117(id, path) {    v18++;    v67[id].path = path + "?" + Game_Version;    v67[id].texture = gl.createTexture();    v67[id].texture.image = new Image();    v67[id].texture.image.onload = function() {        f46(id);        v25++;    }    v67[id].texture.image.onerror = function() {        alert(_TX(37) + path);    }    v67[id].texture.image.src = path;};function f118() {    var MaxTexture = 2000;    for (var i = 0; i < MaxTexture; i++) {        v67.push();        v67[i] = new f211();    }    f54();};function f119(id, level) {    if (typeof v67[id] == _TX(1) || v67[id].valide == false) return;    if (level == 0) gl.activeTexture(gl.TEXTURE0);    else if (level == 1) gl.activeTexture(gl.TEXTURE1);    gl.bindTexture(gl.TEXTURE_2D, v67[id].texture);};function f120(id) {    try {        if (v67[id].valide == false) return;    } catch {        return;    }    f119(id, 0);    f39();    if (shader[v46].TextureCoor != -1) {        gl.bindBuffer(gl.ARRAY_BUFFER, v67[id].uv);        gl.vertexAttribPointer(shader[v46].TextureCoor, v67[id].uv.itemSize, gl.FLOAT, false, 0, 0);    }    gl.bindBuffer(gl.ARRAY_BUFFER, v67[id].vertex);    gl.vertexAttribPointer(shader[v46].s213v, v67[id].vertex.itemSize, gl.FLOAT, false, 0, 0);    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, v67[id].index);    gl.drawElements(gl.TRIANGLES, v67[id].index.numItems, gl.UNSIGNED_SHORT, 0);    v74 += 2;}var v3;var v2;var v4;function f54() {    v3 = gl.createBuffer();    gl.bindBuffer(gl.ARRAY_BUFFER, v3);    vertices = [-0.5, 0.5, -0.2, 0.5, 0.5, -0.2, 0.5, -0.5, -0.2, -0.5, -0.5, -0.2, ];    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);    v3.itemSize = 3;    v3.numItems = 4;    v2 = gl.createBuffer();    gl.bindBuffer(gl.ARRAY_BUFFER, v2);    var textureCoords = [        0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0,    ];    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoords), gl.STATIC_DRAW);    v2.itemSize = 2;    v2.numItems = 4;    v4 = gl.createBuffer();    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, v4);    var sVertexIndices = [0, 1, 2, 0, 2, 3];    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(sVertexIndices), gl.STATIC_DRAW);    v4.itemSize = 1;    v4.numItems = 6;};function f158(xa, ya, xb, yb) {    f212();    f122(xa, ya, 0.0);    f196(xb - xa, yb - ya, 1);    f122(0.5, 0.5, 0.0);    if (shader[v46].TextureCoor != -1) {        gl.bindBuffer(gl.ARRAY_BUFFER, v2);        gl.vertexAttribPointer(shader[v46].TextureCoor, v2.itemSize, gl.FLOAT, false, 0, 0);    }    gl.bindBuffer(gl.ARRAY_BUFFER, v3);    gl.vertexAttribPointer(shader[v46].s213v, v3.itemSize, gl.FLOAT, false, 0, 0);    f39(0);    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, v4);    gl.drawElements(gl.TRIANGLES, v4.numItems, gl.UNSIGNED_SHORT, 0);    f226();    v74 += 2;}var v77 = new Array();function f240() {    this.s389v;    this.Width = 0;    this.Height = 0;    this.Image = [];};function f159() {    this.Size_X;    this.Size_Y;    this.vertex;    this.uv;    this.index;    this.valide = true;};function f137(id, Datas) {    v77[id] = new f240();    var Lines = Datas.split('\n');    v77[id].s389v = f37(_TX(38) + Lines[0]);    Lines[1] = Lines[1].replace(',', '');    var Parts = Lines[1].split(' ');    v77[id].Width = Parts[1] * 1;    v77[id].Height = Parts[2] * 1;    for (var i = 5; i < Lines.length; i += 7) {        Lines[i] = Lines[i].replace(' ', '');        Lines[i] = Lines[i].replace('\r', '');        Lines[i] = Lines[i].replace('\n', '');        var Name = Lines[i];        if (Name.length > 0) {            v77[id].Image[Name] = new f159();            Lines[i + 2] = Lines[i + 2].replace(',', '');            var Parts = Lines[i + 2].split(' ');            var Pos_X = Parts[3] * 1;            var Pos_Y = Parts[4] * 1;            Lines[i + 3] = Lines[i + 3].replace(',', '');            var Parts = Lines[i + 3].split(' ');            var Size_X = Parts[3] * 1;            var Size_Y = Parts[4] * 1;            v77[id].Image[Name].Size_X = Size_X;            v77[id].Image[Name].Size_Y = Size_Y;            var U_a = Pos_X / v77[id].Width;            var V_b = 1.0 - Pos_Y / v77[id].Height;            var U_b = (Pos_X + Size_X) / v77[id].Width;            var V_a = 1.0 - (Pos_Y + Size_Y) / v77[id].Height;            v77[id].Image[Name].vertex = gl.createBuffer();            gl.bindBuffer(gl.ARRAY_BUFFER, v77[id].Image[Name].vertex);            var vertices = [-Size_X * 0.5, Size_Y * 0.5, -0.2, Size_X * 0.5, Size_Y * 0.5, -0.2, Size_X * 0.5, -Size_Y * 0.5, -0.2, -Size_X * 0.5, -Size_Y * 0.5, -0.2];            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);            v77[id].Image[Name].vertex.itemSize = 3;            v77[id].Image[Name].vertex.numItems = 4;            v77[id].Image[Name].uv = gl.createBuffer();            gl.bindBuffer(gl.ARRAY_BUFFER, v77[id].Image[Name].uv);            var textureCoords = [U_a, V_a, U_b, V_a, U_b, V_b, U_a, V_b];            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoords), gl.STATIC_DRAW);            v77[id].Image[Name].uv.itemSize = 2;            v77[id].Image[Name].uv.numItems = 4;            v77[id].Image[Name].index = gl.createBuffer();            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, v77[id].Image[Name].index);            var Indices = [0, 1, 2, 0, 2, 3];            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(Indices), gl.STATIC_DRAW);            v77[id].Image[Name].index.itemSize = 1;            v77[id].Image[Name].index.numItems = 6;        }    }    v18--;};function f160(id, Path) {    v18++;    var xmlhttp = new XMLHttpRequest();    xmlhttp.onload = function(e) {        if (this.status == 200) {            f137(id, xmlhttp.responseText);        }    }    xmlhttp.open("GET", Path + _TX(39) + Game_Version, true);    xmlhttp.send();};function f161(id, Name) {    try {        if (v77[id].Image[Name].valide != true) return;    } catch (error) {        return;    }    f119(v77[id].s389v, 0);    f39();    if (shader[v46].TextureCoor != -1) {        gl.bindBuffer(gl.ARRAY_BUFFER, v77[id].Image[Name].uv);        gl.vertexAttribPointer(shader[v46].TextureCoor, v77[id].Image[Name].uv.itemSize, gl.FLOAT, false, 0, 0);    }    gl.bindBuffer(gl.ARRAY_BUFFER, v77[id].Image[Name].vertex);    gl.vertexAttribPointer(shader[v46].s213v, v77[id].Image[Name].vertex.itemSize, gl.FLOAT, false, 0, 0);    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, v77[id].Image[Name].index);    gl.drawElements(gl.TRIANGLES, v77[id].Image[Name].index.numItems, gl.UNSIGNED_SHORT, 0);    v74 += 2;    return [v77[id].Image[Name].Size_X, v77[id].Image[Name].Size_Y]};function f162() {};function f121(s356v, Name, X, Y, SCALE) {    try {        if (v77[s356v].Image[Name].valide != true) return false;    } catch (error) {        return false;    }    var IsClicked = false;    var width = v77[s356v].Image[Name].Size_X * SCALE * 0.5;    var height = v77[s356v].Image[Name].Size_Y * SCALE * 0.5;    if (v80.x > X - Math.abs(width) && v80.x < X + Math.abs(width) && v80.y > Y - Math.abs(height) && v80.y < Y + Math.abs(height)) {        f126(2, 2, 2, 1);        if (v80.click == 1) {            IsClicked = true;            v80.click = -1;        }    } else f126(1, 1, 1, 1);    f212();    f122(X, Y, 0);    f196(SCALE, SCALE, 1);    f161(s356v, Name);    f226();    f126(1, 1, 1, 1);    if (v11 == 1) return false;    return IsClicked;};function f225(s389v, X, Y, SCALE) {    var IsClicked = false;    var width = v67[s389v].width * SCALE * 0.5;    var height = v67[s389v].height * SCALE * 0.5;    if (v80.x > X - Math.abs(width) && v80.x < X + Math.abs(width) && v80.y > Y - Math.abs(height) && v80.y < Y + Math.abs(height)) {        f126(2, 2, 2, 1);        if (v80.click == 1) {            IsClicked = true;            v80.click = -1;        }    } else f126(1, 1, 1, 1);    f212();    f122(X, Y, 0);    f196(SCALE, SCALE, 1);    f120(s389v);    f226();    f126(1, 1, 1, 1);    if (v11 == 1) return false;    return IsClicked;}var v16 = 0;var v57 = 0;function f177(Text, x, y, width, MaxChar) {    if (v11 == 1 && y > 320) y = 320;    if (        v80.x > x - width * 0.5 && v80.x < x + width * 0.5 && v80.y > y - 40 && v80.y < y + 40 && v80.click == 1    ) {        v16 = 1;        v11 = 1;        v80.click = -1;    }    f141(1);    if (v16 == 1)        f126(1, 1, 1, 1);    else f126(0.9, 0.9, 0.9, 1);    f212();    f122(x, y, 0);    f196(1.0, 1.0, 1);    f161(0, _TX(40));    f122(-115, 0, 0);    f196(0.7, 0.7, 1);    if (v16 == 1)        f126(0, 0, 0, 0.1);    else f126(0, 0, 0, 0.9);    f161(0, 'pen');    f226();    if (v16 == 1)        f126(0, 0, 0, 1.0);    else f126(0, 0, 0, 0.8);    f168(v90);    f212();    f122(x, y - 15, 0);    f196(1.0, 1.0, 1);    f183(0, "" + Text);    f226();    if (v16 == 1) {        if (v57 < 300)            f126(1, 1, 1, 1.0);        else f126(0, 0, 0, 0.025);        v57 += v95;        if (v57 > 600) v57 -= 600;        f212();        f122(x + f23(0, "" + Text) * 0.5 + 16, y, 0);        f161(0, _TX(41));        f226();    }    if (s209v != null) {        if ((s209v == _TX(42) || s209v == _TX(43) || s209v == _TX(44)) && Text.length > 0) {            Text = Text.slice(0, -1);        }        if (Text.length < MaxChar)            for (var i = 0; i < v24.length; i++) {                if (s209v == v24[i]) Text += v24[i];            }    }    s209v = null;    return Text;}var v85 = mat4.create();var v78 = mat4.create();var v47 = mat3.create();var v58 = mat4.create();var v68 = mat4.create();var v48 = mat4.create();var v49 = mat4.create();var v69 = mat4.create();var v45 = [];function f212() {    var copy = mat4.create();    mat4.copy(copy, v78);    v45.push(copy);};function f163() {    mat4.identity(v78);};function f226() {    if (v45.length == 0) {        throw _TX(45);    }    v78 = v45.pop();};function f122(x, y, z) {    mat4.translate(v78, v78, [x, y, z]);};function f196(x, y, z) {    mat4.scale(v78, v78, [x, y, z]);};function f178(Angle, x, y, z) {    mat4.rotate(v78, v78, f237(Angle), [x, y, z]);};function f179(_From, _Goal, _Up) {    var _z = new f236();    _z.x = _Goal.x - _From.x;    _z.y = _Goal.y - _From.y;    _z.z = _Goal.z - _From.z;    var _x = new f236();    _x.x = _Up.y * _z.z - _Up.z * _z.y;    _x.y = _Up.z * _z.x - _Up.x * _z.z;    _x.z = _Up.x * _z.y - _Up.y * _z.x;    _x = f194(_x);    var _y = new f236();    _y.x = _z.y * _x.z - _z.z * _x.y;    _y.y = _z.z * _x.x - _z.x * _x.z;    _y.z = _z.x * _x.y - _z.y * _x.x;    _y = f194(_y);    v69[0] = _x.x;    v69[1] = _x.y;    v69[2] = _x.z;    v69[3] = 0;    v69[4] = _y.x;    v69[5] = _y.y;    v69[6] = _y.z;    v69[7] = 0;    v69[8] = _z.x;    v69[9] = _z.y;    v69[10] = _z.z;    v69[11] = 0;    v69[12] = _From.x;    v69[13] = _From.y;    v69[14] = _From.z;    v69[15] = 1;    mat4.multiply(v78, v78, v69);};function f123(width, height) {    if (width > 0 && height > 0) {        gl.viewport(0, 0, width, height);        mat4.ortho(v85, 0, width, height, 0, 0.1, 800.0)    } else {        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);        mat4.ortho(v85, 0, s210v.x, s210v.y, 0, 0.1, 800.0)    }    mat4.identity(v78);    mat4.identity(v48);    gl.disable(gl.DEPTH_TEST);    gl.enable(gl.BLEND);    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);}var v30 = 5;var v38 = 6000;function f30(fov, width, height) {    if (width > 0 && height > 0) {        gl.viewport(0, 0, width, height);        mat4.perspective(v85, f237(fov), width / height, v30, v38);    } else {        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);        mat4.perspective(v85, f237(fov), s210v.x / s210v.y, v30, v38);    }    mat4.identity(v78);    gl.enable(gl.DEPTH_TEST);    gl.disable(gl.BLEND);    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);}var v70 = [];function f249(EyeX, EyeY, EyeZ, CenterX, CenterY, CenterZ, UpX, UpY, UpZ) {    v70[0] = EyeX;    v70[1] = EyeY;    v70[2] = EyeZ;    mat4.lookAt(v48, [EyeX, EyeY, EyeZ], [CenterX, CenterY, CenterZ], [UpX, UpY, UpZ]);};function f38(x, y, z) {    var w = v78[3] * x + v78[7] * y + v78[11] * z + v78[15];    w = w || 1.0;    var X = (v78[0] * x + v78[4] * y + v78[8] * z + v78[12]) / w;    var Y = (v78[1] * x + v78[5] * y + v78[9] * z + v78[13]) / w;    var Z = (v78[2] * x + v78[6] * y + v78[10] * z + v78[14]) / w;    return [X, Y, Z];}var v73 = [    [0, 0, 0, 0],    [0, 0, 0, 0],    [0, 0, 0, 0],    [0, 0, 0, 0],    [0, 0, 0, 0],    [0, 0, 0, 0]];var A = 0;var B = 1;var C = 2;var D = 3;var v93 = 0;var LEFT = 1;var v89 = 2;var TOP = 3;var BACK = 4;var v94 = 5;function f138(s200v, side) {    var s204v = Math.sqrt(s200v[side][A] * s200v[side][A] +        s200v[side][B] * s200v[side][B] +        s200v[side][C] * s200v[side][C]);    s200v[side][A] /= s204v;    s200v[side][B] /= s204v;    s200v[side][C] /= s204v;    s200v[side][D] /= s204v;};function f164() {    mat4.multiply(v58, v48, v78);    var clip = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];    clip[0] = v58[0] * v85[0] + v58[1] * v85[4] + v58[2] * v85[8] + v58[3] * v85[12];    clip[1] = v58[0] * v85[1] + v58[1] * v85[5] + v58[2] * v85[9] + v58[3] * v85[13];    clip[2] = v58[0] * v85[2] + v58[1] * v85[6] + v58[2] * v85[10] + v58[3] * v85[14];    clip[3] = v58[0] * v85[3] + v58[1] * v85[7] + v58[2] * v85[11] + v58[3] * v85[15];    clip[4] = v58[4] * v85[0] + v58[5] * v85[4] + v58[6] * v85[8] + v58[7] * v85[12];    clip[5] = v58[4] * v85[1] + v58[5] * v85[5] + v58[6] * v85[9] + v58[7] * v85[13];    clip[6] = v58[4] * v85[2] + v58[5] * v85[6] + v58[6] * v85[10] + v58[7] * v85[14];    clip[7] = v58[4] * v85[3] + v58[5] * v85[7] + v58[6] * v85[11] + v58[7] * v85[15];    clip[8] = v58[8] * v85[0] + v58[9] * v85[4] + v58[10] * v85[8] + v58[11] * v85[12];    clip[9] = v58[8] * v85[1] + v58[9] * v85[5] + v58[10] * v85[9] + v58[11] * v85[13];    clip[10] = v58[8] * v85[2] + v58[9] * v85[6] + v58[10] * v85[10] + v58[11] * v85[14];    clip[11] = v58[8] * v85[3] + v58[9] * v85[7] + v58[10] * v85[11] + v58[11] * v85[15];    clip[12] = v58[12] * v85[0] + v58[13] * v85[4] + v58[14] * v85[8] + v58[15] * v85[12];    clip[13] = v58[12] * v85[1] + v58[13] * v85[5] + v58[14] * v85[9] + v58[15] * v85[13];    clip[14] = v58[12] * v85[2] + v58[13] * v85[6] + v58[14] * v85[10] + v58[15] * v85[14];    clip[15] = v58[12] * v85[3] + v58[13] * v85[7] + v58[14] * v85[11] + v58[15] * v85[15];    v73[v93][A] = clip[3] - clip[0];    v73[v93][B] = clip[7] - clip[4];    v73[v93][C] = clip[11] - clip[8];    v73[v93][D] = clip[15] - clip[12];    f138(v73, v93);    v73[LEFT][A] = clip[3] + clip[0];    v73[LEFT][B] = clip[7] + clip[4];    v73[LEFT][C] = clip[11] + clip[8];    v73[LEFT][D] = clip[15] + clip[12];    f138(v73, LEFT);    v73[v89][A] = clip[3] + clip[1];    v73[v89][B] = clip[7] + clip[5];    v73[v89][C] = clip[11] + clip[9];    v73[v89][D] = clip[15] + clip[13];    f138(v73, v89);    v73[TOP][A] = clip[3] - clip[1];    v73[TOP][B] = clip[7] - clip[5];    v73[TOP][C] = clip[11] - clip[9];    v73[TOP][D] = clip[15] - clip[13];    f138(v73, TOP);    v73[BACK][A] = clip[3] - clip[2];    v73[BACK][B] = clip[7] - clip[6];    v73[BACK][C] = clip[11] - clip[10];    v73[BACK][D] = clip[15] - clip[14];    f138(v73, BACK);    v73[v94][A] = clip[3] + clip[2];    v73[v94][B] = clip[7] + clip[6];    v73[v94][C] = clip[11] + clip[10];    v73[v94][D] = clip[15] + clip[14];    f138(v73, v94);}var s360v = {    x: 0,    y: 0,    z: 0};function f55(x, y, z) {    s360v.x = x;    s360v.y = y;    s360v.z = z;};function f124(xa, ya, za, xb, yb, zb) {    for (var i = 0; i < 6; i++) {        if (v73[i][A] * (xa) + v73[i][B] * (yb) + v73[i][C] * (za) + v73[i][D] > 0) continue;        if (v73[i][A] * (xb) + v73[i][B] * (yb) + v73[i][C] * (za) + v73[i][D] > 0) continue;        if (v73[i][A] * (xa) + v73[i][B] * (ya) + v73[i][C] * (za) + v73[i][D] > 0) continue;        if (v73[i][A] * (xb) + v73[i][B] * (ya) + v73[i][C] * (za) + v73[i][D] > 0) continue;        if (v73[i][A] * (xa) + v73[i][B] * (yb) + v73[i][C] * (zb) + v73[i][D] > 0) continue;        if (v73[i][A] * (xb) + v73[i][B] * (yb) + v73[i][C] * (zb) + v73[i][D] > 0) continue;        if (v73[i][A] * (xa) + v73[i][B] * (ya) + v73[i][C] * (zb) + v73[i][D] > 0) continue;        if (v73[i][A] * (xb) + v73[i][B] * (ya) + v73[i][C] * (zb) + v73[i][D] > 0) continue;        return 0;    }    return 1;};function f56(x, y, z, radius) {    x += s360v.x;    y += s360v.y;    z += s360v.z;    for (var i = 0; i < 6; i++) {        if (v73[i][A] * x + v73[i][B] * y + v73[i][C] * z + v73[i][D] <= -radius) {            return 0;        }    }    return 1;};function f197() {    mat4.multiply(v68, v48, v78);    var IN = [0, 0, 0, 1];    var IN_B = [0, 0, 0, 0];    IN_B[0] = IN[0] * v68[0] + IN[1] * v68[4] + IN[2] * v68[8] + IN[3] * v68[12];    IN_B[1] = IN[0] * v68[1] + IN[1] * v68[5] + IN[2] * v68[9] + IN[3] * v68[13];    IN_B[2] = IN[0] * v68[2] + IN[1] * v68[6] + IN[2] * v68[10] + IN[3] * v68[14];    IN_B[3] = IN[0] * v68[3] + IN[1] * v68[7] + IN[2] * v68[11] + IN[3] * v68[15];    IN[0] = IN_B[0] * v85[0] + IN_B[1] * v85[4] + IN_B[2] * v85[8] + IN_B[3] * v85[12];    IN[1] = IN_B[0] * v85[1] + IN_B[1] * v85[5] + IN_B[2] * v85[9] + IN_B[3] * v85[13];    IN[2] = IN_B[0] * v85[2] + IN_B[1] * v85[6] + IN_B[2] * v85[10] + IN_B[3] * v85[14];    IN[3] = IN_B[0] * v85[3] + IN_B[1] * v85[7] + IN_B[2] * v85[11] + IN_B[3] * v85[15];    if (IN[3] == 0.0) {        return [-500, -500];    }    IN[0] /= IN[3];    IN[1] /= IN[3];    IN[2] /= IN[3];    if (IN[3] < 0.0) {        IN[0] *= 20000;        IN[1] *= 20000;    }    IN[0] = IN[0] * 0.5 + 0.5;    IN[1] = IN[1] * 0.5 + 0.5;    IN[2] = IN[2] * 0.5 + 0.5;    IN[0] = IN[0] * s210v.x;    IN[1] = IN[1] * s210v.y;    if (IN[3] > 0.0) {        return [IN[0], s210v.y - IN[1]];    } else {        return [s210v.y - IN[0], IN[1]]    }    return [0, 0];}var v11 = false;var v23 = 0;var v17 = 0;function f165(Key, x, y, width) {    f126(1, 1, 1, 0.3);    if (Key == _TX(46) && v23 == 1) f126(1, 0.5, 0, 1.0);    if (Key == "123" && v17 == 1) f126(1, 0.5, 0, 1.0);    var s205v = false;    if (        v80.x > x - width * 0.5 &&        v80.x < x + width * 0.5 && v80.y > y - 53 &&        v80.y < y + 53 && v80.click == 1    ) {        f126(1, 0.5, 0, 1.0);        s205v = true;    }    f212();    f122(x - width * 0.5, y, 0);    f196(0.5, 0.7, 0.5);    f120(3);    f226();    f212();    f122(x, y, 0);    f196((width - 24.0) / 10.0, 0.7, 0.5);    f120(4);    f226();    f212();    f122(x + width * 0.5, y, 0);    f196(-0.5, 0.7, 0.5);    f120(3);    f226();    switch (Key) {        case _TX(46):            f126(1, 1, 1, 1.0);            f212();            f122(x, y, 0);            f196(0.5, 0.5, 0.5);            f120(5);            f226();            if (s205v == true) {                v23 = 1 - v23;                v17 = 0;            }            break;        case "DEL":            f126(1, 1, 1, 1.0);            f212();            f122(x, y, 0);            f196(0.5, 0.5, 0.5);            f120(6);            f226();            if (s205v == true) s209v = _TX(42)            break;        case "123":            f126(1, 1, 1, 1.0);            f212();            f122(x, y, 0);            f196(0.5, 0.5, 0.5);            f120(7);            f226();            if (s205v == true) {                v17 = 1 - v17;                v23 = 0;            }            break;        case _TX(47):            f126(1, 1, 1, 1.0);            f212();            f122(x, y, 0);            f196(0.5, 0.5, 0.5);            f120(8);            f226();            if (s205v == true) s209v = " ";            break;        case _TX(48):            f126(1, 1, 1, 1.0);            f212();            f122(x, y, 0);            f196(0.5, 0.5, 0.5);            f120(9);            f226();            if (s205v == true) v11 = false;            break;        default:            f168(v90);            f212();            f122(x - 5, y - 17, 0);            f126(0, 0, 0, 1.0);            f183(0, " " + Key + " ");            f122(0, -2, 0);            f126(1, 1, 1, 1.0);            f183(0, " " + Key + " ");            f226();            if (s205v == true) s209v = Key;            break;    }};function f125() {    if (v31 == false) v11 = false;    if (v11 == false) return;    f123();    f141(1);    f126(1, 1, 1, 0.95);    var s369v = 800;    if (s369v > s210v.x - 30) s369v = s210v.x - 30;    if (v32 == false && v31 == true) s369v = s210v.x - 30    var s211v = s210v.y - 210;    var s365v = 110;    if (v80.y < s211v - 250 || v80.x < s210v.x * 0.5 - s369v * 0.5 - 40 || v80.x > s210v.x * 0.5 + s369v * 0.5 + 40) {        if (v80.click == 1) {            v11 = false;            v16 = -1;        }    }    f212();    f122(s210v.x * 0.5 - s369v * 0.5, s211v, 0);    f196(0.5, 0.53, 0.5);    f120(1);    f226();    f212();    f122(s210v.x * 0.5, s211v, 0);    f196((s369v - 30) / 10, 0.53, 0.5);    f120(2);    f226();    f212();    f122(s210v.x * 0.5 + s369v * 0.5, s211v, 0);    f196(-0.5, 0.53, 0.5);    f120(1);    f226();    var StdW = s369v / 10 * 1.033;    var PosX = s210v.x * 0.5 - s369v * 0.465;    var PosY = s211v - 176;    var s364v = 0;    if (v23 == 1) s364v = 29;    if (v17 == 1) s364v = 58;    for (var i = 0; i < 10; i++) {        var Key = v24[s364v];        f165(Key, PosX, PosY, StdW * 0.95)        PosX += StdW;        s364v++;    }    PosX = s210v.x * 0.5 - s369v * 0.465;    PosY += s365v;    for (var i = 0; i < 10; i++) {        var Key = v24[s364v];        f165(Key, PosX, PosY, StdW * 0.95)        PosX += StdW;        s364v++;    }    PosX = s210v.x * 0.5 - s369v * 0.465;    PosY += s365v;    f165(_TX(46), PosX + StdW * 0.25, PosY, StdW * 1.45)    PosX += StdW * 1.5;    for (var i = 0; i < 7; i++) {        var Key = v24[s364v];        f165(Key, PosX, PosY, StdW * 0.95)        PosX += StdW;        s364v++;    }    f165("DEL", PosX + StdW * 0.25, PosY, StdW * 1.455)    PosX = s210v.x * 0.5 - s369v * 0.465;    PosY += s365v;    f165("123", PosX + StdW * 0.25, PosY, StdW * 1.45)    PosX += StdW * 1.5;    f165(v24[27], PosX, PosY, StdW * 0.95)    PosX += StdW * 3.0;    f165(_TX(47), PosX, PosY, StdW * 0.98 * 5)    PosX += StdW * 3.0;    f165(v24[28], PosX, PosY, StdW * 0.95)    PosX += StdW;    f165(_TX(48), PosX + StdW * 0.25, PosY, StdW * 1.45)}window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame ||    window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;var v79 = 0;var v95 = 0;var v39 = 0;var v74;var v71 = 0;var v50 = 0;var v86 = 1000.0 / 65.0;function f166() {    v74 = 0;    v46 = -1;    f40();    f143();};function f167() {    CapedIsReady = false;    var timeNow = new Date().getTime();    if (timeNow < v50 + v86) {        setTimeout(f167, (v50 + v86) - timeNow);        return    }    var elapsed = timeNow - (v79 || timeNow);    v79 = timeNow;    v50 = timeNow;    v95 = elapsed;    v39 = elapsed;    if (v95 > 65) v95 = 65;    if (v95 < 0.0001) v95 = 0.0001;    v71 = v71 * 0.9 + (1000 / v95) * 0.1    f166()    f123();    if (f229() == 1) f192();    f125();    requestAnimationFrame(f167);}var shader = new Array;var v59 = [_TX(49), _TX(50), _TX(51), _TX(52), _TX(53), _TX(54), _TX(55), _TX(56), _TX(57), _TX(58)];var v46 = -1;function f227() {    this.prog;    this.valide = false;    this.vsh = "";    this.fsh = "";    this.s213v;    this.s212v;    this.TextureCoor;    this.Normals;    this.PrMatrix;    this.MvMatrix;    this.NoMatrix;    this.CaMatrix;    this.ShMatrix;    this.Texture0;    this.Texture1;    this.Texture2;    this.Texture3;    this.Texture4;    this.Colors;    this.s215v;    this.LightDir;    this.CamPos;};function f139() {    for (var i = 0; i < 1000; i++) {        shader.push;        shader[i] = new f227();    }    for (var i = 0; i < v59.length; i++) {        f140(i, v59[i]);    }};function f31(id) {    shader[id].s213v = gl.getAttribLocation(shader[id].prog, _TX(59));    shader[id].s212v = gl.getAttribLocation(shader[id].prog, _TX(60));    shader[id].TextureCoor = gl.getAttribLocation(shader[id].prog, _TX(61));    shader[id].Normals = gl.getAttribLocation(shader[id].prog, _TX(62));    shader[id].v68 = gl.getUniformLocation(shader[id].prog, _TX(63));    shader[id].MvMatrix = gl.getUniformLocation(shader[id].prog, _TX(64));    shader[id].NoMatrix = gl.getUniformLocation(shader[id].prog, _TX(65));    shader[id].CaMatrix = gl.getUniformLocation(shader[id].prog, _TX(66));    shader[id].ShMatrix = gl.getUniformLocation(shader[id].prog, _TX(67));    shader[id].Texture0 = gl.getUniformLocation(shader[id].prog, _TX(68));    shader[id].Texture1 = gl.getUniformLocation(shader[id].prog, _TX(69));    shader[id].Texture2 = gl.getUniformLocation(shader[id].prog, _TX(70));    shader[id].Texture3 = gl.getUniformLocation(shader[id].prog, _TX(71));    shader[id].Texture4 = gl.getUniformLocation(shader[id].prog, _TX(72));    shader[id].s241v = gl.getUniformLocation(shader[id].prog, _TX(73));    shader[id].s243vRT = gl.getUniformLocation(shader[id].prog, _TX(74));    shader[id].Colors = gl.getUniformLocation(shader[id].prog, _TX(75));    shader[id].LightDir = gl.getUniformLocation(shader[id].prog, _TX(76));    shader[id].CamPos = gl.getUniformLocation(shader[id].prog, _TX(77));    shader[id].s215v = gl.getUniformLocation(shader[id].prog, _TX(78));};function f57(id) {    var s374v = gl.createShader(gl.VERTEX_SHADER);    gl.shaderSource(s374v, shader[id].vsh);    gl.compileShader(s374v);    if (!gl.getShaderParameter(s374v, gl.COMPILE_STATUS)) {        alert(_TX(79) + id + "]" + gl.getShaderInfoLog(s374v));        alert(shader[id].vsh);        return;    }    var s373v = gl.createShader(gl.FRAGMENT_SHADER);    gl.shaderSource(s373v, shader[id].fsh);    gl.compileShader(s373v);    if (!gl.getShaderParameter(s373v, gl.COMPILE_STATUS)) {        alert(_TX(80) + id + "]" + gl.getShaderInfoLog(s373v));        alert(shader[id].fsh);        return;    }    shader[id].prog = gl.createProgram();    gl.attachShader(shader[id].prog, s374v);    gl.attachShader(shader[id].prog, s373v);    gl.linkProgram(shader[id].prog);    if (!gl.getProgramParameter(shader[id].prog, gl.LINK_STATUS)) {        alert(_TX(81) + id);        return;    }    gl.useProgram(shader[id].prog);    f31(id);    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);    gl.vertexAttribPointer(shader[id].s213v, 1, gl.FLOAT, false, 0, 0);    shader[id].valide = true;    v18--;    v41--;};function f58(id, name) {    window.famobi.log(_TX(82) + id + " " + name);    var xmlhttp;    if (window.XMLHttpRequest) {        xmlhttp = new XMLHttpRequest();    } else {        xmlhttp = new ActiveXObject(_TX(83));    }    xmlhttp.onreadystatechange = function() {        if (xmlhttp.readyState == 4) {            shader[id].fsh = "\n" + xmlhttp.responseText + "\n";            f57(id);        }    }    xmlhttp.overrideMimeType(_TX(84));    xmlhttp.open("GET", _TX(85) + name + _TX(86) + Game_Version, true);    xmlhttp.send();};function f59(id, name) {    var xmlhttp;    if (window.XMLHttpRequest) {        xmlhttp = new XMLHttpRequest();    } else {        xmlhttp = new ActiveXObject(_TX(83));    }    xmlhttp.onreadystatechange = function() {        if (xmlhttp.readyState == 4) {            shader[id].vsh = "\n" + xmlhttp.responseText + "\n";            f58(id, name);        }    }    xmlhttp.overrideMimeType(_TX(84));    xmlhttp.open("GET", _TX(85) + name + _TX(87) + Game_Version, true);    xmlhttp.send();};function f140(id, name) {    window.famobi.log(_TX(88), name)    v18++;    v41++;    f59(id, name);};function f141(id) {    if (shader[id].valide == false) {        window.famobi.log(_TX(89) + id);        return;    }    gl.useProgram(shader[id].prog);    if (shader[id].s213v != -1) gl.enableVertexAttribArray(shader[id].s213v);    if (shader[id].s212v != -1) gl.enableVertexAttribArray(shader[id].s212v);    if (shader[id].TextureCoor != -1) gl.enableVertexAttribArray(shader[id].TextureCoor);    if (shader[id].Normals != -1) gl.enableVertexAttribArray(shader[id].Normals);    if (shader[id].s215v != -1) gl.enableVertexAttribArray(shader[id].s215v);    v46 = id;};function f39() {    if (shader[v46].v68 != null) gl.uniformMatrix4fv(shader[v46].v68, false, v85);    if (shader[v46].MvMatrix != null) gl.uniformMatrix4fv(shader[v46].MvMatrix, false, v78);    if (shader[v46].CaMatrix != null) gl.uniformMatrix4fv(shader[v46].CaMatrix, false, v48);    if (shader[v46].ShMatrix != null) gl.uniformMatrix4fv(shader[v46].ShMatrix, false, v49);    if (shader[v46].NoMatrix != null) {        mat3.normalFromMat4(v47, v78);        gl.uniformMatrix3fv(shader[v46].NoMatrix, false, v47);    }    if (shader[v46].Texture0 != null) gl.uniform1i(shader[v46].Texture0, 0);    if (shader[v46].Texture1 != null) gl.uniform1i(shader[v46].Texture1, 1);    if (shader[v46].Texture2 != null) gl.uniform1i(shader[v46].Texture2, 2);    if (shader[v46].Texture3 != null) gl.uniform1i(shader[v46].Texture3, 3);    if (shader[v46].Texture4 != null) gl.uniform1i(shader[v46].Texture4, 4);    if (shader[v46].LightDir != null) gl.uniform3f(shader[v46].LightDir, s74vLx, s74vLy, s74vLz);    if (shader[v46].CamPos != null) gl.uniform3f(shader[v46].CamPos, v70[0], v70[1], v70[2]);}var v1;function f60(X, Y, Z) {    Normal = f194({        x: X,        y: Y,        z: Z    });    s74vLx = Normal.x;    s74vLy = Normal.y;    s74vLz = Normal.z;}var v0;function f126(R, G, B, A) {    s74vR = R;    s74vG = G;    s74vB = B;    s74vA = A;    if (v46 == -1 || shader[v46].valide == false) return;    gl.uniform4f(shader[v46].Colors, R, G, B, A);}var v80;function f228() {    this.x = -1;    this.y = -1;    this.old_x;    this.old_y;    this.real_x;    this.real_y;    this.s378v = 0;    this.button_b = 0;    this.click = 0;};function f40() {    if (v80.click == 1) v80.click = -1;    if (v80.s378v == 1 && v80.click == 0) v80.click = 1;    if (v80.s378v == 0 && v80.click == -1) v80.click = 0;};function f47(X, Y) {    v80.real_x = X;    v80.real_y = Y;    v80.old_x = v80.x;    v80.x = X;    v80.old_y = v80.y;    v80.y = Y;    v80.x -= v27;    v80.y -= v36;    v80.x *= s210v.x / s343v.x;    v80.y *= s210v.y / s343v.y;    v80.x = Math.floor(v80.x);    if (isNaN(v80.x) == true) v80.x = 0;    if (v80.x < 0) v80.x = 0;    v80.y = Math.floor(v80.y);    if (isNaN(v80.y) == true) v80.y = 0;    if (v80.y < 0) v80.y = 0;    if (v80.x > s210v.x) v80.x = s210v.x;    if (v80.y > s210v.y) v80.y = s210v.y;    return;};function f61() {    se_canvas.onmousemove = function(e) {        f47(e.pageX, e.pageY);    }    se_canvas.onmousedown = function(e) {        f134();        f47(e.pageX, e.pageY);        if (e.buttons == 1) v80.s378v = 1;        if (e.buttons == 2) v80.button_b = 1;    }    se_canvas.onmouseup = function(e) {        if (e.buttons != 1) v80.s378v = 0;        if (e.buttons != 2) v80.button_b = 0;    }    se_canvas.onmouseenter = function(e) {        if (e.buttons != 1) v80.s378v = 0;        if (e.buttons != 2) v80.button_b = 0;    }};function f198(evt) {    var touches = evt.changedTouches;    for (var i = 0; i < touches.length; i++) {        f47(touches[i].pageX, touches[i].pageY);    }}var v40 = new Array;function f199() {    v40 = [];};function f32(idToFind) {    for (var i = 0; i < v40.length; i++) {        var id = v40[i].identifier;        if (id == idToFind) {            return i;        }    }    return -1;};function f62() {    se_canvas.addEventListener(_TX(90), function(e) {        e.preventDefault();        e.stopPropagation();        f134();        f47(e.changedTouches[0].pageX, e.changedTouches[0].pageY);        v80.s378v = 1;        var touches = e.changedTouches;        for (var i = 0; i < touches.length; i++) {            v40.push({                identifier: touches[i].identifier,                pageX: touches[i].pageX,                pageY: touches[i].pageY,                clicked: 0            });        }        return false;    }, false);    se_canvas.addEventListener(_TX(91), function(e) {        e.preventDefault();        e.stopPropagation();        f47(e.changedTouches[0].pageX, e.changedTouches[0].pageY);        v80.s378v = 1;        var touches = e.changedTouches;        for (var i = 0; i < touches.length; i++) {            var idx = f32(touches[i].identifier);            v40[idx].pageX = touches[i].pageX;            v40[idx].pageY = touches[i].pageY;        }        return false;    }, false);    se_canvas.addEventListener(_TX(92), function(e) {        e.preventDefault();        e.stopPropagation();        v80.s378v = 0;        var touches = e.changedTouches;        for (var i = 0; i < touches.length; i++) {            var idx = f32(touches[i].identifier);            v40.splice(idx, 1);        }        return false;    }, false);    se_canvas.addEventListener(_TX(93), function(e) {        e.preventDefault();        e.stopPropagation();        v80.s378v = 0;        var touches = e.changedTouches;        for (var i = 0; i < touches.length; i++) {            var idx = f32(touches[i].identifier);            v40.splice(idx, 1);        }        return false;    }, false);    se_canvas.addEventListener(_TX(94), function(e) {        e.preventDefault();        e.stopPropagation();        v80.s378v = 0;        var touches = e.changedTouches;        for (var i = 0; i < touches.length; i++) {            var idx = f32(touches[i].identifier);            v40.splice(idx, 1);        }        return false;    }, false);};function f63() {    v80 = new f228();    if (v31 == 0)        f61();    else f62();};function f13(ax, ay, bx, by) {    for (var i = 0; i < v40.length; i++) {        var x = v40[i].pageX / s343v.x * s210v.x;        var y = v40[i].pageY / s343v.y * s210v.y;        if (            v40[i].clicked == 0 &&            x > ax &&            x < bx &&            y > ay &&            y < by        ) {            v40[i].clicked = 1;            return 1;        }    }    if (v80.click == 1 && v80.x >= ax && v80.x <= bx && v80.y >= ay && v80.y <= by) {        v80.click = -1;        return 1;    }    return 0;};function f64(ax, ay, bx, by) {    if (v80.s378v == 1 && v80.x >= ax && v80.x <= bx && v80.y >= ay && v80.y <= by) return 1;    for (var i = 0; i < v40.length; i++) {        var x = v40[i].pageX / s343v.x * s210v.x;        var y = v40[i].pageY / s343v.y * s210v.y;        if (            x > ax &&            x < bx &&            y > ay &&            y < by        ) return 1;    }    return 0;};function f245() {    this.s389v = -1;    this.glyph = [];};function f180() {    this.s109vX = 0;    this.s109vY = 0;    this.s113vX = 0;    this.s113vY = 0;    this.s114vX = 0;    this.s114vY = 0;    this.xOffset = 0;    this.yOffset = 0;    this.xAdvance = 0;    this.s213vitionBuffer;    this.TextureCoordBuffer;    this.VertexIndexBuffer;}var v87 = [];function f181() {    for (var i = 0; i < 10; i++) {        v87.push();        v87[i] = new f245();    }};function f182(id, path) {    window.famobi.log(_TX(95) + id + " " + path);    v87[id].s389v = f37(path + _TX(96) + Game_Version);    v18++;    var xmlhttp;    if (window.XMLHttpRequest) {        xmlhttp = new XMLHttpRequest();    } else {        xmlhttp = new ActiveXObject(_TX(83));    }    xmlhttp.onreadystatechange = function() {        if (xmlhttp.readyState == 4) {            f100(id, xmlhttp.responseText);            v18--;            v25++;        }    }    xmlhttp.overrideMimeType(_TX(84));    xmlhttp.open("GET", path + _TX(97), true);    xmlhttp.send();};function f6(id, CharID) {    v87[id].glyph[CharID].s213vitionBuffer = gl.createBuffer();    gl.bindBuffer(gl.ARRAY_BUFFER, v87[id].glyph[CharID].s213vitionBuffer);    vertices =        [            v87[id].glyph[CharID].xOffset, v87[id].glyph[CharID].yOffset + v87[id].glyph[CharID].s114vY, -0.25, v87[id].glyph[CharID].xOffset + v87[id].glyph[CharID].s114vX, v87[id].glyph[CharID].yOffset + v87[id].glyph[CharID].s114vY, -0.25, v87[id].glyph[CharID].xOffset + v87[id].glyph[CharID].s114vX, v87[id].glyph[CharID].yOffset, -0.25, v87[id].glyph[CharID].xOffset, v87[id].glyph[CharID].yOffset, -0.25,        ];    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);    v87[id].glyph[CharID].s213vitionBuffer.itemSize = 3;    v87[id].glyph[CharID].s213vitionBuffer.numItems = 4;    v87[id].glyph[CharID].VertexTextureCoordBuffer = gl.createBuffer();    gl.bindBuffer(gl.ARRAY_BUFFER, v87[id].glyph[CharID].VertexTextureCoordBuffer);    var textureCoords = [        v87[id].glyph[CharID].s109vX, v87[id].glyph[CharID].s113vY, v87[id].glyph[CharID].s113vX, v87[id].glyph[CharID].s113vY, v87[id].glyph[CharID].s113vX, v87[id].glyph[CharID].s109vY, v87[id].glyph[CharID].s109vX, v87[id].glyph[CharID].s109vY,    ];    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoords), gl.STATIC_DRAW);    v87[id].glyph[CharID].VertexTextureCoordBuffer.itemSize = 2;    v87[id].glyph[CharID].VertexTextureCoordBuffer.numItems = 4;    v87[id].glyph[CharID].VertexIndexBuffer = gl.createBuffer();    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, v87[id].glyph[CharID].VertexIndexBuffer);    var sVertexIndices = [0, 1, 2, 0, 2, 3];    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(sVertexIndices), gl.STATIC_DRAW);    v87[id].glyph[CharID].VertexIndexBuffer.itemSize = 1;    v87[id].glyph[CharID].VertexIndexBuffer.numItems = 6;};function f100(id, datas) {    datas = datas.replace(/\t/gi, ' ')    datas = datas.replace(/ /gi, ' ')    datas = datas.replace(/ /gi, ' ')    datas = datas.replace(/ /gi, ' ')    datas = datas.replace(/ /gi, ' ')    datas = datas.replace(/ /gi, ' ')    var s118v = false;    var scaleW = 1;    var scaleH = 1;    var lines = datas.split("\n");    for (i = 0; i < lines.length; i++) {        if (lines[i].slice(0, 6) == _TX(98)) {            var Parts = lines[i].split(' ');            scaleW = parseInt(Parts[3].split('=')[1]);            scaleH = parseInt(Parts[4].split('=')[1]);        }        if (lines[i].slice(0, 8) == _TX(99)) {            var Parts = lines[i].split(' ');            var CharID = parseInt(Parts[1].split("=")[1]);            v87[id].glyph[CharID] = new f180();            v87[id].glyph[CharID].s109vX = parseFloat(Parts[2].split("=")[1]) / scaleW;            v87[id].glyph[CharID].s109vY = 1.0 - parseFloat(Parts[3].split("=")[1]) / scaleH;            v87[id].glyph[CharID].s113vX = (parseFloat(Parts[2].split("=")[1]) + parseFloat(Parts[4].split("=")[1])) / scaleW;            v87[id].glyph[CharID].s113vY = 1.0 - (parseFloat(Parts[3].split("=")[1]) + parseFloat(Parts[5].split("=")[1])) / scaleH;            v87[id].glyph[CharID].s114vX = parseFloat(Parts[4].split("=")[1]);            v87[id].glyph[CharID].s114vY = parseFloat(Parts[5].split("=")[1]);            v87[id].glyph[CharID].xOffset = parseInt(Parts[6].split("=")[1]);            v87[id].glyph[CharID].yOffset = parseInt(Parts[7].split("=")[1]);            v87[id].glyph[CharID].xAdvance = parseInt(Parts[8].split("=")[1]);            f6(id, CharID);            s118v = true;        }    }    if (s118v == true) return;    var lines = datas.split("#");    for (i = 0; i < lines.length; i++) {        if (lines[i].slice(0, 7) == _TX(100)) {            var CharID = parseInt(lines[i].split("=")[1]);            i++;            v87[id].glyph[CharID] = new f180();            v87[id].glyph[CharID].s109vX = parseFloat(lines[i].split("(")[1].split(",")[0]);            v87[id].glyph[CharID].s109vY = 1.0 - parseFloat(lines[i].split("(")[1].split(",")[1]);            i++;            v87[id].glyph[CharID].s113vX = parseFloat(lines[i].split("(")[1].split(",")[0]);            v87[id].glyph[CharID].s113vY = 1.0 - parseFloat(lines[i].split("(")[1].split(",")[1]);            i++;            v87[id].glyph[CharID].s114vX = parseFloat(lines[i].split("(")[1].split(",")[0]);            v87[id].glyph[CharID].s114vY = parseFloat(lines[i].split("(")[1].split(",")[1]);            i++;            v87[id].glyph[CharID].xOffset = parseInt(lines[i].split("=")[1]);            i++;            v87[id].glyph[CharID].yOffset = parseInt(lines[i].split("=")[1]);            i++;            v87[id].glyph[CharID].xAdvance = parseInt(lines[i].split("=")[1]);            f6(id, CharID);            s118v = true;        }    }    if (s118v == true) return;}var left = 0;var v90 = 1;var right = 2;var v60 = 0;var v81 = 1;var v82 = 1;var v83 = 1;var v84 = 1;function f168(align) {    v60 = align;}var v75 = 0;function f65(ital) {    v75 = ital;};function f169(r, g, b, a) {    v81 = r;    v82 = g;    v83 = b;    v84 = a;}var v91 = 0;var v92 = 0;function f183(id, texte, PosX, PosY) {    if (v41 > 0) return;    if (PosX != null) v91 = PosX * 1;    else v91 = 0;    if (PosY != null) v92 = PosY * 1;    else v92 = 0;    v92 -= 5;    f141(2);    f126(v81, v82, v83, v84);    PrevTexture = -1;    f119(v87[id].s389v, 0);    f212()    if (v60 == right) v91 = -f23(id, texte);    if (v60 == v90) v91 = -f23(id, texte) * 0.5;    for (var i = 0; i < texte.length; i++) {        f78(id, texte.charCodeAt(i));    }    f226();    f141(1);};function f78(id, CharID) {    if (v41 > 0) return;    if (typeof v87[id].glyph[CharID] == _TX(1)) {        return;    }    if (shader[v46].s215v != null) gl.uniform3f(shader[v46].s215v, v91, v92, v75);    gl.bindBuffer(gl.ARRAY_BUFFER, v87[id].glyph[CharID].s213vitionBuffer);    gl.vertexAttribPointer(shader[v46].s213v, v87[id].glyph[CharID].s213vitionBuffer.itemSize, gl.FLOAT, false, 0, 0);    gl.bindBuffer(gl.ARRAY_BUFFER, v87[id].glyph[CharID].VertexTextureCoordBuffer);    gl.vertexAttribPointer(shader[v46].TextureCoor, v87[id].glyph[CharID].VertexTextureCoordBuffer.itemSize, gl.FLOAT, false, 0, 0);    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, v87[id].glyph[CharID].VertexIndexBuffer);    f39();    gl.drawElements(gl.TRIANGLES, v87[id].glyph[CharID].VertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);    v91 += v87[id].glyph[CharID].xAdvance;    v74 += 2;};function f23(id, texte) {    var TextWidth = 0;    for (var i = 0; i < texte.length; i++) {        TextWidth += f14(id, texte.charCodeAt(i));    }    return TextWidth;};function f14(id, CharID) {    if (typeof v87[id].glyph[CharID] == _TX(1)) return 0;    return v87[id].glyph[CharID].xAdvance;}var v31 = false;var v32 = false;function f200() {    var s122v = [_TX(101), _TX(102), _TX(103), _TX(104), _TX(105), _TX(106), _TX(4), _TX(5), _TX(107), _TX(108), _TX(109), _TX(110), _TX(111), _TX(112), _TX(113)];    for (var i = 0; i < s122v.length; i++) {        var MOBILE_Search = navigator.userAgent.toLowerCase().search(s122v[i]);        if (MOBILE_Search > -1) {            v31 = true;            return;        }    }    v31 = false;};function f201() {    var s122v = [_TX(105), _TX(5), _TX(101), _TX(102), _TX(104)];    for (var i = 0; i < s122v.length; i++) {        var MOBILE_Search = navigator.userAgent.toLowerCase().search(s122v[i]);        if (MOBILE_Search > -1) {            v32 = true;            return;        }    }    v32 = false;}systemn_Localisation = 'en';var v24 = _TX(114);function f66() {    var s382v = navigator.language || navigator.s382vuage;    systemn_Localisation = s382v.split('-')[0].toLowerCase();    if (systemn_Localisation == 'fr') v24 = _TX(115);    if (systemn_Localisation == 'de') v24 = _TX(116);    if (systemn_Localisation == 'du') v24 = _TX(116);};function f142() {    f200();    if (v31 == true) f201();    f66();};function f246(Name) {    this.Name = Name;    this.obj = [];    this.LevelObject = [];};function f213() {    this.Name;    this.v74 = 0;    this.Vertexs = 0;    this.s213vitionBuffer;    this.NormalBuffer;    this.TextureCoordBuffer;    this.VertexIndexBuffer;    this.s389v = -1;    this.Phys_s213vitionBuffer;    this.Phys_VertexIndexBuffer;    this.MinX = 100000;    this.MaxX = -100000;    this.MinY = 100000;    this.MaxY = -100000;    this.MinZ = 100000;    this.MaxZ = -100000;    this.Filter = false;    this.Filters469v = 0;    this.FilterForce = 0;    this.FilterRotY = 0;}var Mesh = [];var v61 = 0;var v62 = 0;var v63 = 0;var v64 = 0;var v65 = 0;var v76 = 0;var v33 = true;var v34 = false;function f143() {    v61 += v95 * 0.005;    if (v61 > 6.28319) v61 -= 6.28319;    v62 += v95 * 0.01;    if (v61 > 6.28319) v61 -= 6.28319;    v63 += v95 * 0.03;    if (v61 > 6.28319) v61 -= 6.28319;    v64 += v95 * 0.001;    if (v64 > 100) v64 -= 100;    v65 += v95 * 0.001;    if (v65 > 6.28319) v65 -= 6.28319;    v76 += v95 * 0.01;    if (v76 > 36000) v76 -= 360000;};function f184() {    for (var i = 0; i < 2000; i++) {        Mesh.push;    }};function f185(id, Path) {    v18++;    if (id < 0 || id > 1999) {        alert(_TX(117));        return;    }    Mesh[id] = new f246(Path);    var xmlhttp = new XMLHttpRequest();    xmlhttp.onload = function(e) {        if (this.status == 200) {            if (Path.lastIndexOf(_TX(118)) > 9)                f24(Mesh[id], xmlhttp.responseText);            if (Path.lastIndexOf(_TX(119)) > 9) {                var BinaryData = new Uint8Array(xmlhttp.response);                f48(Mesh[id], BinaryData);            }            if (Path.lastIndexOf(_TX(120)) > 9) {                const UnzipMyBlob = async function() {                    var reader = new zip.ZipReader(new zip.BlobReader(xmlhttp.response));                    var entries = await reader.getEntries();                    const BinaryData = await entries[0].getData(                        new zip.Uint8ArrayWriter(), {                            onprogress: (index, max) => {}                        });                    f48(Mesh[id], BinaryData);                }                UnzipMyBlob();            }        }    }    xmlhttp.open("GET", Path + "?" + Game_Version, true);    if (Path.lastIndexOf(_TX(119)) > 9) xmlhttp.responseType = _TX(19);    if (Path.lastIndexOf(_TX(120)) > 9) xmlhttp.responseType = _TX(121);    xmlhttp.send();};function f15(id) {    f126(1.0, 1.0, 1.0, 1.0);    for (var i = 0; i < Mesh[id].obj.length; i++) {        var Obj = Mesh[id].obj[i];        var CenterX = (Obj.MinX + Obj.MaxX) * 0.5;        var CenterY = (Obj.MinY + Obj.MaxY) * 0.5;        var CenterZ = (Obj.MinZ + Obj.MaxZ) * 0.5;        var ScaleX = Math.abs(Obj.MinX - Obj.MaxX);        var ScaleY = Math.abs(Obj.MinY - Obj.MaxY);        var ScaleZ = Math.abs(Obj.MinZ - Obj.MaxZ);        f212();        f122(CenterX, CenterY, CenterZ);        f196(ScaleX, ScaleY, ScaleZ);        f186(9);        f226();    }}var v12 = 13;var v13 = 3;var v5 = 16;function f186(id, Start, End) {    if (isNaN(Start)) Start = 0;    if (isNaN(End)) End = Mesh[id].obj.length;    else End++;    if (v46 == -1) return;    if (typeof Mesh[id] == _TX(1)) return;    if (Start > Mesh[id].obj.length - 1) return;    if (End > Mesh[id].obj.length) return;    for (var i = Start; i < End; i++) {        var Obj = Mesh[id].obj[i];        var Got_Filter = false;        if (v34 == false || f124(Obj.MaxX, Obj.MaxY, Obj.MaxZ, Obj.MinX, Obj.MinY, Obj.MinZ)) {            if (Obj.Filter != false && v33 == true) {                var s393v = v46;                var Saved_s74vR = s74vR;                var Saved_s74vG = s74vG;                var Saved_s74vB = s74vB;                var Saved_s74vA = s74vA;                Got_Filter = true;                gl.activeTexture(gl.TEXTURE0);            }            if (shader[v46].TextureCoor != -1) {                f119(Obj.s389v, 0);                gl.bindBuffer(gl.ARRAY_BUFFER, Obj.TextureCoordBuffer);                gl.vertexAttribPointer(shader[v46].TextureCoor, Obj.TextureCoordBuffer.itemSize, gl.FLOAT, false, 0, 0);            }            if (shader[v46].Normals != -1 && Obj.NormalBuffer.numItems > 0) {                gl.bindBuffer(gl.ARRAY_BUFFER, Obj.NormalBuffer);                gl.vertexAttribPointer(shader[v46].Normals, Obj.NormalBuffer.itemSize, gl.FLOAT, false, 0, 0);            }            gl.bindBuffer(gl.ARRAY_BUFFER, Obj.s213vitionBuffer);            gl.vertexAttribPointer(shader[v46].s213v, Obj.s213vitionBuffer.itemSize, gl.FLOAT, false, 0, 0);            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, Obj.VertexIndexBuffer);            f39();            gl.drawElements(gl.TRIANGLES, Obj.VertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);            v74 += Obj.v74;        }    }};function f79(id, idb, s389v, fade) {    f126(1.0, 1, 1, fade);    if (typeof Mesh[id] == _TX(1)) return;    for (var i = 0; i < Mesh[id].obj.length; i++) {        var Obj = Mesh[id].obj[i];        var ObjB = Mesh[idb].obj[i];        gl.bindBuffer(gl.ARRAY_BUFFER, Obj.s213vitionBuffer);        gl.vertexAttribPointer(shader[v46].s213v, Obj.s213vitionBuffer.itemSize, gl.FLOAT, false, 0, 0);        gl.bindBuffer(gl.ARRAY_BUFFER, ObjB.s213vitionBuffer);        gl.vertexAttribPointer(shader[v46].s212v, ObjB.s213vitionBuffer.itemSize, gl.FLOAT, false, 0, 0);        if (s389v == -1)            f119(Obj.s389v, 0);        else f119(s389v, 0);        gl.bindBuffer(gl.ARRAY_BUFFER, Obj.TextureCoordBuffer);        gl.vertexAttribPointer(shader[v46].TextureCoor, Obj.TextureCoordBuffer.itemSize, gl.FLOAT, false, 0, 0);        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, Obj.VertexIndexBuffer);        f39();        gl.drawElements(gl.TRIANGLES, Obj.VertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);        v74 += Obj.v74;    }};function f0(Va, VTa, VNa, Vb, VTb, VNb, Vc, VTc, VNc, Vd, VTd, VNd) {    this.Vec = new f236(Va, Vb, Vc, Vd);    this.VN = new f236(VNa, VNb, VNc, VNd);    this.VT = new f236(VTa, VTb, VTc, VTd);};function f24(Mesh, datas) {    var TempVec = [];    var TempVN = [];    var TempVT = [];    var TempFace = [];    var TempName = "";    var TempTexture = "";    var FaceMode = false;    var FaceCount = 0;    var OneLine = datas.split('\n');    for (i = 0; i < OneLine.length; i++) {        if (OneLine[i][0] != "f" && FaceMode == true) {            var ObjID = Mesh.obj.length;            Mesh.obj.push;            Mesh.obj[ObjID] = new f213();            var ObjTempVec = [];            var ObjTempVN = [];            var ObjTempVT = [];            var ObjTempFace = [];            function f144(Vec_ID, VT_ID, VN_ID) {                var Vec = TempVec[Vec_ID - 1];                var VT = TempVT[VT_ID - 1];                var VN = TempVN[VN_ID - 1];                var VecCount = ObjTempVec.length;                var UVCount = ObjTempVT.length;                for (var i = 0; i < VecCount / 3; i++) {                    if (Vec.x == ObjTempVec[i * 3] && Vec.y == ObjTempVec[i * 3 + 1] && Vec.z == ObjTempVec[i * 3 + 2] &&                        VT.x == ObjTempVT[i * 2] && VT.y == ObjTempVT[i * 2 + 1] &&                        VN.x == ObjTempVN[i * 3] && VN.y == ObjTempVN[i * 3 + 1] && VN.z == ObjTempVN[i * 3 + 2])                        return i;                }                if (Mesh.obj[ObjID].MinX > Vec.x * 1.0) Mesh.obj[ObjID].MinX = Vec.x * 1.0;                if (Mesh.obj[ObjID].MaxX < Vec.x * 1.0) Mesh.obj[ObjID].MaxX = Vec.x * 1.0;                if (Mesh.obj[ObjID].MinY > Vec.y * 1.0) Mesh.obj[ObjID].MinY = Vec.y * 1.0;                if (Mesh.obj[ObjID].MaxY < Vec.y * 1.0) Mesh.obj[ObjID].MaxY = Vec.y * 1.0;                if (Mesh.obj[ObjID].MinZ > Vec.z * 1.0) Mesh.obj[ObjID].MinZ = Vec.z * 1.0;                if (Mesh.obj[ObjID].MaxZ < Vec.z * 1.0) Mesh.obj[ObjID].MaxZ = Vec.z * 1.0;                ObjTempVec.push;                ObjTempVec[VecCount] = Vec.x;                ObjTempVec.push;                ObjTempVec[VecCount + 1] = Vec.y;                ObjTempVec.push;                ObjTempVec[VecCount + 2] = Vec.z;                ObjTempVN.push;                ObjTempVN[VecCount] = VN.x;                ObjTempVN.push;                ObjTempVN[VecCount + 1] = VN.y;                ObjTempVN.push;                ObjTempVN[VecCount + 2] = VN.z;                ObjTempVT.push;                ObjTempVT[UVCount] = VT.x;                ObjTempVT.push;                ObjTempVT[UVCount + 1] = VT.y;                var VecCount = ObjTempVec.length;                return VecCount / 3 - 1;            }            for (var j = 0; j < FaceCount; j++) {                var pointA = f144(TempFace[j].Vec.x, TempFace[j].VT.x, TempFace[j].VN.x);                var pointB = f144(TempFace[j].Vec.y, TempFace[j].VT.y, TempFace[j].VN.y);                var pointC = f144(TempFace[j].Vec.z, TempFace[j].VT.z, TempFace[j].VN.z);                ObjTempFace.push;                ObjTempFace[ObjTempFace.length] = pointA;                ObjTempFace.push;                ObjTempFace[ObjTempFace.length] = pointB;                ObjTempFace.push;                ObjTempFace[ObjTempFace.length] = pointC;                if (TempFace[j].Vec.w != false && TempFace[j].VT.z != false && TempFace[j].VN.z != false) {                    var pointD = f144(TempFace[j].Vec.w, TempFace[j].VT.w, TempFace[j].VN.w);                    ObjTempFace.push;                    ObjTempFace[ObjTempFace.length] = pointA;                    ObjTempFace.push;                    ObjTempFace[ObjTempFace.length] = pointD;                    ObjTempFace.push;                    ObjTempFace[ObjTempFace.length] = pointC;                }            }            var VecCount = ObjTempVec.length / 3;            Mesh.obj[ObjID].s213vitionBuffer = gl.createBuffer();            gl.bindBuffer(gl.ARRAY_BUFFER, Mesh.obj[ObjID].s213vitionBuffer);            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(ObjTempVec), gl.STATIC_DRAW);            Mesh.obj[ObjID].s213vitionBuffer.itemSize = 3;            Mesh.obj[ObjID].s213vitionBuffer.numItems = VecCount;            Mesh.obj[ObjID].TextureCoordBuffer = gl.createBuffer();            gl.bindBuffer(gl.ARRAY_BUFFER, Mesh.obj[ObjID].TextureCoordBuffer);            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(ObjTempVT), gl.STATIC_DRAW);            Mesh.obj[ObjID].TextureCoordBuffer.itemSize = 2;            Mesh.obj[ObjID].TextureCoordBuffer.numItems = VecCount;            Mesh.obj[ObjID].NormalBuffer = gl.createBuffer();            gl.bindBuffer(gl.ARRAY_BUFFER, Mesh.obj[ObjID].NormalBuffer);            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(ObjTempVN), gl.STATIC_DRAW);            Mesh.obj[ObjID].NormalBuffer.itemSize = 3;            Mesh.obj[ObjID].NormalBuffer.numItems = VecCount;            Mesh.obj[ObjID].VertexIndexBuffer = gl.createBuffer();            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, Mesh.obj[ObjID].VertexIndexBuffer);            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(ObjTempFace), gl.STATIC_DRAW);            Mesh.obj[ObjID].VertexIndexBuffer.itemSize = 1;            Mesh.obj[ObjID].VertexIndexBuffer.numItems = ObjTempFace.length;            Mesh.obj[ObjID].Name = TempName;            Mesh.obj[ObjID].v74 = ObjTempFace.length;            Mesh.obj[ObjID].Vertexs = VecCount;            var n = TempName.search(_TX(122));            if (n == 0) {                var Parts = TempName.split(":");                for (p = 0; p < Parts.length; p++) {                    var Part = Parts[p].split("=");                    if (Part[0] == _TX(123)) Mesh.obj[ObjID].Filter = Part[1];                    if (Part[0] == _TX(124)) Mesh.obj[ObjID].Filters469v = Part[1] * 1.0;                    if (Part[0] == _TX(125)) Mesh.obj[ObjID].FilterForce = Part[1] * 1.0;                }            }            Mesh.obj[ObjID].s389v = f37(_TX(38) + TempTexture + _TX(126));            FaceMode = false;            TempName = "";            TempTexture = "";            TempFace = [];            FaceCount = 0;        }        if (OneLine[i][0] == "v" && OneLine[i][1] == " ") {            var Line = OneLine[i].split(' ');            var VecID = TempVec.length;            TempVec.push;            TempVec[VecID] = new f236(-Line[1], Line[2], Line[3]);        }        if (OneLine[i][0] == "v" && OneLine[i][1] == "n") {            var Line = OneLine[i].split(' ');            var NormID = TempVN.length;            TempVN.push;            TempVN[NormID] = new f236(-Line[1], Line[2], Line[3], 0);        }        if (OneLine[i][0] == "v" && OneLine[i][1] == "t") {            var Line = OneLine[i].split(' ');            var UVsID = TempVT.length;            TempVT.push;            TempVT[UVsID] = new f236(Line[1], Line[2], 0, 0);        }        if (OneLine[i][0] == "g" && OneLine[i][1] == " ") {            var Line = OneLine[i].split(' ');            TempName = Line[1];        }        if (OneLine[i][0] == "u" && OneLine[i][1] == "s" && OneLine[i][4] == "t" && OneLine[i][5] == "l") {            var Line = OneLine[i].split(' ');            TempTexture = Line[1];        }        if (OneLine[i][0] == "f" && OneLine[i][1] == " ") {            var Line = OneLine[i].split(' ');            var face_A = Line[1].split('/');            var Va = face_A[0],                VTa = face_A[1],                VNa = face_A[2];            var face_B = Line[2].split('/');            var Vb = face_B[0],                VTb = face_B[1],                VNb = face_B[2];            var face_C = Line[3].split('/');            var Vc = face_C[0],                VTc = face_C[1],                VNc = face_C[2];            if (typeof Line[4] !== _TX(1))                var face_D = Line[4].split('/');            else var face_D = [false, false, false];            var Vd = face_D[0],                VTd = face_D[1],                VNd = face_D[2];            TempFace.push;            TempFace[FaceCount] = new f0(Va, VTa, VNa, Vb, VTb, VNb, Vc, VTc, VNc, Vd, VTd, VNd);            FaceCount++;            FaceMode = true;        }    }    v18--;    v25++;}var out = '';function f48(Mesh, binary) {    var datas = "";    for (var i = 0; i < binary.length; i++) {        var _char = String.fromCharCode(binary[i])        datas += _char;        if (_char == ">") i = binary.length;    }    var OneLine = datas.split('\n');    var indices = [];    var vertices = [];    var normals = [];    var UVs = [];    var Obj_Name = "";    var s126v = "";    var s130v = 0;    var s131v = 0;    var s132v = 0;    var MinX = 100000;    var MaxX = -100000;    var MinY = 100000;    var MaxY = -100000;    var MinZ = 100000;    var MaxZ = -100000;    function f145() {        var ObjID = Mesh.obj.length;        Mesh.obj.push;        Mesh.obj[ObjID] = new f213();        var n = Obj_Name.search(_TX(122));        if (n == 0) {            var Parts = Obj_Name.split(":");            for (p = 0; p < Parts.length; p++) {                var Part = Parts[p].split("=");                if (Part[0] == _TX(123)) Mesh.obj[ObjID].Filter = Part[1];                if (Part[0] == _TX(124)) Mesh.obj[ObjID].Filters469v = Part[1] * 1.0;                if (Part[0] == _TX(125)) Mesh.obj[ObjID].FilterForce = Part[1] * 1.0;            }        }        Mesh.obj[ObjID].s389v = f37(_TX(38) + s126v + _TX(126));        var VecCount = vertices.length / 3;        Mesh.obj[ObjID].s213vitionBuffer = gl.createBuffer();        gl.bindBuffer(gl.ARRAY_BUFFER, Mesh.obj[ObjID].s213vitionBuffer);        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);        Mesh.obj[ObjID].s213vitionBuffer.itemSize = 3;        Mesh.obj[ObjID].s213vitionBuffer.numItems = VecCount;        if (Obj_Name.search(_TX(127)) == 0) {            var Object_Name = Obj_Name.split('_')[1].split('.')[0];            var Average = [0, 0];            for (var i = 0; i < VecCount * 3; i += 3) {                Average[0] += vertices[i];                Average[1] += vertices[i + 1];            }            Average[0] /= 9.0;            Average[1] /= 9.0;            var Direction = f174([vertices[0], vertices[1]], [vertices[3], vertices[4]]);            var Normal = f193(Math.cos(Direction - 1.5708), Math.sin(Direction - 1.5708))            Direction *= 180 / Math.PI;            Direction -= 90;            Mesh.LevelObject.push({                name: Object_Name,                x: Average[0],                y: Average[1],                dir: Direction,                normal: Normal            })        }        Mesh.obj[ObjID].TextureCoordBuffer = gl.createBuffer();        gl.bindBuffer(gl.ARRAY_BUFFER, Mesh.obj[ObjID].TextureCoordBuffer);        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(UVs), gl.STATIC_DRAW);        Mesh.obj[ObjID].TextureCoordBuffer.itemSize = 2;        Mesh.obj[ObjID].TextureCoordBuffer.numItems = VecCount;        Mesh.obj[ObjID].NormalBuffer = gl.createBuffer();        gl.bindBuffer(gl.ARRAY_BUFFER, Mesh.obj[ObjID].NormalBuffer);        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(normals), gl.STATIC_DRAW);        Mesh.obj[ObjID].NormalBuffer.itemSize = 3;        Mesh.obj[ObjID].NormalBuffer.numItems = VecCount;        Mesh.obj[ObjID].VertexIndexBuffer = gl.createBuffer();        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, Mesh.obj[ObjID].VertexIndexBuffer);        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);        Mesh.obj[ObjID].VertexIndexBuffer.itemSize = 1;        Mesh.obj[ObjID].VertexIndexBuffer.numItems = indices.length;        if (Obj_Name == _TX(128)) {            Mesh.LinesToKeep = [];            for (var i = 0; i < indices.length; i += 3) {                var A = indices[i];                var B = indices[i + 1];                var C = indices[i + 2];                function f25(a, b) {                    var UV_a = UVs[a * 2];                    var UV_b = UVs[b * 2];                    if ((UV_a > 0.7 && UV_b > 0.7) || (UV_a < 0.3 && UV_b < 0.3)) {                        var v_a = a * 3;                        var v_b = b * 3;                        Mesh.LinesToKeep.push({                            a: {                                x: vertices[v_a],                                y: vertices[v_a + 1],                                z: vertices[v_a + 2]                            },                            b: {                                x: vertices[v_b],                                y: vertices[v_b + 1],                                z: vertices[v_b + 2]                            }                        })                    }                }                f25(A, B);                f25(B, C);                f25(C, A);            }        }        Mesh.obj[ObjID].Name = Obj_Name;        Mesh.obj[ObjID].v74 = indices.length / 3;        Mesh.obj[ObjID].Vertexs = VecCount;        Mesh.obj[ObjID].MinX = MinX;        Mesh.obj[ObjID].MaxX = MaxX;        Mesh.obj[ObjID].MinY = MinY;        Mesh.obj[ObjID].MaxY = MaxY;        Mesh.obj[ObjID].MinZ = MinZ;        Mesh.obj[ObjID].MaxZ = MaxZ;    }    var BinaryPos = datas.indexOf(_TX(129)) + 7;    for (i = 0; i < OneLine.length; i++) {        if (OneLine[i].search('O:') == 0) {            Obj_Name = OneLine[i].substring(2);        }        if (OneLine[i].search('B:') == 0) {            var BoundP = OneLine[i].split(":");            var BoundParts = BoundP[1].split(" ");            MinX = -BoundParts[0] * 1;            MinY = BoundParts[1] * 1;            MinZ = BoundParts[2] * 1;            MaxX = -BoundParts[3] * 1;            MaxY = BoundParts[4] * 1;            MaxZ = BoundParts[5] * 1;        }        if (OneLine[i].search('T:') == 0) {            s126v = OneLine[i].substring(2);        }        if (OneLine[i].search('F:') == 0) {            s130v = OneLine[i].substring(2) * 3;        }        if (OneLine[i].search('P:') == 0) {            s131v = OneLine[i].substring(2) * 1;        }        if (OneLine[i].search('D:') == 0) {            var s132v = OneLine[i].substring(2) * 1;            s132v += BinaryPos;            indices = [];            for (var k = 0; k < s130v; k++) {                var A = binary[s132v] * 1;                s132v++;                var B = binary[s132v] * 1;                s132v++;                var C = binary[s132v] * 1;                s132v++;                var Value = A + (B * 255) + (C * 65025);                indices[k] = Value;            }            vertices = [];            for (var k = 0; k < s131v; k++) {                var A = binary[s132v] * 1;                s132v++;                var B = binary[s132v] * 1;                s132v++;                var C = binary[s132v] * 1;                s132v++;                var Value = (A + (B * 255) + (C * 65025) - 8290687) / 1000.0;                vertices[k * 3] = -Value;                var A = binary[s132v] * 1;                s132v++;                var B = binary[s132v] * 1;                s132v++;                var C = binary[s132v] * 1;                s132v++;                var Value = (A + (B * 255) + (C * 65025) - 8290687) / 1000.0;                vertices[k * 3 + 1] = Value;                var A = binary[s132v] * 1;                s132v++;                var B = binary[s132v] * 1;                s132v++;                var C = binary[s132v] * 1;                s132v++;                var Value = (A + (B * 255) + (C * 65025) - 8290687) / 1000.0;                vertices[k * 3 + 2] = Value;            }            normals = [];            for (var k = 0; k < s131v; k++) {                var A = binary[s132v] * 1;                s132v++;                var B = binary[s132v] * 1;                s132v++;                var C = binary[s132v] * 1;                s132v++;                var Value = (A + (B * 255) + (C * 65025) - 8290687) / 1000.0;                normals[k * 3] = -Value;                var A = binary[s132v] * 1;                s132v++;                var B = binary[s132v] * 1;                s132v++;                var C = binary[s132v] * 1;                s132v++;                var Value = (A + (B * 255) + (C * 65025) - 8290687) / 1000.0;                normals[k * 3 + 1] = Value;                var A = binary[s132v] * 1;                s132v++;                var B = binary[s132v] * 1;                s132v++;                var C = binary[s132v] * 1;                s132v++;                var Value = (A + (B * 255) + (C * 65025) - 8290687) / 1000.0;                normals[k * 3 + 2] = Value;            }            UVs = [];            for (var k = 0; k < s131v; k++) {                var A = binary[s132v] * 1;                s132v++;                var B = binary[s132v] * 1;                s132v++;                var C = binary[s132v] * 1;                s132v++;                var Value = (A + (B * 255) + (C * 65025) - 8290687) / 1000.0;                UVs[k * 2] = Value;                var A = binary[s132v] * 1;                s132v++;                var B = binary[s132v] * 1;                s132v++;                var C = binary[s132v] * 1;                s132v++;                var Value = (A + (B * 255) + (C * 65025) - 8290687) / 1000.0;                UVs[k * 2 + 1] = 1.0 - Value;            }            var s133v = false;            if (Obj_Name.search(_TX(130)) == 0) s133v = true;            if (s133v == false) f145()        }        if (OneLine[i].search(_TX(129)) == 0) {            i = OneLine.length + 1;        }    }    v18--;    v25++;}var v18 = 0;var v41 = 0;var v42 = 0;var v35 = 0;var v51 = 0;var v25 = 0;var v66 = false;var v26 = 0;var v8 = 0;var v26_f248 = 0;function f80() {    if (v18 < 6) {        if (v42[v51].type == _TX(131)) {            f117(v42[v51].id, _TX(38) + v42[v51].path);            v51++;        } else if (v42[v51].type == _TX(132)) {            f185(v42[v51].id, _TX(133) + v42[v51].path);            v51++;        } else if (v42[v51].type == _TX(51)) {            f182(v42[v51].id, _TX(134) + v42[v51].path);            v51++;        } else if (v42[v51].type == _TX(135)) {            f152(v42[v51].id, _TX(136) + v42[v51].path);            v51++;        } else if (v42[v51].type == _TX(137)) {            f160(v42[v51].id, _TX(38) + v42[v51].path);            v51++;        }    }    if (v51 == v42.length) {        window.famobi.log(_TX(138));        v66 = true;    } else setTimeout(function() {        f80();    }, 10);};function f146() {    f101();    f49();    f50();    ResourceReady = -1;    var xmlhttp;    if (window.XMLHttpRequest) {        xmlhttp = new XMLHttpRequest();    } else {        xmlhttp = new ActiveXObject(_TX(83));    }    xmlhttp.onreadystatechange = function() {        if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {            var str = xmlhttp.responseText;            var OneLine = str.split('\n');            v42 = [];            v35 = 0;            for (i = 0; i < OneLine.length; i++) {                if (OneLine[i].length > 5 && OneLine[i][0] == "{") {                    v42[v35] = JSON.parse(OneLine[i]);                    v35++;                }            }            f80();        }    }    var TimeStamp = new Date().getTime();    xmlhttp.open("GET", _TX(139) + TimeStamp, true);    xmlhttp.send();};function f229() {    if (v66 == true) {        return 1;    }    if (v41 != 0) return 0;    gl.colorMask(true, true, true, true);    gl.clearColor(s410vbackground.r, s410vbackground.g, s410vbackground.b, 1.0);    gl.clear(gl.COLOR_BUFFER_BIT);    se_canvas.style.display = _TX(140);    f123();    f212();    f122(half_s210v.x, half_s210v.y, 0);    f4();    f226();    var FakePourcent = v51;    if (FakePourcent > 99) FakePourcent = 99;    f43(FakePourcent);    if (H5_H5app_IsH5 == true) {        h5games_LoadProgress(FakePourcent);        gl.clearColor(0.1, 0.1, 0.1, 1.0);        gl.clear(gl.COLOR_BUFFER_BIT);    }    return 0;}var s406vSize = 160;var s406vBarSize = 10;var s410vbackground = {    r: 0.1,    g: 0.0,    b: 0.2};var s410vbar_color = {    r: 0.2,    g: 0.1,    b: 0.3};var s406vcolor = {    r: 0.0,    g: 1.0,    b: 0.0};var s406vvertex;var s406vindex;var s406vbar_vertex;var s406vbar_index;var s406vicon_vertex;var s406vicon_index;var s406vicon_uv;function f101() {    var Step = 0.25;    var currentindice = 1;    var vertices = [];    var indices = [];    vertices.push(0);    vertices.push(0);    vertices.push(-0.2);    for (var i = 0; i < 360 + Step; i += Step) {        var x = Math.cos(f237(i + 90)) * (s406vSize + s406vBarSize * 1.5);        var y = Math.sin(f237(i + 90)) * (s406vSize + s406vBarSize * 1.5);        vertices.push(x);        vertices.push(y);        vertices.push(-0.2);        if (i < 360) {            indices.push(0);            indices.push(currentindice);            indices.push(currentindice + 1);            currentindice++;        }    }    s406vbar_vertex = gl.createBuffer();    s406vbar_index = gl.createBuffer();    gl.bindBuffer(gl.ARRAY_BUFFER, s406vbar_vertex);    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);    s406vbar_vertex.itemSize = 3;    s406vbar_vertex.numItems = vertices.length / 3;    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, s406vbar_index);    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);    s406vbar_index.itemSize = 1;    s406vbar_index.numItems = indices.length;    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);};function f49() {    var Step = 5;    var currentindice = 1;    var vertices = [];    var indices = [];    var uv = [];    vertices.push(0);    vertices.push(0);    vertices.push(-0.2);    uv.push(0.5);    uv.push(0.5);    for (var i = 0; i < 360 + Step; i += Step) {        var x = Math.cos(f237(i)) * (s406vSize - s406vBarSize);        var y = Math.sin(f237(i)) * (s406vSize - s406vBarSize);        vertices.push(x);        vertices.push(y);        vertices.push(-0.2);        var uv_x = 0.5 + Math.cos(f237(i)) * 0.495;        var uv_y = 0.5 - Math.sin(f237(i)) * 0.495;        uv.push(uv_x);        uv.push(uv_y);        if (i < 360) {            indices.push(0);            indices.push(currentindice);            indices.push(currentindice + 1);            currentindice++;        }    }    s406vicon_vertex = gl.createBuffer();    s406vicon_index = gl.createBuffer();    s406vicon_uv = gl.createBuffer();    gl.bindBuffer(gl.ARRAY_BUFFER, s406vicon_vertex);    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);    s406vicon_vertex.itemSize = 3;    s406vicon_vertex.numItems = vertices.length / 3;    gl.bindBuffer(gl.ARRAY_BUFFER, s406vicon_uv);    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(uv), gl.STATIC_DRAW);    s406vicon_uv.itemSize = 2;    s406vicon_uv.numItems = uv.length / 2;    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, s406vicon_index);    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);    s406vicon_index.itemSize = 1;    s406vicon_index.numItems = indices.length;    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);};function f50() {    var Step = 5;    var currentindice = 1;    var vertices = [];    var indices = [];    vertices.push(0);    vertices.push(0);    vertices.push(-0.2);    for (var i = 0; i < 360 + Step; i += Step) {        var x = Math.cos(f237(i)) * s406vSize;        var y = Math.sin(f237(i)) * s406vSize;        vertices.push(x);        vertices.push(y);        vertices.push(-0.2);        if (i < 360) {            indices.push(0);            indices.push(currentindice);            indices.push(currentindice + 1);            currentindice++;        }    }    currentindice++;    for (var i = 0; i < 360 + Step; i += Step) {        var x = Math.cos(f237(i)) * (s406vSize + s406vBarSize);        var y = Math.sin(f237(i)) * (s406vSize + s406vBarSize);        vertices.push(x);        vertices.push(y);        vertices.push(-0.2);        x = Math.cos(f237(i)) * (s406vSize + s406vBarSize * 2);        y = Math.sin(f237(i)) * (s406vSize + s406vBarSize * 2);        vertices.push(x);        vertices.push(y);        vertices.push(-0.2);        if (i < 360) {            indices.push(currentindice);            indices.push(currentindice + 1);            indices.push(currentindice + 2);            indices.push(currentindice + 2);            indices.push(currentindice + 1);            indices.push(currentindice + 3);            currentindice += 2;        }    }    s406vvertex = gl.createBuffer();    s406vindex = gl.createBuffer();    gl.bindBuffer(gl.ARRAY_BUFFER, s406vvertex);    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);    s406vvertex.itemSize = 3;    s406vvertex.numItems = vertices.length / 3;    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, s406vindex);    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);    s406vindex.itemSize = 1;    s406vindex.numItems = indices.length;    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);}var Prev_v26 = -1;function f4(id) {    v26 = (v25 / v35) * 100;    if (v26 > 100) v26 = 100;    if (v26 < 0) v26 = 0;    if (v26_f248 < v26) v26_f248 = v26_f248 * 0.5 + v26 * 0.5;    if (v26_f248 < v26 + 10 && v26_f248 < 95) v26_f248 += v95 * 0.0005;    if (v8 != v26_f248) {        v8 = v26_f248;    }    f141(0);    f39();    if (v26_f248 > 0) {        f126(s406vcolor.r, s406vcolor.g, s406vcolor.b, 1.0);        gl.bindBuffer(gl.ARRAY_BUFFER, s406vbar_vertex);        gl.vertexAttribPointer(shader[v46].s213v, s406vbar_vertex.itemSize, gl.FLOAT, false, 0, 0);        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, s406vbar_index);        gl.drawElements(gl.TRIANGLES, s406vbar_index.numItems * (v26_f248 * 0.01), gl.UNSIGNED_SHORT, 0);        v74 += s406vbar_vertex.itemSize;    }    f126(0, 0, 0, 0.1);    f122(8, 8, 0);    f39();    gl.bindBuffer(gl.ARRAY_BUFFER, s406vvertex);    gl.vertexAttribPointer(shader[v46].s213v, s406vvertex.itemSize, gl.FLOAT, false, 0, 0);    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, s406vindex);    gl.drawElements(gl.TRIANGLES, s406vindex.numItems, gl.UNSIGNED_SHORT, 0);    v74 += s406vvertex.itemSize;    f126(s410vbar_color.r, s410vbar_color.g, s410vbar_color.b, 1.0);    f122(-8, -8, 0);    f39();    gl.bindBuffer(gl.ARRAY_BUFFER, s406vvertex);    gl.vertexAttribPointer(shader[v46].s213v, s406vvertex.itemSize, gl.FLOAT, false, 0, 0);    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, s406vindex);    gl.drawElements(gl.TRIANGLES, s406vindex.numItems, gl.UNSIGNED_SHORT, 0);    v74 += s406vvertex.itemSize;    if (v67[0].valide == true) {        f141(1);        f126(1.0, 1.0, 1.0, 1.0);        if (v67[0].valide == true) f119(0, 0);        f39();        gl.bindBuffer(gl.ARRAY_BUFFER, s406vicon_vertex);        gl.vertexAttribPointer(shader[v46].s213v, s406vicon_vertex.itemSize, gl.FLOAT, false, 0, 0);        gl.bindBuffer(gl.ARRAY_BUFFER, s406vicon_uv);        gl.vertexAttribPointer(shader[v46].TextureCoor, s406vicon_uv.itemSize, gl.FLOAT, false, 0, 0);        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, s406vicon_index);        gl.drawElements(gl.TRIANGLES, s406vicon_index.numItems, gl.UNSIGNED_SHORT, 0);        v74 += s406vicon_vertex.itemSize;    }}var s243v = [];var s242v = 30;var s241v = [];var s243vRT = [];function f187() {    this.Pos = [0, 0, 0];    this.Vel = [0, 0, 0];    this.Size = 0;    this.Sizes = 0;    this.Rot = 0;    this.Rots = 0;    this.ImageID = 0;    this.Gravity = 0;}var s232v;var Part_GLUV;var Part_GLIndex;var s220v = []var s228v = []var s243v_Index = []var s251v = 0;function f81() {    var s219v = 0;    for (var i = 0; i < s242v; i++) {        s220v.push(-1);        s220v.push(-1);        s220v.push(i);        s220v.push(1);        s220v.push(-1);        s220v.push(i);        s220v.push(1);        s220v.push(1);        s220v.push(i);        s220v.push(-1);        s220v.push(1);        s220v.push(i);        s228v.push(0);        s228v.push(0);        s228v.push(0.0625);        s228v.push(0);        s228v.push(0.0625);        s228v.push(1);        s228v.push(0);        s228v.push(1);        s243v_Index.push(s219v);        s243v_Index.push(s219v + 1);        s243v_Index.push(s219v + 2);        s243v_Index.push(s219v);        s243v_Index.push(s219v + 2);        s243v_Index.push(s219v + 3);        s219v += 4;    }    s232v = gl.createBuffer();    gl.bindBuffer(gl.ARRAY_BUFFER, s232v);    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(s220v), gl.STATIC_DRAW);    s232v.itemSize = 3;    s232v.numItems = s220v.length / 3;    Part_GLUV = gl.createBuffer();    gl.bindBuffer(gl.ARRAY_BUFFER, Part_GLUV);    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(s228v), gl.STATIC_DRAW);    Part_GLUV.itemSize = 2;    Part_GLUV.numItems = s228v.length / 2;    Part_GLIndex = gl.createBuffer();    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, Part_GLIndex);    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(s243v_Index), gl.STATIC_DRAW);    Part_GLIndex.itemSize = 1;    Part_GLIndex.numItems = s243v_Index.length;}var s243vSlices = 0;function f82() {    f141(3);    if (shader[v46].TextureCoor == -1 || s243vRT.length < 1) return;    for (var i = 0; i < s243vSlices; i++) {        f39();        gl.uniform4fv(shader[v46].s241v, s241v[i]);        gl.uniform2fv(shader[v46].s243vRT, s243vRT[i]);        gl.bindBuffer(gl.ARRAY_BUFFER, Part_GLUV);        gl.vertexAttribPointer(shader[v46].TextureCoor, Part_GLUV.itemSize, gl.FLOAT, false, 0, 0);        gl.bindBuffer(gl.ARRAY_BUFFER, s232v);        gl.vertexAttribPointer(shader[v46].s213v, s232v.itemSize, gl.FLOAT, false, 0, 0);        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, Part_GLIndex);        gl.drawElements(gl.TRIANGLES, Part_GLIndex.numItems, gl.UNSIGNED_SHORT, 0);        v74 += s242v * 2;    }};function f51() {    var Ground = 0;    for (var i = 0; i < s243v.length; i++) {        s243v[i].Pos[0] += s243v[i].Vel[0] * v95;        s243v[i].Pos[1] += s243v[i].Vel[1] * v95;        s243v[i].Pos[2] += s243v[i].Vel[2] * v95;        s243v[i].Size += s243v[i].Sizes * v95;        s243v[i].Vel[1] -= s243v[i].Gravity * v95;        s243v[i].Rot += s243v[i].Rots * v95;        if (s243v[i].Size <= 0.1) {            s243v[i].Size = 0;        }    }    for (var i = 0; i < s243v.length; i++) {        if (s243v[i].Size == 0) s243v.splice(i, 1);    }    s251v = s243v.length;    s243vSlices = Math.ceil(s251v / s242v);    s241v = [];    s243vRT = [];    for (var i = 0; i < s243vSlices; i++) {        s241v.push();        s241v[i] = [];        s243vRT.push();        s243vRT[i] = [];    }    var ParticleID = 0;    for (var i = 0; i < s243vSlices; i++) {        for (var j = 0; j < s242v; j++) {            if (ParticleID < s251v) {                s241v[i].push(s243v[ParticleID].Pos[0]);                s241v[i].push(s243v[ParticleID].Pos[1]);                s241v[i].push(s243v[ParticleID].Pos[2]);                s241v[i].push(s243v[ParticleID].Size);                s243vRT[i].push(s243v[ParticleID].Rot);                s243vRT[i].push(s243v[ParticleID].ImageID);                ParticleID++;            } else {                s241v[i].push(0);                s241v[i].push(0);                s241v[i].push(0);                s241v[i].push(0);                s243vRT[i].push(0);                s243vRT[i].push(0);            }        }    }}var s243v_Position;function f9(Pos) {    s243v_Position = Pos;}var s243v_Velocity;function f10(Vel) {    s243v_Velocity = Vel;}var s243v_Size;function f41(Size) {    s243v_Size = Size;}var s243v_Sizes469v;function f7(Size) {    s243v_Sizes469v = Size;}var s243v_Rotation;function f11(Rot) {    s243v_Rotation = Rot;}var s243v_Rotations469v;function f1(Rot) {    s243v_Rotations469v = Rot;}var s243v_Gravity;function f16(Grav) {    s243v_Gravity = Grav;}var s243v_ImageID;function f17(Imag) {    s243v_ImageID = Imag / 16;};function f102() {    if (true) {        var id = s243v.length;        s243v.push(new f187());        s243v[id].Pos = s243v_Position;        s243v[id].Vel = s243v_Velocity;        s243v[id].Size = s243v_Size;        s243v[id].Sizes = s243v_Sizes469v;        s243v[id].Rot = s243v_Rotation;        s243v[id].Rots = s243v_Rotations469v;        s243v[id].Gravity = s243v_Gravity;        s243v[id].ImageID = s243v_ImageID;    }}s243vEmiters = [];function f18(type, x, y, z) {    window.famobi.log(_TX(141) + type + " " + x + " " + y + " " + z);    s243vEmiters.push({        type: type,        x: x,        y: y,        z: z,        time: 0    });};function f5() {    for (var i = 0; i < s243vEmiters.length; i++) {        if (f56(s243vEmiters[i].x, s243vEmiters[i].y, s243vEmiters[i].z, 110)) {            switch (s243vEmiters[i].type) {                case _TX(142):                    f9([s243vEmiters[i].x - 30 + Math.random() * 60, s243vEmiters[i].y + i, s243vEmiters[i].z - 30 + Math.random() * 60]);                    f10([-0.1 + 0.2 * Math.random(), 0.6 * Math.random(), -0.1 + 0.2 * Math.random()]);                    f7(-0.043);                    f1(0.01 * Math.random() - 0.005);                    f16(0.0019);                    f17(5);                    f41(15 + Math.random() * 10);                    f11(Math.random() * 360);                    f102()                    var Rb = Math.random() * 360;                    f1(0);                    f9([s243vEmiters[i].x + Math.sin(Rb * 0.01745329) * 7, 1, s243vEmiters[i].z + Math.cos(Rb * 0.01745329) * 7]);                    f10([Math.sin(Rb * 0.01745329) * 0.05, 0, Math.cos(Rb * 0.01745329) * 0.05]);                    f41(5 + Math.random() * 10);                    f7(-0.0085);                    f11(Math.random() * 360);                    f16(0.0);                    f17(3);                    f102()                    break;            }        }    }}var s33v = [];var s33vCount = 50;var s33vXYZS = [];var s33vRT = [];function f214() {    this.Pos = [0, 0, 0];    this.Size = 0;    this.Rot = 0;    this.ImageID = 0;    this.Gravity = 0;}var GLOW_GLVertex;var GLOW_GLUV;var GLOW_GLIndex;var s33v_Vertices = []var s33v_UV = []var s33v_Index = []var Glow_Index = 0;function f127() {    for (var i = 0; i < s33vCount; i++) {        s33v.push(new f214());        s33vXYZS.push();        s33vXYZS.push();        s33vXYZS.push();        s33vXYZS.push();        s33vRT.push();        s33vRT.push();    }    for (var i = 0; i < s33vCount; i++) {        s33v_Vertices.push(-1);        s33v_Vertices.push(-1);        s33v_Vertices.push(i);        s33v_Vertices.push(1);        s33v_Vertices.push(-1);        s33v_Vertices.push(i);        s33v_Vertices.push(1);        s33v_Vertices.push(1);        s33v_Vertices.push(i);        s33v_Vertices.push(-1);        s33v_Vertices.push(1);        s33v_Vertices.push(i);        s33v_UV.push(0);        s33v_UV.push(0);        s33v_UV.push(0.125);        s33v_UV.push(0);        s33v_UV.push(0.125);        s33v_UV.push(1);        s33v_UV.push(0);        s33v_UV.push(1);        s33v_Index.push(Glow_Index);        s33v_Index.push(Glow_Index + 1);        s33v_Index.push(Glow_Index + 2);        s33v_Index.push(Glow_Index);        s33v_Index.push(Glow_Index + 2);        s33v_Index.push(Glow_Index + 3);        Glow_Index += 4;    }    GLOW_GLVertex = gl.createBuffer();    gl.bindBuffer(gl.ARRAY_BUFFER, GLOW_GLVertex);    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(s33v_Vertices), gl.STATIC_DRAW);    GLOW_GLVertex.itemSize = 3;    GLOW_GLVertex.numItems = s33v_Vertices.length / 3;    GLOW_GLUV = gl.createBuffer();    gl.bindBuffer(gl.ARRAY_BUFFER, GLOW_GLUV);    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(s33v_UV), gl.STATIC_DRAW);    GLOW_GLUV.itemSize = 2;    GLOW_GLUV.numItems = s33v_UV.length / 2;    GLOW_GLIndex = gl.createBuffer();    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, GLOW_GLIndex);    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(s33v_Index), gl.STATIC_DRAW);    GLOW_GLIndex.itemSize = 1;    GLOW_GLIndex.numItems = s33v_Index.length;};function f128() {    f83();    f39();    gl.uniform4fv(shader[v46].s241v, s33vXYZS);    gl.uniform2fv(shader[v46].s243vRT, s33vRT);    gl.bindBuffer(gl.ARRAY_BUFFER, GLOW_GLUV);    gl.vertexAttribPointer(shader[v46].TextureCoor, GLOW_GLUV.itemSize, gl.FLOAT, false, 0, 0);    gl.bindBuffer(gl.ARRAY_BUFFER, GLOW_GLVertex);    gl.vertexAttribPointer(shader[v46].s213v, GLOW_GLVertex.itemSize, gl.FLOAT, false, 0, 0);    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, GLOW_GLIndex);    gl.drawElements(gl.TRIANGLES, GLOW_GLIndex.numItems, gl.UNSIGNED_SHORT, 0);    v74 += s33vCount * 2;};function f83() {    for (var i = 0; i < s33vCount; i++) {        if (s33v[i].Size > 0) {            s33vXYZS[i * 4] = s33v[i].Pos[0];            s33vXYZS[i * 4 + 1] = s33v[i].Pos[1];            s33vXYZS[i * 4 + 2] = s33v[i].Pos[2];            s33vXYZS[i * 4 + 3] = s33v[i].Size;            s33vRT[i * 2] = s33v[i].Rot;            s33vRT[i * 2 + 1] = s33v[i].ImageID;            s33v[i].Size = 0;        } else s33vXYZS[i * 4 + 3] = 0;    }};function f147(Img, Pos, Size, Rot) {    for (var i = 0; i < s33vCount; i++) {        if (s33v[i].Size <= 0) {            s33v[i].Pos = Pos;            s33v[i].Size = Size;            s33v[i].Rot = Rot;            s33v[i].ImageID = Img / 8;            return;        }    }}var s134v = false;var s138v = false;var s139v = false;var s143v = false;var s134v_Click = false;var s401v = 0;var s402v = 0;var s484v = false;var GamePad_Status = -1;var GamePad_PrevStatus = -1;var gamepads = null;function f84(Duration) {    if (gamepads[0] == null || gamepads.length < 1 || typeof gamepads[0].vibrationActuator == _TX(1) || gamepads[0].vibrationActuator == null) return;    window.famobi.log(gamepads[0].vibrationActuator)    gamepads[0].vibrationActuator.playEffect(_TX(143), {        startDelay: 0,        duration: Duration,        weakMagnitude: 1.0,        strongMagnitude: 1.0    });};function f85() {    gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : []);    if (gamepads[0] == null || gamepads.length < 1) return;    if (s134v_Click == 1) s134v_Click = -1;    if (s134v_Click == -1 && gamepads[0].buttons[0].pressed == false) s134v_Click = 0;    if (s134v_Click == 0 && gamepads[0].buttons[0].pressed == true) {        s134v_Click = 1;    }    GamePad_Status = gamepads[0].buttons[0].pressed + " " + gamepads[0].buttons[1].pressed + " " + gamepads[0].buttons[2].pressed + " " + gamepads[0].buttons[3].pressed + " " + gamepads[0].axes[0] + "" + gamepads[0].axes[1];    if (GamePad_PrevStatus != GamePad_Status) {        if (gamepads[0].buttons[0].pressed == true) s134v = 1;        else s134v = 0;        if (gamepads[0].buttons[1].pressed == true) s138v = 1;        else s138v = 0;        if (gamepads[0].buttons[2].pressed == true) s139v = 1;        else s139v = 0;        if (gamepads[0].buttons[3].pressed == true) s143v = 1;        else s143v = 0;        if (s134v_Click == 0 && s134v == 1) s134v_Click = 1;        if (gamepads[0].axes[0] < -0.1) s401v = -1;        else if (gamepads[0].axes[0] > 0.1) s401v = 1;        else s401v = 0;        if (gamepads[0].axes[1] < -0.1) s402v = -1;        else if (gamepads[0].axes[1] > 0.1) s402v = 1;        else s402v = 0;        GamePad_PrevStatus = GamePad_Status;        s484v = true;    } else s484v = false;}var seHeightMap_CountX = 0;var seHeightMap_CountZ = 0;var seHeightMap_StepX;var seHeightMap_StepZ;var seHeightMap_MinX;var seHeightMap_MaxX;var seHeightMap_MinZ;var seHeightMap_MaxZ;var seHeightMap_Loading = false;var s447v = false;var seHeightMap_Data;function f86(x, z) {    x = Math.floor(x);    z = Math.floor(z);    if (x < 0) x = 0;    if (x > 80) x = 80;    if (z < 0) z = 0;    if (z > 80) z = 80;    return seHeightMap_Data[x][z].y;};function f42(x, z, height) {    if (s447v == false) return 0;    if (isNaN(x) || isNaN(z)) return 0;    _x = (x + 4000) / 100;    _z = (z + 4000) / 100;    _x = Math.floor(_x);    _z = Math.floor(_z);    if (_x < 0) _x = 0;    if (_x > 80) _x = 80;    if (_z < 0) _z = 0;    if (_z > 80) _z = 80;    var dat = seHeightMap_Data[_x][_z].d;    for (var i = 0; i < GroundPlane.length; i++) {        if (height > GroundPlane[i].height - 100 && x > GroundPlane[i].ax && z > GroundPlane[i].az && x < GroundPlane[i].bx && z < GroundPlane[i].bz) {            dat = 50;            i = 1000;        }    }    return dat;};function f103(x, z, height) {    if (s447v == false) return 0;    if (isNaN(x) || isNaN(z)) return 0;    var _x = (x + 4000) / 100;    var _z = (z + 4000) / 100;    var slide_x = 1.0 - (_x - Math.floor(_x));    var slide_z = 1.0 - (_z - Math.floor(_z));    var a = f86(_x, _z);    var b = f86(_x + 1, _z);    var c = f86(_x + 1, _z + 1);    var d = f86(_x, _z + 1);    var h = (a * slide_x + b * (1.0 - slide_x)) * slide_z + (d * slide_x + c * (1.0 - slide_x)) * (1.0 - slide_z);    for (var i = 0; i < GroundPlane.length; i++) {        if (GroundPlane[i].height > h && height > GroundPlane[i].height - 100) {            if (x > GroundPlane[i].ax && z > GroundPlane[i].az && x < GroundPlane[i].bx && z < GroundPlane[i].bz) {                h = GroundPlane[i].height;            }        }    }    return h;};function f87(path) {    seHeightMap_Loading = true;    s447v = false;    path = _TX(144) + path + _TX(145);    window.famobi.log(path);    v18++;    var xmlhttp;    if (window.XMLHttpRequest) {        xmlhttp = new XMLHttpRequest();    } else {        xmlhttp = new ActiveXObject(_TX(83));    }    xmlhttp.onreadystatechange = function() {        window.famobi.log(_TX(146) + xmlhttp.readyState);        if (xmlhttp.readyState == 4) {            window.famobi.log(_TX(147) + path);            var OneLine = xmlhttp.responseText.split('\n');            seHeightMap_Data = new Array(81);            for (var x = 0; x < 81; x++)                seHeightMap_Data[x] = new Array(81);            for (var x = 0; x < 81; x++)                for (var z = 0; z < 81; z++)                    seHeightMap_Data[x][z] = 0;            for (i = 0; i < OneLine.length; i++) {                if (OneLine[i].length > 5) {                    var Line = OneLine[i].split(' ');                    var x = Math.round((-Line[0] * 1 + 4000) / 100);                    var z = Math.round((Line[2] * 1 + 4000) / 100);                    var y = Line[1] * 1;                    var d = Line[3] * 1;                    seHeightMap_Data[x][z] = {                        'y': y,                        'd': d                    };                }            }            v18--;            s447v = true;            seHeightMap_Loading = false;        }    }    xmlhttp.open("GET", path + "?" + Game_Version, false);    xmlhttp.send();}var f88_ready = false;function f230(valA, valB, Nx, Ny) {    return [valA * Nx + valB * Ny, valB * -Nx + valA * Ny];};function f19(x_a, z_a, w_a, h_a, r_a, x_b, z_b, w_b, h_b, r_b, Depth) {    var Decal = 0.5;    if (Depth > 0) {        var Norm_vector = new f236(0, 0, 0, 0);        Norm_vector.x = x_a - x_b;        Norm_vector.z = z_a - z_b;        Norm_vector = f194(Norm_vector);        x_a += Norm_vector.x * Decal;        z_a += Norm_vector.z * Decal;        x_b -= Norm_vector.x * Decal;        z_b -= Norm_vector.z * Decal;    }    if (Depth > 50) return 50;    var Nx = Math.sin((-90 + r_a) * 0.01745329);    var Ny = Math.cos((-90 + r_a) * 0.01745329);    var Pa_a = f230(w_a, h_a, Nx, Ny);    var Pb_a = f230(-w_a, h_a, Nx, Ny);    var Pc_a = f230(-w_a, -h_a, Nx, Ny);    var Pd_a = f230(w_a, -h_a, Nx, Ny);    Pa_a[0] += x_a;    Pa_a[1] += z_a;    Pb_a[0] += x_a;    Pb_a[1] += z_a;    Pc_a[0] += x_a;    Pc_a[1] += z_a;    Pd_a[0] += x_a;    Pd_a[1] += z_a;    Nx = Math.sin((-90 + r_b) * 0.01745329);    Ny = Math.cos((-90 + r_b) * 0.01745329);    var Pa_b = f230(w_b, h_b, Nx, Ny);    var Pb_b = f230(-w_b, h_b, Nx, Ny);    var Pc_b = f230(-w_b, -h_b, Nx, Ny);    var Pd_b = f230(w_b, -h_b, Nx, Ny);    Pa_b[0] += x_b;    Pa_b[1] += z_b;    Pb_b[0] += x_b;    Pb_b[1] += z_b;    Pc_b[0] += x_b;    Pc_b[1] += z_b;    Pd_b[0] += x_b;    Pd_b[1] += z_b;    if (f3(            Pa_a[0], Pa_a[1], Pb_a[0], Pb_a[1], Pa_b[0], Pa_b[1], Pb_b[0], Pb_b[1], false, ) == true) return f19(x_a, z_a, w_a, h_a, r_a, x_b, z_b, w_b, h_b, r_b, (Depth + Decal));    if (f3(            Pb_a[0], Pb_a[1], Pc_a[0], Pc_a[1], Pa_b[0], Pa_b[1], Pb_b[0], Pb_b[1], false, ) == true) return f19(x_a, z_a, w_a, h_a, r_a, x_b, z_b, w_b, h_b, r_b, (Depth + Decal));    if (f3(            Pc_a[0], Pc_a[1], Pd_a[0], Pd_a[1], Pa_b[0], Pa_b[1], Pb_b[0], Pb_b[1], false, ) == true) return f19(x_a, z_a, w_a, h_a, r_a, x_b, z_b, w_b, h_b, r_b, (Depth + Decal));    if (f3(            Pd_a[0], Pd_a[1], Pa_a[0], Pa_a[1], Pa_b[0], Pa_b[1], Pb_b[0], Pb_b[1], false, ) == true) return f19(x_a, z_a, w_a, h_a, r_a, x_b, z_b, w_b, h_b, r_b, (Depth + Decal));    if (f3(            Pa_a[0], Pa_a[1], Pb_a[0], Pb_a[1], Pb_b[0], Pb_b[1], Pc_b[0], Pc_b[1], false, ) == true) return f19(x_a, z_a, w_a, h_a, r_a, x_b, z_b, w_b, h_b, r_b, (Depth + Decal));    if (f3(            Pb_a[0], Pb_a[1], Pc_a[0], Pc_a[1], Pb_b[0], Pb_b[1], Pc_b[0], Pc_b[1], false, ) == true) return f19(x_a, z_a, w_a, h_a, r_a, x_b, z_b, w_b, h_b, r_b, (Depth + Decal));    if (f3(            Pc_a[0], Pc_a[1], Pd_a[0], Pd_a[1], Pb_b[0], Pb_b[1], Pc_b[0], Pc_b[1], false, ) == true) return f19(x_a, z_a, w_a, h_a, r_a, x_b, z_b, w_b, h_b, r_b, (Depth + Decal));    if (f3(            Pd_a[0], Pd_a[1], Pa_a[0], Pa_a[1], Pb_b[0], Pb_b[1], Pc_b[0], Pc_b[1], false, ) == true) return f19(x_a, z_a, w_a, h_a, r_a, x_b, z_b, w_b, h_b, r_b, (Depth + Decal));    if (f3(            Pa_a[0], Pa_a[1], Pb_a[0], Pb_a[1], Pc_b[0], Pc_b[1], Pd_b[0], Pd_b[1], false, ) == true) return f19(x_a, z_a, w_a, h_a, r_a, x_b, z_b, w_b, h_b, r_b, (Depth + Decal));    if (f3(            Pb_a[0], Pb_a[1], Pc_a[0], Pc_a[1], Pc_b[0], Pc_b[1], Pd_b[0], Pd_b[1], false, ) == true) return f19(x_a, z_a, w_a, h_a, r_a, x_b, z_b, w_b, h_b, r_b, (Depth + Decal));    if (f3(            Pc_a[0], Pc_a[1], Pd_a[0], Pd_a[1], Pc_b[0], Pc_b[1], Pd_b[0], Pd_b[1], false, ) == true) return f19(x_a, z_a, w_a, h_a, r_a, x_b, z_b, w_b, h_b, r_b, (Depth + Decal));    if (f3(            Pd_a[0], Pd_a[1], Pa_a[0], Pa_a[1], Pc_b[0], Pc_b[1], Pd_b[0], Pd_b[1], false, ) == true) return f19(x_a, z_a, w_a, h_a, r_a, x_b, z_b, w_b, h_b, r_b, (Depth + Decal));    if (f3(            Pa_a[0], Pa_a[1], Pb_a[0], Pb_a[1], Pd_b[0], Pd_b[1], Pa_b[0], Pa_b[1], false, ) == true) return f19(x_a, z_a, w_a, h_a, r_a, x_b, z_b, w_b, h_b, r_b, (Depth + Decal));    if (f3(            Pb_a[0], Pb_a[1], Pc_a[0], Pc_a[1], Pd_b[0], Pd_b[1], Pa_b[0], Pa_b[1], false, ) == true) return f19(x_a, z_a, w_a, h_a, r_a, x_b, z_b, w_b, h_b, r_b, (Depth + Decal));    if (f3(            Pc_a[0], Pc_a[1], Pd_a[0], Pd_a[1], Pd_b[0], Pd_b[1], Pa_b[0], Pa_b[1], false, ) == true) return f19(x_a, z_a, w_a, h_a, r_a, x_b, z_b, w_b, h_b, r_b, (Depth + Decal));    if (f3(            Pd_a[0], Pd_a[1], Pa_a[0], Pa_a[1], Pd_b[0], Pd_b[1], Pa_b[0], Pa_b[1], false, ) == true) return f19(x_a, z_a, w_a, h_a, r_a, x_b, z_b, w_b, h_b, r_b, (Depth + Decal));    return Depth;};function f88(x, y, z, w, h, r, Depth) {    if (f88_ready == false) return [x, z];    if (Depth == 0) Intersec_BoostPad = false;    if (Depth > 10) return [x, z];    f28(x, z, 125, 125);    var Nx = Math.sin((-90 + r) * 0.01745329);    var Ny = Math.cos((-90 + r) * 0.01745329);    var Pa = f230(w, h, Nx, Ny);    var Pb = f230(-w, h, Nx, Ny);    var Pc = f230(-w, -h, Nx, Ny);    var Pd = f230(w, -h, Nx, Ny);    Pa[0] += x;    Pa[1] += z;    Pb[0] += x;    Pb[1] += z;    Pc[0] += x;    Pc[1] += z;    Pd[0] += x;    Pd[1] += z;    f89(Pa[0], Pa[1], Pb[0], Pb[1], Pc[0], Pc[1], Pd[0], Pd[1], y);    if (s295v != 0) {        var a = x - ColDirX;        var b = z - ColDirY;        var angle = Math.atan2(b, a);        var nx = Math.cos(angle) * 2;        var nz = Math.sin(angle) * 2;        x += nx;        z += nz;        var result = f88(x, y, z, w, h, r, Depth + 1);        x = result[0];        z = result[1];    }    return [x, z];}var GroundPlane = [];var Wall = [];var Wall_3D = [];var s92v = [];var _Start = [];var _Pos = [];var s61v = [];var _f232s = [];function f170(Datas) {    s92v = null;    _Start = null;    _Pos = null;    s61v = null;    s92v = [];    _Start = [];    _Pos = [];    s61v = [];    var Data = Datas.split('\n');    var s147v = false;    var s147v_3D = false;    var IsPath = false;    var s149v = false;    var IsPos = false;    var s148v = false;    var s153v = false;    for (var i = 0; i < Data.length - 1; i++) {        if (Data[i].search(_TX(148)) != -1) {            window.famobi.log(_TX(149));            var planedata = Data[i].split(' ');            var _height = planedata[4] * 1.0;            var _posx = planedata[3] * 1.0;            var _posz = planedata[5] * 1.0;            var _sizex = planedata[1] * 0.5;            var _sizez = planedata[2] * 0.5;            var a_x = _posx - _sizex;            var a_z = _posz - _sizez;            var b_x = _posx + _sizex;            var b_z = _posz + _sizez;            var GroundObj = {                height: _height,                ax: a_x,                az: a_z,                bx: b_x,                bz: b_z            };            GroundPlane.push(GroundObj);            window.famobi.log(GroundObj);            s147v = false;            s147v_3D = false;            IsPath = false;            s149v = false;            IsPos = false;            s148v = false;            s153v = false;        } else {            if (Data[i].search(_TX(150)) != -1) {                s147v = true;                IsPath = false;                s149v = false;                IsPos = false;                s148v = false;                s147v_3D = false;                s153v = false;                if (Data[i].search(_TX(151)) != -1) {                    s147v = false;                    IsPath = true;                    IsPos = false;                    s147v_3D = false;                    s153v = false;                }                if (Data[i].search(_TX(152)) != -1) {                    s147v = false;                    s149v = true;                    IsPos = false;                    s147v_3D = false;                    s153v = false;                }                if (Data[i].search(_TX(153)) != -1) {                    s147v = false;                    s149v = false;                    IsPos = true;                    s147v_3D = false;                    s153v = false;                }                if (Data[i].search(_TX(154)) != -1) {                    s147v = false;                    s149v = false;                    IsPos = false;                    s147v_3D = false;                    s153v = true;                }                if (Data[i].search(_TX(155)) != -1) {                    s148v = true;                }                if (Data[i].search(_TX(156)) != -1) {                    s147v = false;                    IsPath = false;                    IsPos = false;                    s147v_3D = true;                    s153v = false;                }            }            var Xa = Data[i].split(' ')[0] * 1;            var Za = Data[i].split(' ')[1] * 1;            var Xb = Data[i + 1].split(' ')[0] * 1;            var Zb = Data[i + 1].split(' ')[1] * 1;            if (IsPos == true && !isNaN(Xa) && !isNaN(Za) && !isNaN(Xb) && !isNaN(Zb)) {                _Pos.push({                    x: Xa,                    z: Za                });                _Pos.push({                    x: Xb,                    z: Zb                });            }            if (s147v_3D == true && !isNaN(Xa) && !isNaN(Za) && !isNaN(Xb) && !isNaN(Zb)) {                var H = ((Data[i].split(' ')[2] * 1) + (Data[i + 1].split(' ')[2] * 1)) * 0.5;                Wall_3D.push({                    xa: Xa,                    za: Za,                    xb: Xb,                    zb: Zb,                    s291v: s148v,                    height: H                });            }            if (s147v == true && !isNaN(Xa) && !isNaN(Za) && !isNaN(Xb) && !isNaN(Zb)) {                Wall.push({                    xa: Xa,                    za: Za,                    xb: Xb,                    zb: Zb,                    s291v: s148v                });            }            if (IsPath == true && !isNaN(Xa) && !isNaN(Za) && !isNaN(Xb) && !isNaN(Zb)) {                s92v.push({                    ax: Xa,                    ay: Za,                    bx: Xb,                    by: Zb                });            }            if (s149v == true && !isNaN(Xa) && !isNaN(Za) && !isNaN(Xb) && !isNaN(Zb)) {                _Start.push({                    ax: Xa,                    ay: Za,                    bx: Xb,                    by: Zb                });            }            if (s153v == true && !isNaN(Xa) && !isNaN(Za)) {                while (s447v == false) {};                var PosY = f103(Xa, Za, -10000) + 50;                s61v.push({                    x: Xa,                    y: PosY,                    z: Za,                    t: 0                });            }        }    }    window.famobi.log(s92v[0]);};function f231(path) {    var s156v = _TX(157) + path + _TX(158);    var xmlhttp;    if (window.XMLHttpRequest) {        xmlhttp = new XMLHttpRequest();    } else {        xmlhttp = new ActiveXObject(_TX(83));    }    xmlhttp.onreadystatechange = function() {        f170(xmlhttp.responseText, 0, 0);    }    xmlhttp.overrideMimeType(_TX(84));    xmlhttp.open("GET", s156v, false);    xmlhttp.send();};function f26(path) {    Wall = null;    Wall = [];    Wall_3D = null;    Wall_3D = [];    GroundPlane = null;    GroundPlane = [];    f88_ready = false;    var s156v = _TX(157) + path + _TX(158);    var xmlhttp;    if (window.XMLHttpRequest) {        xmlhttp = new XMLHttpRequest();    } else {        xmlhttp = new ActiveXObject(_TX(83));    }    xmlhttp.onreadystatechange = function() {        if (xmlhttp.readyState == 4) {            f170(xmlhttp.responseText);            f129();            f34(-4000, -4000, 4000, 4000);            f68(10, 10);            for (var i = 0; i < Wall.length; i++)                f27(Wall[i].xa, Wall[i].za, Wall[i].xb, Wall[i].zb, Wall[i].s291v, 100000);            for (var i = 0; i < Wall_3D.length; i++)                f27(Wall_3D[i].xa, Wall_3D[i].za, Wall_3D[i].xb, Wall_3D[i].zb, Wall_3D[i].s291v, Wall_3D[i].height);            f33();            window.famobi.log(Wall.length + _TX(159));            window.famobi.log(Wall_3D.length + _TX(160));            f88_ready = true;        }    }    xmlhttp.overrideMimeType(_TX(84));    xmlhttp.open("GET", s156v, true);    xmlhttp.send();}var s283v = new Array();var s155vX = new Array();var s155vY = new Array();var s154v = 0;function f202() {    this.HashCount_X = 1;    this.HashCount_Y = 1;    this.HashSize_X = 0;    this.s297v = 0;    this.HashPos_Left = 0;    this.HashPos_Right = 0;    this.HashPos_Top = 0;    this.HashPos_Bottom = 0;    this.HashDetected = 0;    this.HashDetectedCount = 0;    this.s287v;    this.s287vCount = 0;    this.HashStaticsList;    this.Dyna_ax = 0;    this.Dyna_bx = 0;    this.Dyna_cx = 0;    this.Dyna_dx = 0;    this.Dyna_ay = 0;    this.Dyna_by = 0;    this.Dyna_cy = 0;    this.Dyna_dy = 0;};function f171() {    this.ax = 0;    this.ay = 0;    this.bx = 0;    this.by = 0;    this.s291v = false;    this.height = 0;};function f129() {    s283v = [];    s283v = new f202();    s283v.s287vCount = 0;    s283v.HashDetected = new Array();    for (var i = 0; i < 20; i++) s283v.HashDetected.push;    s283v.s287v = new Array();    s283v.HashStaticsList = new Array();    for (var i = 0; i < 100 * 100; i++) {        s283v.HashStaticsList.push;        s283v.HashStaticsList[i] = new Array();    }    for (var i = 0; i < 100; i++) {        s155vX.push;        s155vY.push;    }}var IntersecX = 0;var IntersecY = 0;var Intersec_BoostPad = false;var ColDirX, ColDirY, s295v;function f3(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y, s148v) {    var denom = ((b2y - b1y) * (a2x - a1x)) - ((b2x - b1x) * (a2y - a1y));    if (denom == 0) return false;    var ua = (((b2x - b1x) * (a1y - b1y)) - ((b2y - b1y) * (a1x - b1x))) / denom;    var ub = (((a2x - a1x) * (a1y - b1y)) - ((a2y - a1y) * (a1x - b1x))) / denom;    if (ua < 0 || ua > 1 || ub < 0 || ub > 1) return false;    if (s148v == true) {        Intersec_BoostPad = true;        return false;    }    IntersecX = a1x + ua * (a2x - a1x);    IntersecY = a1y + ua * (a2y - a1y);    s155vX[s154v] = IntersecX;    s155vY[s154v] = IntersecY;    s154v++;    if (s154v > 100) s154v = 0;    ColDirX += IntersecX;    ColDirY += IntersecY;    s295v++;    return true;};function f89(ax, ay, bx, by, cx, cy, dx, dy, height) {    s283v.Dyna_ax = ax;    s283v.Dyna_ay = ay;    s283v.Dyna_bx = bx;    s283v.Dyna_by = by;    s283v.Dyna_cx = cx;    s283v.Dyna_cy = cy;    s283v.Dyna_dx = dx;    s283v.Dyna_dy = dy;    if (s306v == 1) {        _f232s.push({            ax: ax,            ay: ay,            bx: bx,            by: by        });        _f232s.push({            ax: bx,            ay: by,            bx: cx,            by: cy        });        _f232s.push({            ax: cx,            ay: cy,            bx: dx,            by: dy        });        _f232s.push({            ax: dx,            ay: dy,            bx: ax,            by: ay        });    }    ColDirX = 0;    ColDirY = 0;    s295v = 0;    for (var i = 0; i < s283v.HashDetectedCount; i++) {        var s296v = s283v.HashDetected[i];        if (s296v > -1 && s296v < 10000) {            var SegCount = s283v.HashStaticsList[s296v].length;            for (var j = 0; j < SegCount; j++) {                var SegID = s283v.HashStaticsList[s296v][j];                if (height < s283v.s287v[SegID].height) {                    f3(ax, ay, bx, by, s283v.s287v[SegID].ax, s283v.s287v[SegID].ay, s283v.s287v[SegID].bx, s283v.s287v[SegID].by, s283v.s287v[SegID].s291v);                    f3(bx, by, cx, cy, s283v.s287v[SegID].ax, s283v.s287v[SegID].ay, s283v.s287v[SegID].bx, s283v.s287v[SegID].by, s283v.s287v[SegID].s291v);                    f3(cx, cy, dx, dy, s283v.s287v[SegID].ax, s283v.s287v[SegID].ay, s283v.s287v[SegID].bx, s283v.s287v[SegID].by, s283v.s287v[SegID].s291v);                    f3(dx, dy, ax, ay, s283v.s287v[SegID].ax, s283v.s287v[SegID].ay, s283v.s287v[SegID].bx, s283v.s287v[SegID].by, s283v.s287v[SegID].s291v);                }            }        }    }    if (s295v > 0) {        ColDirX /= s295v;        ColDirY /= s295v;    }};function f27(ax, ay, bx, by, s291v, height) {    s283v.s287v.push;    s283v.s287v[s283v.s287vCount] = new f171();    s283v.s287v[s283v.s287vCount].ax = ax;    s283v.s287v[s283v.s287vCount].ay = ay;    s283v.s287v[s283v.s287vCount].bx = bx;    s283v.s287v[s283v.s287vCount].by = by;    s283v.s287v[s283v.s287vCount].s291v = s291v;    s283v.s287v[s283v.s287vCount].height = height;    s283v.s287vCount++;};function f28(PosX, PosY, SizeX, SizeY) {    s283v.HashDetectedCount = 0;    var x = PosX - s283v.HashPos_Left;    var y = PosY - s283v.HashPos_Top;    var Left = Math.floor((x - SizeX * 0.5) / s283v.HashSize_X);    var Top = Math.floor((y - SizeY * 0.5) / s283v.s297v);    var Right = Math.floor((x + SizeX * 0.5) / s283v.HashSize_X);    var Bottom = Math.floor((y + SizeY * 0.5) / s283v.s297v);    for (var x = Left; x < Right + 1; x++) {        for (var y = Top; y < Bottom + 1; y++) {            s283v.HashDetected[s283v.HashDetectedCount] = Math.floor(x + y * s283v.HashCount_X);            s283v.HashDetectedCount++;            if (s283v.HashDetectedCount > 10) return;        }    }};function f33() {    for (var i = 0; i < s283v.s287vCount; i++) {        var PosX = (s283v.s287v[i].ax + s283v.s287v[i].bx) * 0.5;        var PosY = (s283v.s287v[i].ay + s283v.s287v[i].by) * 0.5;        var SizeX = Math.abs(s283v.s287v[i].bx - s283v.s287v[i].ax);        var SizeY = Math.abs(s283v.s287v[i].by - s283v.s287v[i].ay);        f28(PosX, PosY, SizeX, SizeY);        for (var j = 0; j < s283v.HashDetectedCount; j++) {            var s296v = s283v.HashDetected[j];            if (s296v > -1 && s296v < 10000) {                s283v.HashStaticsList[s296v].push(i);            }        }    }};function f67() {    s283v.HashSize_X = (s283v.HashPos_Right - s283v.HashPos_Left) / s283v.HashCount_X;    s283v.s297v = (s283v.HashPos_Bottom - s283v.HashPos_Top) / s283v.HashCount_Y;};function f34(HashPos_Left, HashPos_Top, HashPos_Right, HashPos_Bottom) {    s283v.HashPos_Left = HashPos_Left;    s283v.HashPos_Top = HashPos_Top;    s283v.HashPos_Right = HashPos_Right;    s283v.HashPos_Bottom = HashPos_Bottom;    f67();};function f68(HashCount_X, HashCount_Y) {    if (HashCount_X > 100) HashCount_X = 100;    if (HashCount_Y > 100) HashCount_Y = 100;    s283v.HashCount_X = HashCount_X;    s283v.HashCount_Y = HashCount_Y;    f67();}var vers_degre = 180.0 / Math.PI;function f215(xa, za, xb, zb) {    return 270.0 - Math.atan2(za - zb, xa - xb) * vers_degre;}var DebugGap;function f232(PosX, PosY, PosXB, PosYB) {    var s298v = Math.sqrt((PosX - PosXB) * (PosX - PosXB) + (PosY - PosYB) * (PosY - PosYB));    var WallAngle = -f215(PosX, PosY, PosXB, PosYB);    f212();    f122(PosX, PosY, 0);    f178(WallAngle, 0, 0, 1);    f158(-DebugGap, -DebugGap, DebugGap, s298v + DebugGap);    f226();}var s306vColl = 0;function f130() {    DebugGap = 2;    f212();    f122(0, 5, 0);    f178(90, 1, 0, 0);    gl.enable(gl.BLEND);    gl.depthMask(false);    f141(0);    for (var x = 0; x < s283v.HashCount_X; x++) {        var PosX = s283v.HashPos_Left + x * s283v.HashSize_X;        for (var y = 0; y < s283v.HashCount_Y; y++) {            f126(0.0, 0.0, 0.0, 0.95);            var PosY = s283v.HashPos_Top + y * s283v.s297v;            for (var i = 0; i < s283v.HashDetectedCount; i++) {}            f158(PosX + DebugGap, PosY + DebugGap, PosX + s283v.HashSize_X - DebugGap, PosY + s283v.s297v - DebugGap);        }    }    for (var i = 0; i < s283v.s287vCount; i++) {        if (s283v.s287v[i].s291v == true) f126(1.0, 1.0, 1.0, 0.9);        else f126(1.0, 1.0, 0.0, 0.5);        f232(s283v.s287v[i].ax, s283v.s287v[i].ay, s283v.s287v[i].bx, s283v.s287v[i].by);    }    f126(0.0, 1.0, 1.0, 0.5);    for (var i = 0; i < 1; i++) {        f232(_Start[i].ax, _Start[i].ay, _Start[i].bx, _Start[i].by);    }    f126(1.0, 0.0, 1.0, 0.5);    for (var i = 0; i < s92v.length; i++) {        f232(s92v[i].ax, s92v[i].ay, s92v[i].bx, s92v[i].by);    }    f126(1.0, 0.0, 1.0, 0.5);    for (var i = 0; i < Wall_3D.length; i++) {        f232(Wall_3D[i].ax, Wall_3D[i].ay, Wall_3D[i].bx, Wall_3D[i].by);    }    for (var i = 0; i < s283v.HashDetectedCount; i++) {        var s296v = s283v.HashDetected[i];        if (s296v > -1 && s296v < 10000) {            var SegCount = s283v.HashStaticsList[s296v].length;            for (var j = 0; j < SegCount; j++) {                var SegID = s283v.HashStaticsList[s296v][j];            }        }    }    DebugGap = 3;    f126(0.0, 1.0, 0.0, 1.0);    for (var i = 0; i < _f232s.length; i++) {        f232(_f232s[i].ax, _f232s[i].ay, _f232s[i].bx, _f232s[i].by);    }    _f232s = [];    f126(1.0, 0.0, 0.0, 1.0);    for (var i = 0; i < 100; i++)        f158(s155vX[i] - 10, s155vY[i] - 10, s155vX[i] + 10, s155vY[i] + 10);    gl.disable(gl.BLEND);    gl.depthMask(true);    f226();}var Integration_Type = null;var Integration_SoundChanged = false;var Integration_IsMute = false;var Trigger_DisableNetwork = false;var Trigger_DisableFireBAse = false;var Trigger_DisablePreferencesButton = false;var Trigger_DisablePreferences = false;var Trigger_Difficulty = 3;var Trigger_IsLevelBased = false;var Trigger_ShowClock = true;var H5_H5app_IsH5 = false;var H5_H5app_Start___Game = false;var H5_H5app_Should___Quit = false;var H5_H5app_Should___Restart = false;var H5_H5app_Race___Pose = 0;var H5_H5app_Is___Paused = false;var H5_H5app_Should___Mute = false;var H5_H5app_Is___Mute = false;var H5_H5app_Change_Sound = false;var H5_H5app_Should___GotoIDLE = false;var H5_H5app_Score = -1;var f216_isInit = false;function f216() {    if (f216_isInit == true) return;    f216_isInit = true;    window.famobi.log(_TX(161));    window.famobi.log(_TX(162) + Integration_Type);    switch (Integration_Type) {        case _TX(163):            s318v = -1000;            Trigger_DisablePreferences = true;            break;        case _TX(164):            break;        default:            break;    }};function f233(Info) {    window.famobi.log(_TX(165) + Info);}var famo_previous_score = -1;function f148() {    if (Integration_Type != _TX(164)) return false;    if (famo_previous_score != Score) {        famo_previous_score = Score;        try {            window.famobi_analytics.trackEvent(_TX(166), {                liveScore: Score * 1            });        } catch (error) {}    }};function f69() {    if (Integration_Type != _TX(164)) return;    try {        window.famobi_onPauseRequested = function() {            GameIsPaused = true;            f135();            f92(0.0);            v80.click = 0;            v80.s378v = 0;            f233(_TX(167));        };        window.famobi.onOffsetChange = function() {            f188();            se_canvas.focus();        };        window.famobi_onResumeRequested = function() {            GameIsPaused = false;            f95();            f92(0.8);            v80.click = 0;            v80.s378v = 0;            f233(_TX(168));            se_canvas.focus();        };        window.famobi.onRequest("disableAudio", function() {            PREF_Music = 0;            PREF_Sounds = 0;            Integration_SoundChanged = true;            Integration_IsMute = true;        });        window.famobi.onRequest("enableAudio", function() {            PREF_Music = 1;            PREF_Sounds = 1;            Integration_SoundChanged = true;            Integration_IsMute = false;        });        window.famobi_tracking.init(_TX(171), null, 1, true);    } catch (error) {        f233(_TX(172));    }};function f52() {    if (Integration_Type != _TX(164)) return false;    try {        return window.famobi.hasFeature(_TX(173));    } catch (error) {}    return false;};function f104() {    if (Integration_Type != _TX(164)) return;    try {        return f37(window.famobi.getBrandingButtonImage(false));    } catch (error) {        return f37(_TX(174));    }};function f8() {    if (Integration_Type != _TX(164)) return;    try {        window.famobi_analytics.trackEvent(_TX(175), {            levelName: ""        });    } catch (error) {}    famo_previous_score = -1;};function f2() { // EVENT_LEVELRESTART	return;    if (Integration_Type != _TX(164)) return;    try {        window.famobi_analytics.trackEvent(_TX(176), {            levelName: ""        });    } catch (error) {}    f189();}var Famo_LevelENDIsResolved = true;function f29() {    if (Integration_Type != _TX(164)) return true;    return Famo_LevelENDIsResolved;}var Prev_TopAds = 0;var Prev_BottomAds = 0;var Prev_LeftAds = 0;var Prev_RightAds = 0;function f70() {    var TopAds = window.famobi.getOffsets().top;    var BottomAds = window.famobi.getOffsets().bottom;    var LeftAds = window.famobi.getOffsets().left;    var RightAds = window.famobi.getOffsets().right;    Prev_TopAds = TopAds;    Prev_BottomAds = BottomAds;    Prev_LeftAds = LeftAds;    Prev_RightAds = RightAds;    v36 = TopAds;    v14 = BottomAds;    v27 = LeftAds;    v20 = RightAds;    window.famobi.log(_TX(177), TopAds, BottomAds, LeftAds, RightAds);};function f188() {    if (Integration_Type != _TX(164)) return;    var TopAds = window.famobi.getOffsets().top;    var BottomAds = window.famobi.getOffsets().bottom;    var LeftAds = window.famobi.getOffsets().left;    var RightAds = window.famobi.getOffsets().right;    if (Prev_TopAds != TopAds || Prev_BottomAds != BottomAds || Prev_LeftAds != LeftAds || Prev_RightAds != RightAds) {        f70();        f99();        window.setTimeout(function() {            f70();            f99();        }, 800);    }};function f20() { // LEVELEND	return;    if (Integration_Type != _TX(164)) return;    try {        Famo_LevelENDIsResolved = false;        window.famobi_analytics.trackEvent(_TX(166), {            liveScore: Score * 1        });        window.famobi_analytics.trackEvent(_TX(178), {                eventName: _TX(179),                result: _TX(180),                score: Score * 1            })            .then(function() {                Famo_LevelENDIsResolved = true;                se_canvas.focus();            });    } catch (error) {}    f189();}var Famo_LevelFailIsResolved = true;let Famo_ButtonNextIsResolved = false;let Famo_ButtonBackIsResolved = false;function f21() {    if (Integration_Type != _TX(164)) return true;    return Famo_LevelFailIsResolved;};function f12(LevelID) { // EVENT_LEVELFAIL / EVENT_TOTALSCORE    if (Integration_Type != _TX(164)) return;    try {        Famo_LevelFailIsResolved = false;        Promise.all([        	window.famobi_analytics.trackEvent(_TX(181), {        	    levelName: _TX(188) + LevelID,        	    reason: _TX(182)        	}),        	window.famobi_analytics.trackEvent(_TX(183), {        	    totalScore: Score * 1        	})        ]).then(function() {            Famo_LevelFailIsResolved = true;            se_canvas.focus();        });    } catch (error) {}    // f189();};function f149() {    if (Integration_Type != _TX(164)) return;    try {        f233(_TX(184));        window.famobi.gameReady();    } catch (error) {}}var Famo_Pourcent = -1;function f43(Pourcent) {    if (Integration_Type != _TX(164)) return;    Pourcent = Math.floor(Pourcent);    if (Pourcent < 0) Pourcent = 0;    if (Pourcent > 100) Pourcent = 100;    if (Pourcent <= Famo_Pourcent) return;    Famo_Pourcent = Pourcent;    window.famobi.log(_TX(185), Famo_Pourcent);    window.famobi.setPreloadProgress(Famo_Pourcent);};function f105(LevelID) {    if (Integration_Type != _TX(164)) return;    try {        window.famobi.log(_TX(186) + LevelID);        Promise.all([        	window.famobi_analytics.trackEvent("EVENT_LEVELSUCCESS", {        	    levelName: _TX(188) + LevelID        	}),        	window.famobi_analytics.trackEvent("EVENT_TOTALSCORE", {        	    totalScore: Score * 1        	})        ])    } catch (error) {}};function f106() {    if (Integration_Type != _TX(164)) return;    try {        f233(_TX(189));        window.famobi.playerReady();    } catch (error) {}};function f53() {    if (Integration_Type != _TX(164)) return;    try {        window.famobi.trackEvent(_TX(190), {            bgmVolume: PREF_Music,            sfxVolume: PREF_Sounds        });    } catch (error) {}};function f90() {    if (Integration_Type != _TX(164)) return false;    if (window.famobi.hasFeature(_TX(191)) != true) return false;    if (window.famobi.hasRewardedAd() != true) return false;    return true;}var Famo_RewardAds_Granted = false;var Famo_RewardAds_Skipped = false;function f71() {    if (Integration_Type != _TX(164)) return;    window.famobi.rewardedAd(function(result) {        window.famobi.log(_TX(192), result);        if (result.rewardGranted) {            Famo_RewardAds_Granted = true;            Famo_RewardAds_Skipped = false;        } else {            Famo_RewardAds_Granted = false;            Famo_RewardAds_Skipped = true;        }        se_canvas.focus();    });}var Famo_AdsWatched = true;function f189(type) {	if(!["button:result:next", "button:result:back"].includes(type)) {		return;	}    if (Integration_Type != _TX(164)) return;    Famo_AdsWatched = false;    window.famobi.showInterstitialAd({        eventId: type,        callback: () => {            Famo_AdsWatched = true;            switch(type) {            	case "button:result:next":            		Famo_ButtonNextIsResolved = true;            		break;            	case "button:result:back":            		Famo_ButtonBackIsResolved = true;            		break;            	default:            		//            }        }    });}var s48v = 0;var Car_RotationCount = 0;var Pts_RotationCount = 0;var NoAirControl = 0;function f217() {    if (s43v.s108v > 150 || s44v.s108v > 150) {        s48v = 0;        Car_RotationCount = 0;    }    if (s43v.s108v < 20 && s44v.s108v < 20)        switch (s48v) {            case 0:                if (s44v.position[1] > s43v.position[1] + Car_Size * 0.7) {                    s48v = 1;                    f156(_TX(194), 0.25, 0.8 + Car_RotationCount * 0.4, false);                }                break;            case 1:                if (s44v.position[0] < s43v.position[0] - Car_Size * 0.7) {                    s48v = 2;                    f156(_TX(194), 0.25, 0.95 + Car_RotationCount * 0.4, false);                }                break;            case 2:                if (s44v.position[1] < s43v.position[1] - Car_Size * 0.7) {                    s48v = 3;                    f156(_TX(194), 0.25, 1.1 + Car_RotationCount * 0.4, false);                }                break;            case 3:                if (s44v.position[1] < s43v.position[1] - Car_Size * 0.7) {                    s48v = 0;                    Car_RotationCount++;                    Pts_RotationCount++;                    f9([CarCenter.x, CarCenter.y + 10, 0]);                    f10([s43v.velocity[0] * 0.008, s43v.velocity[1] * 0.001, 0]);                    f41(28 + Car_RotationCount * 3);                    f7(-0.0125);                    f11(0);                    f1(0.1);                    f16(0.0);                    f17(0);                    f10([s43v.velocity[0] * 0.008, s43v.velocity[1] * 0.001, 0]);                    f11(180);                    f17(0);                    f156(_TX(195), 0.6, 0.55 + Car_RotationCount * 0.2, false);                    f102();                }                break;        }};function f203(ParticleID) {    PointsToAdd = 0;    PointsToAddTimer = 0;    se_savePref(_TX(196), RubyCount);    if (MenuType != -1) return;    window.famobi.log(_TX(197));    CarIsDestroyed = true;    f156(_TX(198), 0.8, 1.0, false);    f156(_TX(198), 0.4, 0.3, false);    world.removeConstraint(revoluteBack);    world.removeConstraint(revoluteFront);    Game_Mode = 0;    Pts_RotationCount = 0;    if (s15v > 3) s15v = 3;    NoAirControl = 0;    s43v.velocity[0] = -10.0;    s43v.velocity[1] = 20.0;    s44v.velocity[0] = 10.0;    s44v.velocity[1] = 19.0;    revoluteBack = null;    revoluteFront = null;    DestroyedCounter = 0;    Trail = [];    for (var i = 1; i < 50; i++) {        f9([s43v.position[0], s43v.position[1] + i - 2 - 50, 0]);        f10([(-10 + Math.random() * 20) * 0.0005 * i, (-10 + Math.random() * 20) * 0.0005 * i, 0]);        f41((5 + Math.random() * 5) * 3.0) * i;        f7(-0.01);        f11(Math.random() * 360);        f1((-25.5 + i) * 0.000125);        f16(0.00005);        if (ParticleID > 0) f17(ParticleID);        else {            if (Math.random() > 0.499) f17(6);            else f17(7);        }        f102()    }}var Trail = [];var Trail_Slide = 0;function f190() {    if (Trail.length == 0) {        Trail.push({            node: [],            prevPos: [0, 0],            slide: 0,            XYZS: [],            RT: []        });        Trail.push({            node: [],            prevPos: [0, 0],            slide: 0,            XYZS: [],            RT: []        });    }    for (var ID = 0; ID < 2; ID++) {        if (ID == 0) var GoalPos = s43v.position;        else var GoalPos = s44v.position;        Trail[ID].XYZS = [];        Trail[ID].RT = [];        if (Trail[ID].node.length > 0) {            Trail[ID].slide += v95 * 0.0004;            if (Trail[ID].slide > 1.0) Trail[ID].slide -= 1.0;            for (var i = 0; i < 31; i++) {                if (i < Trail[ID].node.length) {                    Trail[ID].XYZS.push(Trail[ID].node[i].pos.x);                    Trail[ID].XYZS.push(Trail[ID].node[i].pos.y);                    Trail[ID].XYZS.push(0.0);                    Trail[ID].XYZS.push(Trail[ID].node[i].size);                    if (i == Trail[ID].node.length - 1)                        var Normal = f193(Trail[ID].node[i].pos.x - GoalPos[0], Trail[ID].node[i].pos.y - GoalPos[1]);                    else var Normal = f193(Trail[ID].node[i].pos.x - Trail[ID].node[i + 1].pos.x, Trail[ID].node[i].pos.y - Trail[ID].node[i + 1].pos.y);                    Trail[ID].RT.push(Normal[1]);                    Trail[ID].RT.push(-Normal[0]);                } else {                    Trail[ID].XYZS.push(GoalPos[0]);                    Trail[ID].XYZS.push(GoalPos[1]);                    Trail[ID].XYZS.push(0.0);                    Trail[ID].XYZS.push(90);                    var Normal = f193(Trail[ID].node[Trail[ID].node.length - 1].pos.x - GoalPos[0], Trail[ID].node[Trail[ID].node.length - 1].pos.y - GoalPos[1]);                    Trail[ID].RT.push(Normal[1]);                    Trail[ID].RT.push(-Normal[0]);                }            }        }        for (var i = 0; i < Trail[ID].node.length; i++) {            Trail[ID].node[i].size -= v95 * 0.1;            if (Game_Mode > 0) Trail[ID].node[i].size -= v95 * 0.8;        }        if (Trail[ID].node.length > 0 && Trail[ID].node[0].size < 0.1) {            Trail[ID].node.shift();            Trail[ID].slide += 1 / 30;        }    }    if (Trail[0].node.length < 30)        if (f238(                Trail[0].prevPos[0], Trail[0].prevPos[1], s43v.position[0], s43v.position[1]) > 8) {            Trail[0].prevPos = [s43v.position[0], s43v.position[1]];            Trail[0].node.push({                pos: {                    x: s43v.position[0],                    y: s43v.position[1]                },                size: 100            })        }    if (Trail[1].node.length < 30)        if (f238(                Trail[1].prevPos[0], Trail[1].prevPos[1], s44v.position[0], s44v.position[1]) > 8) {            Trail[1].prevPos = [s44v.position[0], s44v.position[1]];            Trail[1].node.push({                pos: {                    x: s44v.position[0],                    y: s44v.position[1]                },                size: 100            })        }};function f218() {    for (var ID = 0; ID < 2; ID++) {        if (Trail[ID].node.length > 0 && Trail[ID].XYZS.length > 0 && Trail[ID].RT.length > 0) {            f212();            f141(7);            f126(1, 1, 1, Trail[ID].slide);            f39();            gl.uniform4fv(shader[7].s241v, Trail[ID].XYZS);            gl.uniform2fv(shader[7].s243vRT, Trail[ID].RT);            f186(4)            f226();            f141(1);        }    }};function f241(Lumi) {    if (Pts_RotationCount > 0) {        f141(1);        f126(1, 1, 1, 0.4 + Pts_RotationCount * 0.1);        gl.enable(gl.BLEND);        var scale = 0.3 + Pts_RotationCount * 0.1;        var ScoreText = "" + Pts_RotationCount;        f212();        f122(CarCenter.x, CarCenter.y + 53, 0);        f196(scale, -scale, 1.0);        f122(-31 * (ScoreText.length - 1.0), 0, 0);        for (var j = 0; j < ScoreText.length; j++) {            f161(1, ScoreText[j]);            if (j < ScoreText.length - 1) {                f122(31, 0, 0);                f161(1, '_');                f122(31, 0, 0);            }        }        f226();    }    f141(1);    f126(1, 1, 1, 1);    gl.enable(gl.BLEND);    if (Car_Invincible > 0) f126(10, 0, 0, 1);    CarAngle = f174([CarCenter.x, CarCenter.y], [s44v.position[0], s44v.position[1]]) / Math.PI * 180;    f212();    if (CarIsDestroyed == true) {        f122(s43v.position[0], s43v.position[1], 0);    } else {        f122(CarCenter.x, CarCenter.y, 0);        f178(CarAngle, 0, 0, 1);        f122(-Car_Size, 0, 0);    }    f178(s43v.angle / Math.PI * 180, 0, 0, 1)    f186(800);    f226();    f212();    if (CarIsDestroyed == true || true) {        f122(s44v.position[0], s44v.position[1], 0);    } else {        f122(CarCenter.x, CarCenter.y, 0);        f178(CarAngle, 0, 0, 1);        f122(Car_Size, 0, 0);    }    f178(s44v.angle / Math.PI * 180, 0, 0, 1)    f186(800);    f226();    f126(Lumi, Lumi, Lumi, 1);    if (CarIsDestroyed == false) {        f212();        f122(CarCenter.x, CarCenter.y, 0);        f178(CarAngle, 0, 0, 1);        f122(0, 5, 0);        if (CarBody.s108v > 0 && Math.random() > 0.4999) {            f126(10, 0, 0, 10);            f196(1.01, 1.01, 1);        }        f186(700);        f226();    }    if (Game_Mode > 0) {        if (s318v == 21) {            f126(1, 1, 1, 0.5);            for (var i = 0; i < 1 + Math.random() * 5.0; i++) {                f212();                f122(CarCenter.x, CarCenter.y, 0);                var Xscale = (-2.0 + Math.random() * 4.0) * (0.125 + BlastModes469v * 0.003);                var Yscale = (0.1 + Math.random() * 2.0) * (0.125 + BlastModes469v * 0.003);                f178(Math.random() * 360, 0, 0, 1)                f196(Xscale, Yscale, 1);                f120(35);                f226();            }        }        f126(1, 1, 1, 1);        if (s318v == 22) {            f212();            f122(CarCenter.x - 210, CarCenter.y + 5, 0);            var Xscale = 3.0 + Math.random() * 0.4;            var Yscale = -0.5 + Math.random() * 1.0;            f196(Xscale, Yscale, 1);            f120(33);            f226();            f212();            f122(CarCenter.x - 77, CarCenter.y + 5, 0);            var Xscale = 0.6 + Math.random() * 0.4;            var Yscale = -2.0 + Math.random() * 4.0;            f196(Xscale, Yscale, 1);            f120(33);            f226();        }        f212();        f122(CarCenter.x - 25 + Math.random() * 2, CarCenter.y + 5 + Math.random() * 2, 0);        f196(0.5, -0.5, 1);        f120(32);        f226();    }    if (PerfectLandingEffect > 0) {        if (PerfectLandingEffect == 100) {            window.famobi.log(_TX(199));            f73(0, s43v.position[0], s43v.position[1]);            f73(1, s44v.position[0], s44v.position[1]);            f156(_TX(194), 0.5, 0.8, false);            f156(_TX(11), 0.65, 3.0, false);            f156(_TX(11), 0.65, 0.25, false);        }        PerfectLandingEffect -= v95 * 0.1;        f72(0);        f72(1);    }};function f72(id) {    var Scale = PerfectLandingEffect * 0.01;    if (Scale > 0.2) Scale = 0.2;    f212();    f122(PrefLand[id].pos[0], PrefLand[id].pos[1], 0);    f196(Scale, Scale, 1);    f178(Math.random() * 360, 0, 0, 1)    f120(35);    f226();    f9([PrefLand[id].pos[0], PrefLand[id].pos[1], 0]);    f10([(-10 + Math.random() * 20) * 0.0015, (-10 + Math.random() * 20) * 0.0015, 0]);    f41((5 + Math.random() * 5) * 4.0);    f7(-0.08);    f11(Math.random() * 360);    f1((-25.5) * 0.000125);    f16(0.00005);    f17(10);    f102()    PrefLand[id].pos[0] += PrefLand[id].norm[0] * v95 * 0.08;    PrefLand[id].pos[1] += PrefLand[id].norm[1] * v95 * 0.08;};function f73(id, x, y) {    PrefLand[id].pos[0] = x;    PrefLand[id].pos[1] = y;    if (PrefLand[id].Dir == 0) {        PrefLand[id].norm[0] = CarNormal[0];        PrefLand[id].norm[1] = CarNormal[1];    } else {        PrefLand[id].norm[0] = -CarNormal[0];        PrefLand[id].norm[1] = -CarNormal[1];    }};function f131(Direction) {    this.Dir = Direction;    this.pos = [0, 0];    this.norm = [0, 0];}var PrefLand = [0, 0, 0];PrefLand[0] = new f131(0);PrefLand[1] = new f131(1);var Scroll_Zoom = 1.0;var Blur_Fade = 0.0;var s38v = -1;var Game_Mode = 0;var BlastMode_Ticks = 0;var BlastMode_Timer = 0;var Level_f238 = 1;var Level_Chunks = 0;var PointsToAdd = 0;var PointsToAddTimer = 0;var PointsToAddIcon = "+-";var s24v = [];function f172() {    if (s24v.length > 0) {        s42v = s24v[0];        window.famobi.log(_TX(200), s42v);        s24v.shift();        return;    }    if (Level_Based == true) {        if (CurrentLevelPos < Levels[CurrentLevel].length) {            s42v = Levels[CurrentLevel][CurrentLevelPos];            window.famobi.log(_TX(201), CurrentLevel, CurrentLevelPos);            CurrentLevelPos++;        } else {            s42v = 1000;        }        return;    }    if (Game_Mode == 2) {        s42v = 1100 + Math.floor(Math.random() * 10);        if (s42v > 1103) {            f172();            return;        }        if (s38v == s42v) {            f172();            return;        }        s38v = s42v;        return;    }    s42v = 1000 + Math.floor(Math.random() * 55);    if (s38v == s42v || s42v < 1001 || s42v > 1049) {        f172();        return;    }    s38v = s42v;    Level_Chunks++;    if (Level_Chunks > 2) {        Level_Chunks = 0;        s42v = 1098;        s38v = 1098;        return;    }    if (s42v == 1017 || s42v == 1008 || s42v == 1030) s24v.push(1000);};function f22() {    return;    s24v = [];    Chunk_List = [];    s37vToAdd = [];    s37v = [];    Object_ToAdd = 0;    Object_ToDistroy = 0;    Line_List = [];    Trail = [];    Polys = [];    Car_Invincible = 100;};function f204(IsRestart) {    CurrentLevelPos = 0;    Level_timer = 0;    Blur_Fade = 0;    Scroll_X = 0;    Scroll_MinX = 0;    Scroll_Y = 0;    s25v = 0;    physic, Vec2, world, ground;    s43v, s44v, CarBody;    springBack, springFront;    CarCenter = {        x: 0,        y: 500    };    CarAnge = 0;    CarIsDestroyed = false;    DestroyedCounter = 0;    Chunk_Decal = 0;    Chunk_List = [];    s37vToAdd = [];    s37v = [];    Object_ToAdd = 0;    Object_ToDistroy = 0;    Line_List = [];    Trail = [];    Polys = [];    Scroll_Zoom = 1.5;    Car_Invincible = 100;    Game_Mode = 0;    Chunk_New = true;    Car_RotForce = 0;    BikeIsInAire = -1000;    PointsToAdd = 0;    PointsToAddTimer = 0;    if (IsRestart != true) {        CurrentLevelPos = 0;        s15v = 0;        Score = 0;        Level_f238 = 1;        Level_Chunks = 0;    }    f172()    f234()    f75(100);};function f107(icon, points) {    if (points < 1) return;    if (PointsToAdd > 0) Score += PointsToAdd;    PointsToAdd = points;    PointsToAddTimer = 100;    PointsToAddIcon = icon;}var Object_ToAdd = 0;var Object_ToDistroy = 0;function f205(IsBlur) {    f126(1, 1, 1, 1);    for (var i = 0; i < s37v.length; i++) {        switch (s37v[i].name) {            case _TX(202):            case _TX(203):                f212();                f122(s37v[i].Body.position[0], s37v[i].Body.position[1], 0);                f178(s37v[i].Body.angle / Math.PI * 180, 0, 0, 1);                f186(7);                f226();                break;            case _TX(204):                f141(8);                f126(-s69v, 0, 0, 0);                if (Level_Based == true) {                    Level_f238 = CurrentLevel + 1;                    s37v[i].f238 = CurrentLevel + 1;                }                if (s37v[i].f238 < 10)                    var ScoreText = "0" + s37v[i].f238;                else var ScoreText = "" + s37v[i].f238;                if (s37v[i].Crossed == true) {                    f141(1);                    f126(0, 1, 0, 1);                    ScoreText = "+";                } else {                    if (CarCenter.x > s37v[i].x - 30) {                        f107("+-", 5 + Level_f238 * 5);                        Level_f238++;                        s37v[i].Crossed = true                        f156(_TX(205), 0.5, 2.0, false);                        f156(_TX(11), 0.25, 3.5, false);                        if (Level_Based == true) {                            f105(CurrentLevel + 1);                            s318v = 11;                        }                    }                }                f212();                f122(s37v[i].x, s37v[i].y, 0);                f186(9);                f226();                f141(1);                f126(1, 1, 1, 1);                var scale = 0.6;                f212();                f122(s37v[i].x, s37v[i].y - 13, 0);                f196(scale, -scale, 1.0);                f122(-31 * (ScoreText.length - 1.0), 0, 0);                for (var j = 0; j < ScoreText.length; j++) {                    f161(1, ScoreText[j]);                    if (j < ScoreText.length - 1) {                        f122(31, 0, 0);                        f161(1, '_');                        f122(31, 0, 0);                    }                }                f226();                break;            case _TX(206):                f212();                f122(                    s37v[i].x, s37v[i].y, 0);                f178(Math.sin(-s69v * 3 + s37v[i].x) * 10, 0, 0, 1);                f186(8);                f196(1.2, 1.2, 1.0);                f178(-Math.sin(-s69v * 2) * 10, 0, 0, 1);                f186(8);                f226();                break;            case _TX(207):                f212();                f122(                    s37v[i].x, s37v[i].y, 0);                f120(39);                f141(8);                f126(-s69v + s37v[i].x * 0.01, 0, 0, 0);                f122(0, -20, 0);                f178(-90, 0, 0, 1);                f196(0.7, 0.7, 1.0);                if (IsBlur != false) f120(40);                f226();                f126(1, 1, 1, 1);                f141(1);                break;            case _TX(208):                f212();                f122(                    s37v[i].x + Math.sin(-s69v) * 150, s37v[i].y + Math.cos(-s69v) * 150, 0);                f178(-s69v * 300, 0, 0, 1);                f120(37);                f226();                break;            case _TX(209):                f212();                f122(                    s37v[i].x, s37v[i].y, 0);                f178(-s69v * 300, 0, 0, 1);                f120(37);                f226();                break;            case _TX(210):                f212();                f122(s37v[i].x, s37v[i].y, 0);                f196(0.5, -0.5, 0.5);                f120(22);                f226();                break;            case _TX(211):                f212();                f122(s37v[i].x, s37v[i].y, 0);                f196(0.5, -0.5, 0.5);                f161(1, _TX(212));                f178(s69v * 200, 0, 0, 1);                f120(31);                f126(1, 0.5, 1, 1);                f196(-0.85, -0.85, 1.0);                f178(s69v * 100, 0, 0, 1);                f120(31);                f126(1, 0.25, 0, 1);                f196(-0.85, -0.85, 1.0);                f178(s69v * 50, 0, 0, 1);                f120(31);                f226();                f126(1, 1, 1, 1);                break;            case _TX(213):                f212();                f122(s37v[i].Body.position[0], s37v[i].Body.position[1], 0);                f178(s37v[i].Body.angle / Math.PI * 180, 0, 0, 1);                f120(36);                f226();                break;            case _TX(214):                f212();                f122(s37v[i].Body.position[0], s37v[i].Body.position[1], 0);                f178(s37v[i].Body.angle / Math.PI * 180, 0, 0, 1);                f120(23);                f226();                break;            case _TX(215):                f212();                f122(s37v[i].Body.position[0], s37v[i].Body.position[1], 0);                f178(s37v[i].Body.angle / Math.PI * 180, 0, 0, 1);                f120(29);                f226();                break;            case _TX(216):                f212();                f122(s37v[i].Body.position[0], s37v[i].Body.position[1], 0);                f178(s37v[i].Body.angle / Math.PI * 180, 0, 0, 1);                f120(38);                f226();                break;            case _TX(217):                f141(9);                f126(-s69v * 0.5, 0, 0, 0);                f212();                f122(s37v[i].x, s37v[i].y, 0);                f196(1 + Math.sin(s69v * 10.0) * 0.05, -1, 1);                f120(30);                f196(-1 + Math.sin(s69v * 15.0) * 0.15, 1, 1);                f120(30);                f196(1, -1, 1);                f122(0, -500, 0);                f120(30);                f226();                f126(1, 1, 1, 1);                f141(1);                break;            case _TX(218):                f141(9);                f126(s69v * 0.125, 0, 0, 0);                f212();                f122(s37v[i].x, s37v[i].y, 0);                f196(1, -1, 1);                f120(28);                f122(0, 230, 0);                f120(28);                f226();                f126(1, 1, 1, 1);                f141(1);                break;            case _TX(219):                f212();                f122(s37v[i].Body.position[0], s37v[i].Body.position[1], 0);                f178(s37v[i].Body.angle / Math.PI * 180, 0, 0, 1);                f120(27);                f226();                break;            case _TX(220):                f212();                f122(s37v[i].Body.position[0], s37v[i].Body.position[1], 0);                f178(s37v[i].Body.angle / Math.PI * 180, 0, 0, 1);                if (s37v[i].Delay < 150) f120(25);                else f120(26);                f226();                break;            case _TX(221):                if (IsBlur == false) {                    f141(8);                    f126(-s69v, 0, 0, 0);                    f212();                    f122(s37v[i].x, s37v[i].y, 0);                    f178(s37v[i].dir, 0, 0, 1);                    f196(0.5, 0.5, 0.5);                    f120(24);                    f226();                    f126(1, 1, 1, 1);                    f141(1);                }                break;            default:                break;        }    }    f141(1);    f126(1, 1, 1, 1);}var RubyPitch = 0;var PlatPitch = 0;function f173() {    if (RubyPitch > 0) RubyPitch -= v95 * 0.0005;    else RubyPitch = 0;    if (PlatPitch > 0) PlatPitch -= v95 * 0.0005;    else PlatPitch = 0;    var IdToemove = -1;    for (var i = 0; i < s37v.length; i++) {        switch (s37v[i].name) {            case _TX(209):                if (CarIsDestroyed == false) {                    if (f238(                            s37v[i].x, s37v[i].y,                            CarCenter.x, CarCenter.y) < 80) {                        f203(5);                    }                }                break;            case _TX(208):                if (CarIsDestroyed == false) {                    if (f238(                            s37v[i].x + Math.sin(-s69v) * 150, s37v[i].y + Math.cos(-s69v) * 150,                            CarCenter.x, CarCenter.y) < 80) {                        f203(5);                    }                }                break;            case _TX(207):                if (CarCenter.y < s37v[i].y + 256 && CarCenter.x > s37v[i].x - 30 && CarCenter.x < s37v[i].x + 30) {                    if (s43v.velocity[0] > 10) s43v.velocity[0] = 10;                    if (s44v.velocity[0] > 15) s44v.velocity[0] = 15;                }                break;            case _TX(217):                if (CarIsDestroyed == false) {                    if (CarCenter.y < s37v[i].y + 256 && CarCenter.x > s37v[i].x - 30 && CarCenter.x < s37v[i].x + 30) {                        f203(5);                    }                }                s37v[i].y = s37v[i].def_y - 150 + Math.cos(s37v[i].x * 0.1 + s69v) * 250;                if (s37v[i].x < Scroll_X + 800 && s37v[i].x > Scroll_X - 150) {                    f9([                        s37v[i].x - 35 + Math.random() * 70, s37v[i].y + 200 + Math.random() * 35, 0                    ]);                    f10([(-5 + Math.random() * 10) * 0.01, 0.0, 0]);                    f41((5 + Math.random() * 5) * 3.0);                    f7(-0.03);                    f11(Math.random() * 360);                    f1(0.00125);                    f16(0.0003);                    f17(5);                    f102()                }                break;            case _TX(218):                if (CarIsDestroyed == false) {                    if (CarCenter.y < s37v[i].y + 110 && CarCenter.x > s37v[i].x - 240 && CarCenter.x < s37v[i].x + 240) {                        f203(5);                    }                }                if (s37v[i].x < Scroll_X + 800 && s37v[i].x > Scroll_X - 150) {                    f9([                        s37v[i].x - 200 + Math.random() * 400, s37v[i].y + 120, 0                    ]);                    f10([0, 0.1, 0]);                    f41((5 + Math.random() * 5) * 3.0) * i;                    f7(-0.03);                    f11(Math.random() * 360);                    f1(0.00125);                    f16(0.0003);                    f17(5);                    f102()                }                break;            case _TX(221):                s37v[i].rot -= v95 * 0.001;                if (s37v[i].rot < 0.0) s37v[i].rot += 1.0;                if (CarCenter.x > s37v[i].x - 25 &&                    CarCenter.y > s37v[i].y - 25 && CarCenter.x < s37v[i].x + 25 &&                    CarCenter.y < s37v[i].y + 25) {                    if (f238(s37v[i].x, s37v[i].y, s43v.position[0], s43v.position[1]) < 25) {                        var Vel = f238(0, 0, s43v.velocity[0], s43v.velocity[1]);                        if (Vel < 40) {                            s43v.velocity[0] += s37v[i].normal[0] * v95 * 0.09;                            s43v.velocity[1] += s37v[i].normal[1] * v95 * 0.09;                            s43v.angularVelocity = -45;                            s43v.angularVelocity = -45;                        }                        Car_Invincible = 500;                    }                    if (f238(s37v[i].x, s37v[i].y, s44v.position[0], s44v.position[1]) < 25) {                        var Vel = f238(0, 0, s44v.velocity[0], s44v.velocity[1]);                        if (Vel < 40) {                            s44v.velocity[0] += s37v[i].normal[0] * v95 * 0.09;                            s44v.velocity[1] += s37v[i].normal[1] * v95 * 0.09;                            s43v.angularVelocity = -45;                            s44v.angularVelocity = -45;                        }                        Car_Invincible = 500;                    }                }                break;            case _TX(222):                if (s318v == 21 && CarCenter.x > s37v[i].x) {                    f156(_TX(205), 0.5, 2.0, false);                    f156(_TX(205), 0.25, 0.5, false);                    f155(_TX(223), 0.8, 1.125, false);                    s318v = 22;                    BlastMode_Ticks = 0;                    BlastMode_Timer = 99;                }                break;            case _TX(211):                if (Level_Based == true) s37v[i].name = "";                if (s15v > 4) s37v[i].name = "";                if (CarCenter.x > s37v[i].x - 80 &&                    CarCenter.y > s37v[i].y - 70 && CarCenter.x < s37v[i].x + 80 &&                    CarCenter.y < s37v[i].y + 70 && (f238(s37v[i].x, s37v[i].y, s43v.position[0], s43v.position[1]) < 50 ||                        f238(s37v[i].x, s37v[i].y, s44v.position[0], s44v.position[1]) < 50)                ) {                    for (var j = 1; j < 10; j++) {                        f9([s37v[i].x, s37v[i].y, 0]);                        f10([(-10 + Math.random() * 20) * 0.0015 * j, (-10 + Math.random() * 20) * 0.0015 * j, 0]);                        f41((5 + Math.random() * 5) * 3.0) * j;                        f7(-0.01);                        f11(Math.random() * 360);                        f1((-65.5 + j * 5) * 0.000125);                        f16(0.00005);                        f17(9);                        f102()                    }                    f156(_TX(205), 1.0, 1.0, false);                    f156(_TX(205), 0.25, 0.5, false);                    s15v++;                    if (s15v > 4) s15v = 4;                    Blast_Blink = 100;                    s37v[i].x -= 1000;                }                break;            case _TX(210):                if (CarCenter.x > s37v[i].x - 70 &&                    CarCenter.y > s37v[i].y - 60 && CarCenter.x < s37v[i].x + 70 &&                    CarCenter.y < s37v[i].y + 60 && (f238(s37v[i].x, s37v[i].y, s43v.position[0], s43v.position[1]) < 30 ||                        f238(s37v[i].x, s37v[i].y, s44v.position[0], s44v.position[1]) < 30)                ) {                    for (var j = 1; j < 5; j++) {                        f9([s37v[i].x, s37v[i].y, 0]);                        f10([(-10 + Math.random() * 20) * 0.0015 * j, (-10 + Math.random() * 20) * 0.0015 * j, 0]);                        f41((5 + Math.random() * 5) * 3.0) * j;                        f7(-0.01);                        f11(Math.random() * 360);                        f1((-25.5 + j) * 0.000125);                        f16(0.00005);                        if (Math.random() > 0.499) f17(3);                        else f17(0);                        f102()                    }                    f156(_TX(11), 1.0, 1.0 + RubyPitch, false);                    RubyPitch += 0.1;                    if (RubyPitch > 2.0) RubyPitch = 2.0;                    Score++;                    RubyCount++;                    s5v = 100;                    s9v = 100;                    f9([s37v[i].x, s37v[i].y + 30, 0]);                    f10([0, 0.05, 0]);                    f41(20);                    f7(-0.0125);                    f11(0);                    f1(0);                    f16(0.0);                    f17(2);                    f102();                    s37v[i].x -= 1000;                }                break;            case _TX(213):                s37v[i].BodyB.position[0] = s37v[i].x;                s37v[i].BodyB.position[1] = s37v[i].y - 76;                break;            case _TX(214):                s37v[i].Body.angularVelocity = 0.04;                s37v[i].Body.position[0] = s37v[i].x;                s37v[i].Body.position[1] = s37v[i].y;                break;            case _TX(202):                s37v[i].Body.angularVelocity = -0.2;                s37v[i].Body.position[0] = s37v[i].x;                s37v[i].Body.position[1] = s37v[i].y;                break;            case _TX(203):                s37v[i].Body.angularVelocity = 0.2;                s37v[i].Body.position[0] = s37v[i].x;                s37v[i].Body.position[1] = s37v[i].y;                break;            case _TX(216):                s37v[i].Body.angularVelocity *= 0.1;                s37v[i].Body.position[0] = s37v[i].x;                s37v[i].Body.velocity[0] *= 0.5;                var UpDo = Math.cos(s69v + s37v[i].x * 0.0015);                if (UpDo > 0) {                    var GoalY = s37v[i].Body.position[1] * 0.9 + s37v[i].y * 0.1;                    var Force = (s37v[i].Body.position[1] - GoalY) * 1.0;                    s37v[i].Body.position[1] = GoalY;                    s37v[i].Body.velocity[1] = -Force;                } else {                    var GoalY = s37v[i].Body.position[1] * 0.95 + (s37v[i].y + 70) * 0.05;                    var Force = (s37v[i].Body.position[1] - GoalY) * 1.0;                    s37v[i].Body.position[1] = GoalY;                    s37v[i].Body.velocity[1] = -Force;                }                break;            case _TX(215):                s37v[i].Delay += v95;                s37v[i].Body.angularVelocity *= 0.1;                s37v[i].Body.position[0] = s37v[i].x;                s37v[i].Body.velocity[0] *= 0.5;                var GoalY = s37v[i].y + Math.cos(s69v + s37v[i].x * 0.0015) * 55.0;                var Force = (s37v[i].Body.position[1] - GoalY) * 0.2;                if (GoalY - s37v[i].Body.position[1] > 20) s37v[i].Body.position[1] = s37v[i].Body.position[1] * 0.9 + GoalY * 0.1;                s37v[i].Body.velocity[1] = -Force;                if (s37v[i].Delay > 200) {                    s37v[i].Delay -= 200;                    f9([s37v[i].x - 70 + Math.random() * 140, s37v[i].Body.position[1] - 60, 0]);                    f10([0, -0.06, 0]);                    f41(20);                    f7(-0.0125);                    f11(Math.random() * 360);                    f1(0);                    f16(0.0);                    f17(5);                    f102();                }                break;            case _TX(219):                s37v[i].Body.angularVelocity = 0.02;                s37v[i].Body.position[0] = s37v[i].x;                s37v[i].Body.position[1] = s37v[i].y;                break;            case _TX(220):                if (s37v[i].Body.Collided == false) {                    s37v[i].Body.position[0] = s37v[i].x;                    s37v[i].Body.position[1] = s37v[i].y;                } else {                    if (s37v[i].PlayHit != true) {                        f156(_TX(224), 0.55, 0.7 + PlatPitch, false);                        PlatPitch += 0.15;                        if (PlatPitch > 2.0) PlatPitch = 2.0;                        s37v[i].PlayHit = true;                    }                    if (s37v[i].Body.gravityScale == 0 && s37v[i].Delay > 300) {                        s37v[i].Body.angularDamping = 0.0008;                        s37v[i].Body.damping = 0.02;                        s37v[i].Body.gravityScale = 1.0;                        s37v[i].wakeUp = true;                        s37v[i].Body.angularVelocity = 0.05;                        f9([s37v[i].x, s37v[i].y - 30, 0]);                        f10([0, 0.05, 0]);                        f41(20);                        f7(-0.0125);                        f11(0);                        f1(0);                        f16(0.0);                        f17(1);                        f102();                        Score += 2;                    } else s37v[i].Delay += v95;                }                break;        }    }};function f91(ID) {    s37v[ID].Body = null;    s37v[ID].rot = 0;    switch (s37v[ID].name) {        case _TX(204):            s37v[ID].Crossed = false;            s37v[ID].f238 = Level_f238;            break;        case _TX(213):            window.famobi.log(_TX(225), ID)            s37v[ID].ShapeB = new p2.Circle({                radius: 1            });            s37v[ID].ShapeB.material = GroundMaterial;            s37v[ID].BodyB = new p2.Body({                damping: 0.0,                mass: 0.0,                position: [s37v[ID].x, s37v[ID].y - 76]            });            s37v[ID].BodyB.gravityScale = 0;            s37v[ID].BodyB.angularDamping = 0;            s37v[ID].BodyB.addShape(s37v[ID].ShapeB);            world.addBody(s37v[ID].BodyB);            s37v[ID].BodyB.ColliGroup = 1;            s37v[ID].Shape = new p2.Box({                width: 15,                height: 150            });            s37v[ID].Shape.material = GroundMaterial;            s37v[ID].Body = new p2.Body({                damping: 0.0,                mass: 1.0,                position: [s37v[ID].x, s37v[ID].y]            });            s37v[ID].Body.gravityScale = 0.6;            s37v[ID].Body.angularDamping = 0.15;            s37v[ID].Body.addShape(s37v[ID].Shape);            s37v[ID].Body.angle = 0;            world.addBody(s37v[ID].Body);            s37v[ID].Body.ColliGroup = 1;            s37v[ID].Constraint = new p2.RevoluteConstraint(s37v[ID].Body, s37v[ID].BodyB, {                localPivotA: [0, -76],                localPivotB: [0, 0],                collideConnected: false            });            world.addConstraint(s37v[ID].Constraint);            break;        case _TX(202):            window.famobi.log(_TX(226), ID)            s37v[ID].Shape = new p2.Circle({                radius: 149            });            s37v[ID].Shape.material = GroundMaterial;            s37v[ID].Body = new p2.Body({                damping: 1.0,                mass: 0.0,                position: [s37v[ID].x, s37v[ID].y]            });            s37v[ID].Body.gravityScale = 0;            s37v[ID].Body.angularDamping = 0;            s37v[ID].Body.addShape(s37v[ID].Shape);            s37v[ID].Body.angle = 0;            world.addBody(s37v[ID].Body);            s37v[ID].Body.ColliGroup = 1;            break;        case _TX(203):            window.famobi.log(_TX(226), ID)            s37v[ID].Shape = new p2.Circle({                radius: 149            });            s37v[ID].Shape.material = GroundMaterial;            s37v[ID].Body = new p2.Body({                damping: 1.0,                mass: 0.0,                position: [s37v[ID].x, s37v[ID].y]            });            s37v[ID].Body.gravityScale = 0;            s37v[ID].Body.angularDamping = 0;            s37v[ID].Body.addShape(s37v[ID].Shape);            s37v[ID].Body.angle = 0;            world.addBody(s37v[ID].Body);            s37v[ID].Body.ColliGroup = 1;            break;        case _TX(215):            window.famobi.log(_TX(227), ID)            s37v[ID].Shape = new p2.Box({                width: 150,                height: 150            });            s37v[ID].Shape.material = GroundMaterial;            s37v[ID].Body = new p2.Body({                damping: 0.0,                mass: 0.0,                position: [s37v[ID].x, s37v[ID].y]            });            s37v[ID].Body.gravityScale = 0;            s37v[ID].Body.angularDamping = 0;            s37v[ID].Body.addShape(s37v[ID].Shape);            s37v[ID].Body.angle = s37v[ID].dir / 180 * Math.PI;            world.addBody(s37v[ID].Body);            s37v[ID].Delay = Math.random() * 100;            s37v[ID].Body.ColliGroup = 1;            break;        case _TX(216):            window.famobi.log(_TX(228), ID)            s37v[ID].Shape = new p2.Box({                width: 15,                height: 300            });            s37v[ID].Shape.material = GroundMaterial;            s37v[ID].Body = new p2.Body({                damping: 1.0,                mass: 0.0,                position: [s37v[ID].x, s37v[ID].y]            });            s37v[ID].Body.gravityScale = 0;            s37v[ID].Body.angularDamping = 0;            s37v[ID].Body.addShape(s37v[ID].Shape);            s37v[ID].Body.angle = s37v[ID].dir / 180 * Math.PI;            world.addBody(s37v[ID].Body);            s37v[ID].Body.ColliGroup = 1;            break;        case _TX(214):            window.famobi.log(_TX(229), ID)            s37v[ID].Shape = new p2.Box({                width: 15,                height: 150            });            s37v[ID].Shape.material = GroundMaterial;            s37v[ID].Body = new p2.Body({                damping: 1.0,                mass: 0.0,                position: [s37v[ID].x, s37v[ID].y]            });            s37v[ID].Body.gravityScale = 0;            s37v[ID].Body.angularDamping = 0;            s37v[ID].Body.addShape(s37v[ID].Shape);            s37v[ID].Body.angle = s37v[ID].dir / 180 * Math.PI;            world.addBody(s37v[ID].Body);            s37v[ID].Body.ColliGroup = 1;            break;        case _TX(220):            window.famobi.log(_TX(230), ID)            s37v[ID].Shape = new p2.Box({                width: 15,                height: 80            });            s37v[ID].Shape.material = GroundMaterial;            s37v[ID].Body = new p2.Body({                damping: 1.0,                mass: 5.0,                position: [s37v[ID].x, s37v[ID].y]            });            s37v[ID].Body.gravityScale = 0;            s37v[ID].Body.angularDamping = 1;            s37v[ID].Body.addShape(s37v[ID].Shape);            s37v[ID].Body.angle = s37v[ID].dir / 180 * Math.PI;            s37v[ID].Body.Collided = false;            s37v[ID].Delay = 0;            world.addBody(s37v[ID].Body);            s37v[ID].Body.ColliGroup = 1;            break;        case _TX(219):            window.famobi.log(_TX(231), ID)            s37v[ID].Shape = new p2.Box({                width: 150,                height: 150            });            s37v[ID].Shape.material = GroundMaterial;            s37v[ID].Body = new p2.Body({                damping: 1.0,                mass: 0.0,                position: [s37v[ID].x, s37v[ID].y]            });            s37v[ID].Body.gravityScale = 0;            s37v[ID].Body.angularDamping = 0;            s37v[ID].Body.addShape(s37v[ID].Shape);            s37v[ID].Body.angle = s37v[ID].dir / 180 * Math.PI;            world.addBody(s37v[ID].Body);            s37v[ID].Body.ColliGroup = 1;            break;    }};function f74(Step) {    try {        if (s37v[Object_ToDistroy].x < Scroll_X - 650) {            window.famobi.log(_TX(232), s37v[Object_ToDistroy].name)            if (s37v[Object_ToDistroy].Body != null) {                s37v[Object_ToDistroy].Body.removeShape(s37v[Object_ToDistroy].shape);                world.removeBody(s37v[Object_ToDistroy].Body);            }            if (s37v[Object_ToDistroy].BodyB != null) {                s37v[Object_ToDistroy].BodyB.removeShape(s37v[Object_ToDistroy].shapeB);                world.removeBody(s37v[Object_ToDistroy].BodyB);            }            if (s37v[Object_ToDistroy].Constraint != null) {                world.removeConstraint(s37v[Object_ToDistroy].Constraint);                s37v[Object_ToDistroy].Constraint = null;            }            s37v.splice(Object_ToDistroy, 1);        }    } catch {}    Object_ToDistroy++;    if (Object_ToDistroy > s37v.length - 1) Object_ToDistroy = 0;    Step--;    if (Step > 0) f74(Step);};function f75(Step) {    if (s37vToAdd.length == 0) return;    try {        if (s37vToAdd[Object_ToAdd].x < Scroll_X + s210v.x * 2.0) {            var ID = s37v.push(structuredClone(s37vToAdd[Object_ToAdd]));            s37vToAdd.splice(Object_ToAdd, 1);            f91(ID - 1);        }    } catch {}    Object_ToAdd++;    if (Object_ToAdd > s37vToAdd.length - 1) Object_ToAdd = 0;    Step--;    if (Step > 0) f75(Step);}var Score = 0;var ScorePrev = -1;var ScoreBump = 0;var Blast_Blink = 0;var Blast_Text_Shift = 0;var Blast_Text_Shift_delay = 0;function f219(IsBlur) {    if (MenuType != -1 && MenuType != 101 && MenuType != -100) return;    f141(1);    if (IsBlur == false) {        f123();    } else {        f123(FBO_W, FBO_H);        f196(FBO_W / s210v.x, FBO_H / s210v.y, 1);        f126(0.1, 0.1, 1, 0.3);    }    if (s318v == 7) f122(0, s210v.y * 0.3, 0);    if (s210v.x > s210v.y * 0.9)        f122(s210v.x * 0.5, s210v.y * 0.1, -100);    else {        if (s318v == 8)            f122(s210v.x * 0.5, s210v.y * 0.2, -100);        else f122(s210v.x * 0.5, s210v.y * 0.08, -100);    }    if (H5_H5app_IsH5 != true) {        if (IsBlur == false) {            f126(1, 1, 1, 1.0);            f212();            f196(10.0, 3.0, 1.0);            f120(34);            f226();            f126(1, 1, 1, 1.0);        } else {            f126(1, 1, 1, 1.0);            f212();            f196(10.0, 3.0, 1.0);            f120(34);            f226();            f126(1, 0.0, 1, 0.5);        }    }    if (s318v == 7) f196(1.5, 1.5, 1.0);    if (Score > 99999) Score = 99999;    var ScoreText = "" + Score;    if (ScoreBump > 0) ScoreBump -= v95 * 0.001;    else ScoreBump = 0;    if (ScorePrev != Score) {        ScorePrev = Score;        ScoreBump = 0.1;    }    var scale = 0.8 + ScoreBump;    if (H5_H5app_IsH5 != true) {        f212();        f196(scale + 0.1, scale + 0.1, 1.0);        f122(-31 * (ScoreText.length - 1.0), 0, 0);        for (var i = 0; i < ScoreText.length; i++) {            f161(1, ScoreText[i]);            if (i < ScoreText.length - 1) {                f122(31, 0, 0);                f161(1, '_');                f122(31, 0, 0);            }        }        f226();    } else {        f122(0, -50, 0);    }    if (PointsToAdd > 0) {        if (PointsToAddTimer > 0) {            PointsToAddTimer -= v95 * 0.025;            if (Math.cos(PointsToAddTimer) > 0) f126(1, 0.0, 1, 0.5);        } else {            if (ScoreBump == 0)                if (PointsToAdd > 50) {                    PointsToAdd -= 10;                    Score += 10;                } else {                    PointsToAdd--;                    Score++;                }        }        scale = 0.6;        var ScoreText = "" + PointsToAddIcon + PointsToAdd + "";        f212();        f196(scale, scale, 1.0);        f122(-31 * (ScoreText.length - 1.0), 200, 0);        for (var i = 0; i < ScoreText.length; i++) {            f161(1, ScoreText[i]);            if (i < ScoreText.length - 1) {                f122(31, 0, 0);                f161(1, '_');                f122(31, 0, 0);            }        }        f226();    }    if (s318v == 7) return;    if (Level_Based == true) return;    f122(-20, 50, 0);    f196(0.4, 0.4, 1.0);    f126(1, 1, 1, 1.0);    var BlastHilight = 1.0;    if (Blast_Blink > 0) {        Blast_Blink -= v95 * 0.03;        if (Math.cos(Blast_Blink * 0.5) > 0)            BlastHilight = 20;    } else Blast_Blink = 0;    if ((s15v > 3 && Blast_Blink == 0)) {        s318v = 20;        s15v = 0;        Blast_Blink = 0;        return;    }    if ((s15v > 3 && Blast_Blink == 0) || Game_Mode > 0) {        BlastHilight = 1.1 + Math.cos(s69v * 12.0) * 0.1;        f126(BlastHilight, BlastHilight, BlastHilight, BlastHilight);        f196(0.85, 0.7, 1.0);        var text = "-";        if (Game_Mode > 0) {            BlastMode_Ticks += v95;            if (BlastMode_Ticks > 400) {                BlastMode_Ticks -= 400;                BlastMode_Timer--;                if (BlastMode_Timer < 0) BlastMode_Timer = 0;                Score += 1;                ScorePrev = Score;                f9([CarCenter.x, CarCenter.y + 30, 0]);                f10([0, 0.05, 0]);                f41(20);                f7(-0.0125);                f11(0);                f1(0);                f16(0.0);                f17(2);                f102();            }            if (BlastMode_Timer < 10)                text = _TX(233) + BlastMode_Timer + _TX(234);            else text = _TX(235) + BlastMode_Timer + _TX(234);            Blast_Text_Shift_delay = 0;            Blast_Text_Shift = 0;        }        Blast_Text_Shift_delay += v95;        if (Blast_Text_Shift_delay > 0) {            Blast_Text_Shift_delay -= 300;            Blast_Text_Shift++;            if (Blast_Text_Shift > text.length - 1) Blast_Text_Shift = 0;        }        text = text + text;        f122(-268, 0, 0);        for (var i = 0; i < 9; i++) {            f161(1, '_');            f122(31 + 7, 0, 0);            f161(1, text[i + Blast_Text_Shift]);            f122(31 + 7, 0, 0);        }        f161(1, '_');        f126(0, 100, 0, 1.0);        return;    }    if (CarIsDestroyed == true) return;    f122(39, 20, 0);    f196(1.5, 1.5, 1.0);    f126(BlastHilight, BlastHilight, BlastHilight, BlastHilight);    if (IsBlur == true) f126(BlastHilight * 0.4, BlastHilight * 0.3, BlastHilight * 0.4, BlastHilight);    f161(1, _TX(236));    f122(-38, 1, 0);    f126(BlastHilight, BlastHilight, BlastHilight, BlastHilight);    for (var i = 0; i < s15v; i++) {        f161(1, _TX(237));        f122(40, 0, 0);    }    f126(0, 100, 0, 1.0);}var FBO_W = -1;var FBO_H = -1;var FBO_Size = 256;function f108() {    if (s210v.y > s210v.x) {        var FBOw = FBO_Size;        var Ratio = FBO_Size / s210v.x;        FBOh = Math.floor(s210v.y * Ratio);    } else {        var FBOh = FBO_Size;        var Ratio = FBO_Size / s210v.y;        FBOw = Math.floor(s210v.x * Ratio);    }    if (FBO_W != FBOw || FBO_H != FBOh) {        FBO_W = FBOw;        FBO_H = FBOh;        f210(1, FBO_W, FBO_H, false);        f210(2, FBO_W, FBO_H, false);        window.famobi.log(_TX(238), FBO_W, FBO_H);    }    f136(1);    f141(1);    f126(1, 1, 1, 1);    gl.viewport(0, 0, FBO_W, FBO_H);    mat4.ortho(v85, 0, s210v.x, s210v.y, 0, 0.1, 800.0)    mat4.identity(v78);    mat4.identity(v48);    gl.disable(gl.DEPTH_TEST);    if (Blur_Fade < 1.0) Blur_Fade += v95 * 0.002;    else Blur_Fade = 1.0;    if (s469vBackground < 1) {        f126(0.125 * Blur_Fade, 0.125, 0.125 * Blur_Fade, 0.9);        f212();        f122(0, s210v.y, -100);        f196(1, -1, 1);        f122(-s25v, 0, 0);        f186(999);        f122(2048, 0, 0);        f186(999);        f226();    }    if (s469vBackground > 0) {        f126(0.5, 0.6, 0.7, s469vBackground);        gl.enable(gl.BLEND);        f212();        f122(0, s210v.y, -100);        f196(1, -1, 1);        f122(-s25v, 0, 0);        f186(998);        f122(2048, 0, 0);        f186(998);        f226();    }    f212();    f122(0, s210v.y, -100);    f196(Scroll_Zoom, -Scroll_Zoom, 1);    f122(-Scroll_X, Scroll_Y, 0);    gl.enable(gl.BLEND);    f205(true);    f218();    f51();    f119(20, 0);    gl.enable(gl.BLEND);    f82();    f141(1);    f241(0.1);    gl.disable(gl.BLEND);    gl.disable(gl.BLEND);    v46 = -1;    f141(6);    f126(0, 0, 0, 1);    for (var i = 0; i < Chunk_List.length; i++) {        if (Chunk_List[i].x < Scroll_X + (s210v.x / Scroll_Zoom)) {            f212();            f122(Chunk_List[i].x, 0, 0);            f186(Chunk_List[i].id, 1, 1);            f226();        }    }    v46 = -1;    f141(1);    f126(Road_Col[0], Road_Col[1], Road_Col[2], 1);    for (var i = 0; i < Chunk_List.length; i++) {        if (Chunk_List[i].x < Scroll_X + (s210v.x / Scroll_Zoom)) {            f212();            f122(Chunk_List[i].x, 0, 0);            f186(Chunk_List[i].id, 0, 0);            f226();        }    }    f226();    f219(true);    f123(FBO_W, FBO_H);    f122(FBO_W * 0.5, FBO_H * 0.5, 0);    gl.disable(gl.BLEND);    var BlurForce = 0.0025 / Blur_Fade;    for (var i = 1; i < 4; i++) {        f136(2);        f141(4);        f126(Blur_Fade, 1, Blur_Fade, (s210v.x) / FBO_W * BlurForce * i);        f239(1);        f136(1);        f141(5);        f126(Blur_Fade, 1, Blur_Fade, (s210v.y) / FBO_H * BlurForce * i);        f239(2);    }    f136(-1);    f141(1);}var s469vBackground = 0;function f191() {    if (Game_Mode == 0) {        s469vBackground -= v95 * 0.001;        if (s469vBackground < 0) s469vBackground = 0;    } else {        s469vBackground += v95 * 0.0004;        if (s469vBackground > 1) s469vBackground = 1;    }    f108();    f141(1);    f126(1, 1, 1, 1);    f123();    f126(Scene_Col[0] * 0.525, Scene_Col[1] * 0.525, Scene_Col[2] * 0.525, 1);    gl.disable(gl.BLEND);    f212();    f122(0, s210v.y, -100);    f196(1, -1, 1);    f122(-s25v, 0, 0);    f186(999);    f122(2048, 0, 0);    f186(999);    f226();    if (s469vBackground > 0) {        f126(1, 1, 1, s469vBackground);        gl.enable(gl.BLEND);        f212();        f122(0, s210v.y, -100);        f196(1, -1, 1);        f122(-s25v, 0, 0);        f186(998);        f122(2048, 0, 0);        f186(998);        f226();    }    f141(1);    f212();    f122(0, s210v.y, -100);    f196(Scroll_Zoom, -Scroll_Zoom, 1);    f122(-Scroll_X, Scroll_Y, 0);    gl.enable(gl.BLEND);    f119(20, 0);    f82();    f141(1);    gl.enable(gl.BLEND);    f141(1);    f126(1, 1, 1, 1);    gl.enable(gl.BLEND);    f205(false);    gl.disable(gl.BLEND);    v46 = -1;    f141(6);    f126(Scene_Col[0], Scene_Col[1], Scene_Col[2], 1);    for (var i = 0; i < Chunk_List.length; i++) {        if (Chunk_List[i].x < Scroll_X + (s210v.x / Scroll_Zoom)) {            f212();            f122(Chunk_List[i].x, 0, 0);            f186(Chunk_List[i].id, 1, 1);            f226();        }    }    v46 = -1;    f141(1);    f126(Road_Col[0], Road_Col[1], Road_Col[2], 1);    for (var i = 0; i < Chunk_List.length; i++) {        if (Chunk_List[i].x < Scroll_X + (s210v.x / Scroll_Zoom)) {            f212();            f122(Chunk_List[i].x, 0, 0);            f186(Chunk_List[i].id, 0, 0);            f226();        }    }    v46 = -1;    gl.enable(gl.BLEND);    f141(1);    f126(1, 1, 1, 1);    f218();    f241(1.0);    v46 = -1;    f141(1);    f126(1, 1, 1, 1);    gl.enable(gl.BLEND);    for (var i = 0; i < Chunk_List.length; i++) {        if (Chunk_List[i].x < Scroll_X + (s210v.x / Scroll_Zoom)) {            f212();            f122(Chunk_List[i].x, 0, 0);            for (var j = 2; j < Mesh[Chunk_List[i].id].obj.length; j++)                if (Mesh[Chunk_List[i].id].obj[j].Name[0] == "!") f186(Chunk_List[i].id, j, j);            f226();        }    }    f226();    if (Chunk_List[0].x < Scroll_X - 2348) {        Chunk_List.shift();        window.famobi.log(_TX(239), Chunk_List.length);    }    f219(false)    f141(1);    f126(1, 1, 1, 1);    f123();    f122(s210v.x * 0.5, s210v.y * 0.5, -100);    f196(s210v.x / FBO_W, s210v.y / FBO_H, 1);    gl.blendFunc(gl.ONE, gl.ONE);    gl.enable(gl.BLEND);    f141(1);    f126(1.1, 1.1, 1.1, 0.1);    f239(1);    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);    return;    f141(1);    f126(1, 1, 1, 1);    f123();    f212();    f122(0, s210v.y, -100);    f196(Scroll_Zoom, -Scroll_Zoom, 1);    f122(-Scroll_X, Scroll_Y, 0);    for (var i = 0; i < Polys.length; i++) {        var x = Polys[i].body.position[0];        var y = Polys[i].body.position[1];        f212();        f122(x, y, 0);        f178(Polys[i].body.angle * 180 / Math.PI, 0, 0, 1)        f122(-Polys[i].shape.length * 0.5, 0, 0);        f212();        f196(0.1, 0.1, 1);        f120(22);        f226();        for (var j = 0; j < Polys[i].shape.length; j += 1) {            f212();            f196(0.025, 0.025, 1);            f120(22);            f226();            f122(1, 0, 0);        }        f212();        f196(0.1, 0.1, 1);        f120(22);        f226();        f226();    }    f226();}var physic, Vec2, world, ground;var s43v, s44v, CarBody;var springBack, springFront;var CarCenter = {    x: 0,    y: 0};var CarAnge = 0;var CarIsDestroyed = false;var CarNormal = [0, 1];var DestroyedCounter = 0;var CarBody;var BaseBody;var GroundMaterial;var Wheel_Spring;var Car_RotForce = 0;var Car_Size = 20.0;var Car_Invincible = 0;var BodySwap = 0;var s15v = 0;var revoluteBack;var revoluteFront;function f234() {    var Wheel_s469vLimit = 1.0;    GroundMaterial = new p2.Material();    var boxVsBall = new p2.ContactMaterial(GroundMaterial, GroundMaterial, {        friction: 5.0,        restitution: 0.0001    });    var CarPos = {        x: 40,        y: 240    };    if (MenuType == 1) CarPos = {        x: 1024,        y: 300    };    var Wheel_Radius = 8.5;    var Wheel_Damping = 0.02;    world = new p2.World({        gravity: [0, -1.9]    });    world.solver.tolerance = 0.01;    world.defaultContactMaterial.friction = 0;    world.defaultContactMaterial.restitution = 0.15;    var body_shape = new p2.Circle({        radius: Wheel_Radius    });    CarBody = new p2.Body({        damping: Wheel_Damping,        mass: 0.1,        position: [CarPos.x - Car_Size * 0.5, CarPos.y + Car_Size]    });    CarBody.addShape(body_shape);    world.addBody(CarBody);    CarBody.s108v = 0;    CarBody.ColliGroup = -1;    var base_shape = new p2.Circle({        radius: 5.0    });    BaseBody = new p2.Body({        damping: 0.001,        mass: 0.1,        position: [CarPos.x, CarPos.y]    });    BaseBody.inertia = 0.001;    BaseBody.addShape(base_shape);    world.addBody(BaseBody);    BaseBody.ColliGroup = -1;    BaseBody.s108v = 0;    BaseBody.gravityScale = 0.001;    var back_shape = new p2.Circle({        radius: Wheel_Radius    });    back_shape.material = GroundMaterial;    s43v = new p2.Body({        damping: Wheel_Damping,        mass: 0.5,        position: [CarPos.x - Car_Size, CarPos.y]    });    s43v.Wheel_s469vLimit = 1.0;    s43v.addShape(back_shape);    world.addBody(s43v);    s43v.s108v = 0;    s43v.ColliGroup = -1;    var front_shape = new p2.Circle({        radius: Wheel_Radius    });    front_shape.material = GroundMaterial;    s44v = new p2.Body({        damping: Wheel_Damping,        mass: 0.5,        position: [CarPos.x + Car_Size, CarPos.y]    });    s44v.Wheel_s469vLimit = 1.0;    s44v.addShape(front_shape);    world.addBody(s44v);    s44v.s108v = 0;    s44v.ColliGroup = -1;    s43v.Times108v = 0;    s44v.Times108v = 0;    s43v.inertia = 180.0;    s44v.inertia = 180.0;    revoluteBack = new p2.RevoluteConstraint(BaseBody, s43v, {        localPivotA: [-Car_Size, 0],        localPivotB: [0, 0],        collideConnected: false    });    revoluteFront = new p2.RevoluteConstraint(BaseBody, s44v, {        localPivotA: [Car_Size, 0],        localPivotB: [0, 0],        collideConnected: false    });    world.addConstraint(revoluteBack);    world.addConstraint(revoluteFront);    world.addContactMaterial(boxVsBall);    world.disableBodyCollision(s43v, s44v);    world.disableBodyCollision(s44v, CarBody);    world.disableBodyCollision(s43v, CarBody);    world.disableBodyCollision(s44v, BaseBody);    world.disableBodyCollision(s43v, BaseBody);    world.disableBodyCollision(CarBody, BaseBody);    window.famobi.log(world);    f110(500);    world.on(_TX(240), function(evt) {        for (var i = 0; i < evt.contactEquations.length; i++) {            var eq = evt.contactEquations[i];            if (eq.bodyA.ColliGroup == -1 || eq.bodyB.ColliGroup == -1) {                eq.enabled = true;            } else if (eq.bodyA.ColliGroup == 0 || eq.bodyB.ColliGroup == 0) {                eq.enabled = false;            } else if (eq.bodyA.ColliGroup != eq.bodyB.ColliGroup) {                eq.enabled = false;            }        }    });    var MaxVelocity = 45.0;    world.on(_TX(241), function(event) {        if (s43v.velocity[0] > MaxVelocity) s43v.velocity[0] = MaxVelocity;        if (s44v.velocity[0] > MaxVelocity) s44v.velocity[0] = MaxVelocity;        if (s43v.velocity[0] < -MaxVelocity) s43v.velocity[0] = -MaxVelocity;        if (s44v.velocity[0] < -MaxVelocity) s44v.velocity[0] = -MaxVelocity;        if (s43v.velocity[1] < -MaxVelocity) s43v.velocity[1] = -MaxVelocity;        if (s44v.velocity[1] < -MaxVelocity) s44v.velocity[1] = -MaxVelocity;        MedVelo_x = (s43v.velocity[0] + s44v.velocity[0]) * 0.5;        MedVelo_y = (s43v.velocity[1] + s44v.velocity[1]) * 0.5;        s43v.velocity[0] = s43v.velocity[0] * 0.97 + MedVelo_x * 0.03;        s43v.velocity[1] = s43v.velocity[1] * 0.97 + MedVelo_y * 0.03;        s44v.velocity[0] = s44v.velocity[0] * 0.97 + MedVelo_x * 0.03;        s44v.velocity[1] = s44v.velocity[1] * 0.97 + MedVelo_y * 0.03;        BaseBody.velocity[0] = (s43v.velocity[0] + s44v.velocity[0]) * 0.5;        BaseBody.velocity[1] = (s43v.velocity[1] + s44v.velocity[1]) * 0.5;        s43v.Prevs108v = s43v.s108v;        s44v.Prevs108v = s44v.s108v;        for (var i = 0; i !== world.narrowphase.contactEquations.length; i++) {            var eq = world.narrowphase.contactEquations[i];            eq.bodyA.Collided = true;            eq.bodyB.Collided = true;            if (                ((eq.bodyB == s43v || eq.bodyA == s43v) && s43v.s108v < 10) ||                ((eq.bodyB == s44v || eq.bodyA == s44v) && s44v.s108v < 10)            ) {                f156(_TX(195), 0.6, 0.55 + s43v.velocity[0] * 0.002 + s44v.velocity[0] * 0.002, false);            }            eq.bodyB.s108v = 200;            eq.bodyA.s108v = 200;        }    });}var Polys = [];var ID_toDel = 0;var ID_ToAdd = 0;function f109(Step) {    if (ID_toDel > Polys.length - 1) ID_toDel = 0;    try {        if (Polys[ID_toDel].x < Scroll_X - 700) {            Polys[ID_toDel].body.removeShape(Polys[ID_toDel].shape);            world.removeBody(Polys[ID_toDel].body);            delete Polys[ID_toDel];            Polys.splice(ID_toDel, 1);        }    } catch {}    ID_toDel++;    if (ID_toDel > Polys.length - 1) ID_toDel = 0;    Step--;    if (Step > 0) f109(Step);}var s42v = 1000;var Chunk_New = true;var Chunk_Decal = 0;var Chunk_List = [];var s37v = [];var Line_List = [];function f110(Step) {    if (Chunk_New == true) {        f172();        for (var i = 0; i < Mesh[s42v].LinesToKeep.length; i++) {            var MinX = 2048;            if (MinX > Mesh[s42v].LinesToKeep[i].a.x) MinX = Mesh[s42v].LinesToKeep[i].a.x;            if (MinX > Mesh[s42v].LinesToKeep[i].b.x) MinX = Mesh[s42v].LinesToKeep[i].b.x;            Mesh[s42v].LinesToKeep[i].MinX = Chunk_Decal + MinX;            Line_List.push(structuredClone(Mesh[s42v].LinesToKeep[i]));        }        for (var i = 0; i < Mesh[s42v].LevelObject.length; i++) {            window.famobi.log(_TX(242), Mesh[s42v].LevelObject[i].name)            var ID = s37vToAdd.push(structuredClone(Mesh[s42v].LevelObject[i]));            s37vToAdd[ID - 1].x += Chunk_Decal;            s37vToAdd[ID - 1].def_x = s37vToAdd[ID - 1].x;            s37vToAdd[ID - 1].def_y = s37vToAdd[ID - 1].y;        }        window.famobi.log('-');        window.famobi.log(_TX(243));        window.famobi.log(_TX(244), Mesh[s42v].LinesToKeep.length);        window.famobi.log(_TX(245), Mesh[s42v].LevelObject.length);        window.famobi.log('-');        Chunk_List.push({            x: Chunk_Decal,            id: s42v        });        window.famobi.log(_TX(246), Chunk_List);        Chunk_New = false;        ID_ToAdd = 0;    }    if (Line_List.length == 0) {        Chunk_New = true;        Chunk_Decal += 2048;        return;    }    if (ID_ToAdd > Line_List.length - 1) ID_ToAdd = 0;    var i = ID_ToAdd;    if (Line_List[i].MinX < Scroll_X + s210v.x * 1.5) {        var Dist = f238(Line_List[i].a.x, Line_List[i].a.y, Line_List[i].b.x, Line_List[i].b.y);        var Angle =            f174(                [Line_List[i].a.x, Line_List[i].a.y], [Line_List[i].b.x, Line_List[i].b.y]);        var lineShape = new p2.Line({            length: Dist        });        var lineBody = new p2.Body({            mass: 0,            position: [(Line_List[i].a.x + Line_List[i].b.x) * 0.5 + Chunk_Decal, (Line_List[i].a.y + Line_List[i].b.y) * 0.5],            angularVelocity: 0,            angle: Angle,            id: 0,            allowSleep: true,            sleeps469vLimit: 0.0,            sleepTimeLimit: 0.0        });        lineShape.material = GroundMaterial;        lineBody.ColliGroup = 0;        lineBody.addShape(lineShape);        world.addBody(lineBody);        Polys.push({            x: Line_List[i].a.x + Chunk_Decal,            body: lineBody,            shape: lineShape        });        Line_List.splice(i, 1);    }    ID_ToAdd++;    if (ID_ToAdd > Line_List.length - 1) ID_ToAdd = 0;    Step--;    if (Step > 0) f110(Step);}var AccelCloudSize = 0;var Use_Physic = true;var CarDestroyDelay = 0;function f235() {    f109(20);    f110(20);    if (Use_Physic == false) {        CarCenter.x = (s43v.position[0] + s44v.position[0]) * 0.5;        CarCenter.y = (s43v.position[1] + s44v.position[1]) * 0.5;        CarBody.velocity = [0.0, 0.0];        CarBody.position = [CarCenter.x + CarNormal[1] * 10, CarCenter.y - CarNormal[0] * 10];        s43v.position[0] = CarCenter.x - Car_Size;        s43v.position[1] = CarCenter.y;        s44v.position[0] = CarCenter.x + Car_Size;        s44v.position[1] = CarCenter.y;        CarCenter.x = (s43v.position[0] + s44v.position[0]) * 0.5;        CarCenter.y = (s43v.position[1] + s44v.position[1]) * 0.5;        BaseBody.position[0] = CarCenter.x;        BaseBody.position[1] = CarCenter.y;        CarBody.angle *= 0.5;        BaseBody.angle *= 0.5;        s43v.angle *= 0.5;        s44v.angle *= 0.5;        CarBody.angularVelocity *= 0.8;        BaseBody.angularVelocity *= 0.8;        s43v.angularVelocity *= 0.8;        s44v.angularVelocity *= 0.8;        Car_RotForce *= 0.8;        CarNormal = f193(s43v.position[0] - s44v.position[0], s43v.position[1] - s44v.position[1]);        s43v.velocity[1] = 20;        s44v.velocity[1] = 20;        BaseBody.velocity[1] = 20;        Use_Physic = true;        return;    }    if (CarBody.s108v > 0) AccelButton = false;    var PhySteps = 3;    if (v71 < 50) PhySteps++;    if (v71 < 40) PhySteps += 2;    if (v71 < 30) PhySteps++;    var PhyDelta = v95 / PhySteps;    for (var steps = 0; steps < PhySteps; steps++) {        s43v.s108v -= PhyDelta;        if (s43v.s108v < 0) {            s43v.s108v = 0;            s43v.Times108v = 0;        }        s44v.s108v -= PhyDelta;        if (s44v.s108v < 0) {            s44v.s108v = 0;            s44v.Times108v = 0;        }        CarBody.s108v = 0;        if (Car_Invincible > 0) Car_Invincible -= PhyDelta;        if (CarIsDestroyed == false) {            CarCenter.x = (s43v.position[0] + s44v.position[0]) * 0.5;            CarCenter.y = (s43v.position[1] + s44v.position[1]) * 0.5;            CarNormal = f193(s43v.position[0] - s44v.position[0], s43v.position[1] - s44v.position[1]);            CarBody.velocity = [0.0, 0.0];            CarBody.position = [CarCenter.x + CarNormal[1] * 10, CarCenter.y - CarNormal[0] * 10];            if (NoAirControl == 0) {                if (AccelButton == true && s43v.s108v == 0 && s44v.s108v == 0) {                    Car_RotForce += PhyDelta * 0.005;                    if (Car_RotForce > 3.0) Car_RotForce = 3.0;                } else {                    if (s43v.s108v != 0 || s44v.s108v != 0) Car_RotForce *= 0.8;                    Car_RotForce -= PhyDelta * 0.0035;                    if (Car_RotForce < 0.0) Car_RotForce = 0.0;                }            }            if (NoAirControl == 1 && (s43v.s108v > 0 || s44v.s108v > 0)) NoAirControl = 0;            s43v.position[0] -= CarNormal[1] * Car_RotForce * PhyDelta * 0.06;            s43v.position[1] += CarNormal[0] * Car_RotForce * PhyDelta * 0.06;            s44v.position[0] += CarNormal[1] * Car_RotForce * PhyDelta * 0.06;            s44v.position[1] -= CarNormal[0] * Car_RotForce * PhyDelta * 0.06;            CarNormal = f193(s43v.position[0] - s44v.position[0], s43v.position[1] - s44v.position[1]);            if (s43v.position[1] > 1500) s43v.velocity[1] -= PhyDelta * 0.025;            if (s44v.position[1] > 1500) s44v.velocity[1] -= PhyDelta * 0.025;        }        if (Game_Mode > 0) {            if (Game_Mode == 1) {                var s469vChange = PhyDelta * 0.005;                if (AccelButton == true) Game_Mode = 2;                CarBody.velocity[1] -= s469vChange;                s43v.velocity[1] -= s469vChange;                s44v.velocity[1] -= s469vChange * 1.2;                BaseBody.velocity[1] -= s469vChange;            }            if (Game_Mode == 2) {                NoAirControl = 1;                var s469vChange = PhyDelta * 0.8;                if (s318v == 22) {                    if (AccelButton == true) {                        CarBody.velocity[1] += s469vChange;                        s43v.velocity[1] += s469vChange;                        s44v.velocity[1] += s469vChange;                        BaseBody.velocity[1] += s469vChange;                        CarBody.position[1] = CarBody.position[1] * 0.99 + 650 * 0.01;                        s43v.position[1] = s43v.position[1] * 0.99 + 650 * 0.01;                        s44v.position[1] = s44v.position[1] * 0.99 + 650 * 0.01;                    } else {                        CarBody.velocity[1] -= s469vChange;                        s43v.velocity[1] -= s469vChange;                        s44v.velocity[1] -= s469vChange;                        BaseBody.velocity[1] -= s469vChange;                        CarBody.position[1] = CarBody.position[1] * 0.99 + 500 * 0.01;                        s43v.position[1] = s43v.position[1] * 0.99 + 500 * 0.01;                        s44v.position[1] = s44v.position[1] * 0.99 + 500 * 0.01;                    }                    BaseBody.position[1] = CarCenter.y;                }                if (s318v == 21) {                    CarBody.velocity[1] *= 0.9;                    s43v.velocity[1] *= 0.9;                    s44v.velocity[1] *= 0.9;                    CarBody.position[1] = CarBody.position[1] * 0.99 + 500 * 0.01;                    s43v.position[1] = s43v.position[1] * 0.99 + 500 * 0.01;                    s44v.position[1] = s44v.position[1] * 0.99 + 500 * 0.01;                }                var MaxYs469v = 30;                if (CarBody.velocity[1] < -MaxYs469v) CarBody.velocity[1] = -MaxYs469v;                if (s43v.velocity[1] < -MaxYs469v) s43v.velocity[1] = -MaxYs469v;                if (s44v.velocity[1] < -MaxYs469v) s44v.velocity[1] = -MaxYs469v;                if (CarBody.velocity[1] > MaxYs469v) CarBody.velocity[1] = MaxYs469v;                if (s43v.velocity[1] > MaxYs469v) s43v.velocity[1] = MaxYs469v;                if (s44v.velocity[1] > MaxYs469v) s44v.velocity[1] = MaxYs469v;            }            if (s318v == 22) {                s43v.velocity[0] = 55;                s44v.velocity[0] = 55;                if (s43v.position[1] > 650) s43v.position[1] = 650;                if (s44v.position[1] > 650) s44v.position[1] = 650;                if (CarBody.position[1] > 650) CarBody.position[1] = 650;                if (s43v.position[1] < 500) s43v.position[1] = 500;                if (s44v.position[1] < 500) s44v.position[1] = 500;                if (CarBody.position[1] < 500) CarBody.position[1] = 500;            }            Car_RotForce = 0;            s43v.position[0] -= 1.5;            s44v.position[0] += 1.5;            if (s43v.s108v != 0 || s44v.s108v != 0) f203();        }        world.step(PhyDelta * 0.015);        CarCenter.x = (s43v.position[0] + s44v.position[0]) * 0.5;        CarCenter.y = (s43v.position[1] + s44v.position[1]) * 0.5;        if (CarIsDestroyed == false) {            if (AccelButton == true) {                if (s43v.s108v > 0) s43v.angularVelocity -= PhyDelta * 0.04;                if (s44v.s108v > 0) s44v.angularVelocity -= PhyDelta * 0.045;            } else {                if (s43v.s108v > 0 && s43v.angularVelocity < -0.1) s43v.angularVelocity += PhyDelta * 0.0025;                if (s44v.s108v > 0 && s44v.angularVelocity < -0.5) s44v.angularVelocity += PhyDelta * 0.0025;            }            if (CarBody.s108v > 0) {                f9([CarBody.position[0], CarBody.position[1], 0]);                f10([Math.random() * 0.4 - 0.2, Math.random() * 0.4 - 0.2, 0]);                f41(2 + Math.random() * 10);                f7(-0.025);                f11(Math.random() * 360);                f1(Math.random() * 0.1 - 0.05);                f16(0.0);                f17(7);                f102();                f9([CarBody.position[0], CarBody.position[1], 0]);                f10([Math.random() * 0.4 - 0.2, Math.random() * 0.4 - 0.2, 0]);                f41(2 + Math.random() * 10);                f7(-0.025);                f11(Math.random() * 360);                f1(Math.random() * 0.1 - 0.05);                f16(0.0);                f17(6);                f102();            }            if (Car_Invincible < 1 && (CarCenter.y < -200 || CarBody.s108v > 0)) {                CarDestroyDelay += PhyDelta;                Pts_RotationCount = 0;                if (CarDestroyDelay > 1200) {                    PointsToAdd = 0;                    PointsToAddTimer = 0;                    Pts_RotationCount = 0;                    f203();                }            } else {                CarDestroyDelay -= PhyDelta;                if (CarDestroyDelay < 0) CarDestroyDelay = 0;            }        }        if (CarIsDestroyed == true) {            f94(0.97);            DestroyedCounter += PhyDelta;            if (DestroyedCounter > 2000 && s318v != 8 && s318v != 7 && s318v != 7.5) {                if (PointsToAdd > 0) Score += PointsToAdd;                PointsToAdd = 0;                s318v = 8;                return;            }        }    }    if (CarIsDestroyed == false) {        if (s43v.s108v == 0 && s44v.s108v == 0) {            BikeIsInAire += v95;        }        if (s43v.s108v > 150 && s44v.s108v > 150 && BikeIsInAire > 800) {            if (s43v.Times108v < 3 && s44v.Times108v < 3) {                s43v.Times108v = 100;                s44v.Times108v = 100;                window.famobi.log(_TX(247));                if (Pts_RotationCount > 0) {                    f9([CarCenter.x, CarCenter.y + 40, 0]);                    f10([s43v.velocity[0] * 0.009, s43v.velocity[1] * 0.004, 0]);                    f41(40);                    f7(-0.0125);                    f11(0);                    f1(0);                    f16(0.0);                    f17(11);                    f102();                    PerfectLandingEffect = 100;                    f107("", Pts_RotationCount * 2);                }            } else f107("", Pts_RotationCount);            Pts_RotationCount = 0;            BikeIsInAire = 0;        }        s43v.Times108v++;        s44v.Times108v++;    }    if (CarIsDestroyed == false)        if (s43v.s108v > 0) {            var Velo = f238(0, 0, s43v.velocity[0], s43v.velocity[1]);            if (Velo > 5.0) {                f9([s43v.position[0], s43v.position[1], 0]);                f10([s43v.velocity[0] * 0.004, s43v.velocity[1] * 0.004, 0]);                f41((10 + Math.random() * 30) * 0.4);                f7(-0.01);                f11(Math.random() * 360);                f1(-s43v.velocity[0] * 0.001);                f16(0.00005);                f17(0);                f102()            }        }}var BikeIsInAire = 0;var PerfectLandingEffect = 0;Game_Version = _TX(248);var s386v = 0;var Level_Based = true;var Levels = [];var CurrentLevel = 0;var CurrentLevelPos = 0;var Level_RestartPos = 0;var Level_timer = 0;var Level_Show = 0;var Level_Progress = 0;var Level_StartAt = 0;Levels.push([1001, 1098]);Levels.push([1002, 1098]);Levels.push([1003, 1098]);Levels.push([1040, 1098]);Levels.push([1005, 1098]);Levels.push([1006, 1008, 1098]);Levels.push([1004, 1012, 1098]);Levels.push([1014, 1015, 1098]);Levels.push([1018, 1019, 1098]);Levels.push([1022, 1011, 1024, 1098]);Levels.push([1026, 1027, 1028, 1098]);Levels.push([1031, 1030, 1033, 1098]);Levels.push([1037, 1038, 1039, 1098]);Levels.push([1044, 1045, 1046, 1047, 1098]);Levels.push([1040, 1043, 1041, 1030, 1098]);Levels.push([1032, 1021, 1030, 1022, 1098]);Levels.push([1033, 1025, 1006, 1026, 1098]);Levels.push([1010, 1030, 1011, 1031, 1012, 1098]);Levels.push([1014, 1034, 1015, 1035, 1016, 1098]);Levels.push([1019, 1039, 1020, 1040, 1021, 1098]);Levels.push([1025, 1045, 1026, 1046, 1027, 1047, 1028, 1098]);Levels.push([1031, 1011, 1032, 1012, 1033, 1013, 1034, 1098]);Levels.push([1037, 1017, 1038, 1018, 1039, 1019, 1040, 1098]);Levels.push([1022, 1032, 1023, 1042, 1023, 1040, 1035, 1098]);Levels.push([1039, 1040, 1041, 1042, 1020, 1011, 1012, 1098]);Levels.push([1042, 1032, 1033, 1035, 1011, 1012, 1013, 1098]);var UnlockedLevel = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];var PREF_Sounds = 1;var PREF_Music = 1;var s318v = 0;var s69v = 0;var IsEditor = false;var RubyCount = 0;var s5v = 0;var s9v = 0;var conti_value = 0;var conti_timer = 0;var conti_zoom = 1.0;var conti_Ruby = 0;var s14v = 0;var TestColorTimer = 0;var BlastModes469v = 0;var GameIsBlured = false;let GameIsPaused = false;var Hi_Score = 0;var PingPong = 0;function f206() {    if (H5_H5app_IsH5 == true) return;    if (Hi_Score < Score) {        window.famobi.log(_TX(249));        Hi_Score = Score;        se_savePref(_TX(250), Hi_Score);    }};function f247(InA, InB, f248) {    var value_B = (1.0 - f248) * (v95 / 16.666);    if (value_B > 1.0) value_B = 1.0;    if (value_B < 0.0) value_B = 0.0;    var value_A = 1.0 - value_B;    return InA * value_A + InB * value_B;}var Scroll_X = 0;var Scroll_MinX = 0;var Scroll_Y = 0;var s25v = 0;var Road_Color = [0, 1, 0];var Scene_Color = [0.8, 0, 0.7];var Road_Col = [0, 0, 0];var Scene_Col = [0, 0, 0];var TitleIconID = 0;var titleFade = 0.0;function f111() {    if (Level_Based != true) return;    if (H5_H5app_IsH5 == true) {        if (H5_H5app_Force___Level > 0) {            CurrentLevel = H5_H5app_Force___Level - 1;            H5_H5app_Force___Level = 0;        }    }    if (Level_StartAt > 0) {        CurrentLevel = Level_StartAt - 1;        Level_StartAt = 0;    }    s24v = [];    s24v.push(1099);    s24v.push(1099);    f204(true);    Scroll_X = 1024;    if (Level_RestartPos > 0) {        Scroll_X = Math.floor(Level_RestartPos / 2048) * 2048 + 100;        Level_RestartPos = 0;        for (var i = 0; i < 100; i++) {            f110(100);            f75(100);            f109(100);            f74(100);        }        Scroll_X -= 50;    }    s44v.position[0] = Scroll_X + 20;    CarBody.position[0] = Scroll_X;    BaseBody.position[0] = Scroll_X;    s43v.position[0] = Scroll_X - 20;    s44v.position[1] = 300;    CarBody.position[1] = 300;    BaseBody.position[1] = 300;    s43v.position[1] = 300;    Goal = Scroll_X;    Level_Show = 0;    s1v = 0;    s29v = 0;    s29vY = 0;    Level_Progress = 0;};function f132() {}var MenuType = -1;var s1v = 0.0;var s29v = 0;var s29vY = 0;function f150() {    f235();    f75(5);    f74(5);    f173();    f217();    switch (MenuType) {        case -1:            s1v += v95 * 0.000125;            if (s1v > 1.0) s1v = 1.0;            if (s210v.x > s210v.y * 0.9)                var Goal = f223(CarCenter.x - s210v.x * 0.35, Scroll_X, s1v);            else {                if (s44v.velocity[0] + s43v.velocity[0] > 3) s29v += v95 * 0.13;                if (s44v.velocity[0] + s43v.velocity[0] < -3) s29v -= v95 * 0.13;                if (s29v > 65) s29v = 65;                if (s29v < -110) s29v = -110;                var Goal = f223(CarCenter.x - s210v.x * 0.35 + s29v, Scroll_X, s1v);            }            if (CarIsDestroyed == false) {                if (Scroll_MinX < Scroll_X) Scroll_MinX = Scroll_X;                if (Scroll_MinX - 700 < Goal) {                    var Diff = Goal - Scroll_X;                    Scroll_X += Diff;                    if (Scroll_X < 0) {                        Scroll_X = 0;                        Diff = 0;                    }                    s25v += Diff * 0.15;                    if (Game_Mode > 0) s25v += Diff * 1.8;                    if (s25v < 0) s25v = 0;                    if (s25v > 2048) s25v -= 2048;                }                if (s43v.s108v < 1 && s44v.s108v < 1 && s44v.velocity[1] < 0.0) {                    s29vY -= v95 * 0.005 * s44v.velocity[1];                    if (s29vY > 150) s29vY = 150;                    if (s29vY < 0) s29vY = 0;                } else {                    s29vY -= v95 * 0.05;                    if (s29vY < 0) s29vY = 0;                }                if (s210v.x > s210v.y * 0.9) {                    Scroll_Y = f223(100 - CarCenter.y * 0.65, Scroll_Y, s1v);                    if (Scroll_Y > 200) Scroll_Y = 200;                    Scroll_Zoom = f223(1.2 + (Scroll_Y - 200) * 0.0006, Scroll_Zoom, s1v);                } else {                    Scroll_Y = f223(-50 + s210v.y * 0.5 - CarCenter.y * 0.75 + s29vY, Scroll_Y, s1v);                    if (Scroll_Y > 300) Scroll_Y = 300;                    Scroll_Zoom = f223(0.85, Scroll_Zoom, s1v);                }            } else {                Scroll_Zoom += v95 * 0.0001;            }            break;        case 1:            s1v -= v95 * 0.00125;            if (s1v < 0.0) s1v = 0.0;            s44v.velocity[0] *= 0.5;            s43v.velocity[0] *= 0.5;            Scroll_X = 1024 - (s210v.x * 0.5) / Scroll_Zoom;            Goal = Scroll_X;            if (s210v.x > s210v.y * 0.9) {                Scroll_Y = f223(-60, Scroll_Y, 0.1);                Scroll_Zoom = f223(1.2, Scroll_Zoom, 0.1);            } else {                Scroll_Y = f223(-210 + s210v.y * 0.25, Scroll_Y, 0.1);                Scroll_Zoom = f223(1.7 - s210v.y * 0.0005, Scroll_Zoom, 0.1);            }            break;        case 2:            s1v -= v95 * 0.00125;            if (s1v < 0.0) s1v = 0.0;            s44v.velocity[0] *= 0.5;            s43v.velocity[0] *= 0.5;            Scroll_X = 1024 - (s210v.x * 0.5) / Scroll_Zoom;            Goal = Scroll_X;            if (s210v.x > s210v.y) {                Scroll_Y = f223(-230, Scroll_Y, 0.05);                Scroll_Zoom = f223(4.2, Scroll_Zoom, 0.05);            } else {                Scroll_Y = f223(-410 + s210v.y * 0.25, Scroll_Y, 0.05);                Scroll_Zoom = f223(4.7 - s210v.y * 0.0005, Scroll_Zoom, 0.05);            }            break;        case 30:            s1v -= v95 * 0.00125;            if (s1v < 0.0) s1v = 0.0;            s44v.velocity[0] *= 0.5;            s43v.velocity[0] *= 0.5;            Scroll_X = 1024 - (s210v.x * 0.5) / Scroll_Zoom;            Goal = Scroll_X;            if (s210v.x > s210v.y * 0.9) {                Scroll_Y = f223(-60, Scroll_Y, 0.1);                Scroll_Zoom = f223(0.8, Scroll_Zoom, 0.1);            } else {                Scroll_Y = f223(-210 + s210v.y * 0.25, Scroll_Y, 0.1);                Scroll_Zoom = f223(1.3 - s210v.y * 0.0005, Scroll_Zoom, 0.1);            }            break;        case 100:            if (s210v.x > s210v.y * 0.9)                Goal = CarCenter.x - s210v.x * 0.4;            else Goal = CarCenter.x - s210v.x * 0.5;            if (Scroll_MinX < Scroll_X) Scroll_MinX = Scroll_X;            Scroll_X = f223(Scroll_X, Goal, 0.995);            if (s210v.x > s210v.y * 0.9) {                Scroll_Zoom = f223(Scroll_Zoom, 1.2, 0.95);                Scroll_Y = f223(Scroll_Y, -CarCenter.y + s210v.y * 0.45, 0.5);            } else {                Scroll_Y = f223(Scroll_Y, -CarCenter.y * 0.8 + s210v.y * 0.4, 0.5);                Scroll_Zoom = f223(Scroll_Zoom, 1.0, 0.95);            }            s469vBackground = 0;            s1v = 1;            break;        case 101:            s1v -= v95 * 0.000325;            if (s1v < 0.0) s1v = 0.0;            if (s210v.x > s210v.y * 0.9)                Goal = f223(CarCenter.x - s210v.x * 0.4, CarCenter.x - s210v.x * 0.15, s1v);            else Goal = f223(CarCenter.x - s210v.x * 0.5, CarCenter.x - s210v.x * 0.15, s1v);            if (Scroll_MinX < Scroll_X) Scroll_MinX = Scroll_X;            if (Scroll_MinX - 300 < Goal) {                var Diff = Goal - Scroll_X;                Scroll_X += Diff;                if (Scroll_X < 0) {                    Scroll_X = 0;                    Diff = 0;                }                s25v += Diff * 2.5;                if (s25v < 0) s25v = 0;                if (s25v > 2048) s25v -= 2048;            }            if (s210v.x > s210v.y * 0.9) {                Scroll_Zoom = 1.2;                Scroll_Y = -CarCenter.y * 0.8 + 112;            } else {                Scroll_Y = -CarCenter.y * 0.8 + s210v.y * 0.4;                Scroll_Zoom = 1.0;            }            break;    }    f190();    f191();    Road_Col[0] = Road_Col[0] * 0.99 + Road_Color[0] * 0.01;    Road_Col[1] = Road_Col[1] * 0.99 + Road_Color[1] * 0.01;    Road_Col[2] = Road_Col[2] * 0.99 + Road_Color[2] * 0.01;    Scene_Col[0] = Scene_Col[0] * 0.99 + Scene_Color[0] * 0.01;    Scene_Col[1] = Scene_Col[1] * 0.99 + Scene_Color[1] * 0.01;    Scene_Col[2] = Scene_Col[2] * 0.99 + Scene_Color[2] * 0.01;}var ButtonPuls = 0.0;var ButtonPulsB = 0.0;var LevelFailTimer = 0;var AccelButtonIsKeyBoard = false;var BlureBipass = false;var StartGameCalledOnce = false;function f192() {    if (H5_H5app_Should___GotoIDLE == true) {        H5_H5app_Should___GotoIDLE = false;        s318v = -1001;    }    f188();    if (Integration_SoundChanged == true) {        Integration_SoundChanged = false;        if (Integration_IsMute == true) {            PREF_Music = 0;            PREF_Sounds = 0;            f135();            f154();        } else {            PREF_Music = 1;            PREF_Sounds = 1;            f95();            f154();            f155(_TX(251), 0.8, 1.0, true);        }    }    gl.colorMask(true, true, true, false);    f247elta = f247elta * 0.9 + v95 * 0.1    if ((GameIsBlured == true || H5_H5app_Is___Paused == true) && BlureBipass == false) {        f135();        return;    }    BlureBipass = false;    s69v += v95 * 0.001;    if (s69v > 360) s69v -= s69v;    PingPong = 1 - PingPong;    if (AccelButtonIsKeyBoard == false) {        if (v80.s378v == 1 && v80.y > 70)            AccelButton = true;        else AccelButton = false;    } else {        if (v80.s378v == 1) AccelButtonIsKeyBoard = false;    }    // console.log(s318v); // console switch    switch (s318v) {        case -1000:            f154();            H5_H5app_Should___Quit = false;            H5_H5app_Should___Revive = false;            H5_H5app_LevelBased = Level_Based;            gl.clearColor(0.3, 0.0, 0.0, 1.0);            gl.clear(gl.COLOR_BUFFER_BIT);            if (v18 > 0) return;            s1v = 1.0;            conti_value = 0;            conti_timer = 0;            conti_zoom = 1.0;            conti_Ruby = 999999999999;            Level_Show = 0;            CurrentLevel = 0;            Level_Progress = 0;            f216();            f154();            if (H5_H5app_IsH5 == true) {                h5games_gameReady();                h5games_startgame();                H5_H5app_Force___Level = h5games.getPresets(_TX(252));            }            s318v = -1001;            break;        case -1001:            gl.clearColor(0.3, 0.0, 0.3, 1.0);            gl.clear(gl.COLOR_BUFFER_BIT);            Score = 0;            if (H5_H5app_Start___Game == true) {                H5_H5app_Start___Game = false;                TitleIconID = 34;                s318v = 10;                titleFade = 0;                MenuType = -1;                if (H5_H5app_Should___Revive == false) {                    Level_Progress = 0;                    CurrentLevelPos = 0;                    Level_RestartPos = 0;                }                H5_H5app_Should___Revive = false;                conti_timer = 0;                conti_value = 0;                conti_zoom = 0.2;                s318v = 10;                s5v = 0;                Level_Show = 0;                if (s38v > 1000) {                    s24v = [];                    s24v.push(s38v);                    s24v.push(s38v);                }                f204(true);                f111();                f156(_TX(195), 2.0, 2.0, false);                f154();                f155(_TX(251), 0.8, 1.0, true);            }            break;        case 0:            if (v18 > 0) {                return;            }            window.famobi.log(Levels);            f216();            if (H5_H5app_IsH5 == true) h5games_LoadProgress(100);            f43(100);            f81();            f69();            f149();            f160(1, _TX(253));            if (H5_H5app_IsH5 == true) {                s318v = -1000;                return;            }            RubyCount = se_GetPref(_TX(196));            if (RubyCount == null || RubyCount == -1) RubyCount = 0;            else RubyCount = RubyCount * 1;            Hi_Score = se_GetPref(_TX(250));            if (Hi_Score == null || Hi_Score == -1) Hi_Score = 0;            else Hi_Score = Hi_Score * 1;            PREF_Sounds = se_GetPref(_TX(254));            if (PREF_Sounds == null || PREF_Sounds == -1 || PREF_Sounds == 1) PREF_Sounds = 1;            else PREF_Sounds = 0;            PREF_Music = PREF_Sounds;            window.famobi_analytics.trackEvent("EVENT_VOLUMECHANGE", {bgmVolume: PREF_Music, sfxVolume: PREF_Sounds});            var TempUnlocked = se_GetStringPref(_TX(255));            if (TempUnlocked != -1 && TempUnlocked != null)                UnlockedLevel = JSON.parse(TempUnlocked);            window.famobi.log(TempUnlocked);            s318v = 5;            break;        case 5:            Level_Show = 0;            CurrentLevel = 0;            Level_RestartPos = 0;            Level_Progress = 0;            s318v = 6;            MenuType = 1;            s1v = 1.0;            conti_value = 0;            conti_timer = 0;            conti_zoom = 1.0;            conti_Ruby = 100;            f216();            s24v = [];            s24v.push(1099);            s24v.push(1099);            f204();            f154();            f155(_TX(256), 0.8, 1.0, true);        case 6:            Road_Color = [0, 1, 0];            Scene_Color = [0.8, 0, 0.7];            AccelButton = false;            f9([CarCenter.x, CarCenter.y + 110, 0]);            f10([(-0.5 + Math.random()) * 0.035, 0, 0]);            f41(2 + Math.random() * 15);            f7(-0.0025);            f11(Math.random() * 360);            f1((-25.5) * 0.000125);            f16(0.000015);            f17(10);            f102()            f150();            f141(1);            f123();            f212();            f122(s210v.x * 0.5, s210v.y * 0.25, 0);            f196(0.9 + Math.cos(s69v * 5) * 0.01, 0.9 + Math.cos(s69v * 4) * 0.01, 1.0);            f126(0, 0, 0, 0.6);            f212();            f161(0, _TX(257));            f178(190, 0, 0, 1);            f161(0, _TX(257));            f226();            f196(0.5, 0.5, 1.0);            f126(1, 1, 1, 1.0);            gl.blendFunc(gl.ONE, gl.ONE);            f120(0);            f226();            gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);            var SoundIcon = _TX(258);            if (PREF_Sounds == 0) SoundIcon = _TX(259);            ButtonPulsB += v95 * 0.0008;            if (ButtonPulsB > 1.0) ButtonPulsB = 0;            ButtonPuls += v95 * 0.001;            if (ButtonPuls > 1.0) ButtonPuls = 0;            if (s210v.x > s210v.y * 0.9) {                gl.blendFunc(gl.ONE, gl.ONE);                f212();                f122(s210v.x * 0.5, s210v.y - 100 + 500 * s1v, 0);                f196(ButtonPuls * 1.5, ButtonPuls * 1.5, 1.0);                f178(ButtonPuls * 1800, 0, 0, 1);                f126(1 - ButtonPuls, 0, 0, 1);                f161(0, _TX(257));                f226();                f212();                f122(s210v.x * 0.5, s210v.y - 100 + 500 * s1v, 0);                f196(ButtonPulsB * 1.5, ButtonPulsB * 1.5, 1.0);                f178(ButtonPulsB * 360, 0, 0, 1);                f126(0, 0, 1 - ButtonPulsB, 1);                f161(0, _TX(257));                f226();                gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);                var StartButton = f121(0, _TX(257), s210v.x * 0.5, s210v.y - 100 + 500 * s1v, 0.5);                if (f52() == false && H5_H5app_IsH5 != true)                    var s13v = f121(0, SoundIcon, s210v.x - 40 + 500 * s1v, 40, 0.4);                else var s13v = false;            } else {                gl.blendFunc(gl.ONE, gl.ONE);                f212();                f122(s210v.x * 0.5, s210v.y - 120 + 500 * s1v, 0);                f196(ButtonPuls * 1.5, ButtonPuls * 1.5, 1.0);                f178(ButtonPuls * 1800, 0, 0, 1);                f126(1 - ButtonPuls, 0, 0, 1);                f161(0, _TX(257));                f226();                f212();                f122(s210v.x * 0.5, s210v.y - 120 + 500 * s1v, 0);                f196(ButtonPulsB * 1.5, ButtonPulsB * 1.5, 1.0);                f178(ButtonPulsB * 360, 0, 0, 1);                f126(0, 0, 1 - ButtonPulsB, 1);                f161(0, _TX(257));                f226();                gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);                var StartButton = f121(0, _TX(257), s210v.x * 0.5, s210v.y - 120 + 500 * s1v, 0.7);                if (f52() == false && H5_H5app_IsH5 != true)                    var s13v = f121(0, SoundIcon, s210v.x - 50 + 200 * s1v, 40, 0.5);                else var s13v = false;            }            s5v = 0;            var ScoreText = "" + Hi_Score;            f141(1);            f126(1, 1, 1, 1);            f212();            f122(30 - 500 * s1v, 40, 0);            f212();            f122(60, 0, 0);            f196(2.0, 2.0, 1.0);            f226();            f196(0.5, 0.5, 1.0);            f212();            f122(33, 0, 0);            f196(0.8, 1.0, 1.0);            f126(2, 1, 1, 1.0);            f161(1, '-');            f122(44, 0, 0);            for (var i = 0; i < ScoreText.length; i++) {                f161(1, ScoreText[i]);                f122(31, 0, 0);                f161(1, '_');                f122(31, 0, 0);            }            f226();            f196(1.2, 1.2, 1.0);            f120(41);            f226();            if (s13v == true && s1v < 0.1) {                PREF_Sounds = 1 - PREF_Sounds;                PREF_Music = PREF_Sounds;                f154();                f155(_TX(256), 0.8, 1.0, true);                if (PREF_Music == 0) f135();                else f95();                se_savePref(_TX(254), PREF_Sounds);                window.famobi_analytics.trackEvent("EVENT_VOLUMECHANGE", {bgmVolume: PREF_Music, sfxVolume: PREF_Sounds});                f156(_TX(195), 2.0, 2.0, false);                return;            }            if (StartButton == true && s1v < 0.1) {                if (H5_H5app_IsH5 != true) {                    s318v = 30;                    MenuType = -1;                    f156(_TX(195), 2.0, 2.0, false);                    f156(_TX(195), 1.0, 1.0, false);                    f156(_TX(195), 1.0, 0.5, false);                    f156(_TX(195), 1.0, 0.25, false);                } else {                    TitleIconID = 34;                    s318v = 10;                    titleFade = 0;                    MenuType = -1;                    f156(_TX(195), 2.0, 2.0, false);                    f156(_TX(195), 1.0, 1.0, false);                    f156(_TX(195), 1.0, 0.5, false);                    f156(_TX(195), 1.0, 0.25, false);                    f154();                    f155(_TX(251), 0.8, 1.0, true);                }            }            break;        case 7:            if (f29() != true) {                gl.clearColor(0.1, 0.0, 0.1, 1.0);                gl.clear(gl.COLOR_BUFFER_BIT);                return;            }            Road_Color = [1, 0, 1];            Scene_Color = [2.0, 0.0, 2.0];            AccelButton = false;            MenuType = -100;            s5v = 100;            if (LevelFailTimer < 99999) LevelFailTimer += v95;            if (LevelFailTimer > 600 && LevelFailTimer < 99999) {                window.famobi.log(_TX(260));                LevelFailTimer = 99999;                f12(CurrentLevel + 1);            }            f150();            f141(1);            f123();            f212();            f122(s210v.x * 0.5, s210v.y * 0.5, 0);            f196(100, 100, 1.0);            f126(0.8, 0.3, 0.0, 0.8);            f120(0);            f226();            f141(1);            f123();            f219(false);            f141(1);            f123();            if (LevelFailTimer > 600) { //  && f21() == true                var BackButton = f121(0, _TX(261), s210v.x * 0.5, s210v.y * 0.7, 0.7);                if (BackButton == true && !GameIsPaused) {                    f189("button:result:back");                }                if(Famo_ButtonBackIsResolved === true) {                	f206();                	s318v = 5;                	MenuType = 1;                	Level_RestartPos = 0;                	LevelFailTimer = 0;                	Level_Progress = 0;                	return;                }            }            break;        case 8:        	Famo_ButtonBackIsResolved = false;            var CanUsAds = false;            if (RubyCount < conti_Ruby && f90() == true)                CanUsAds = true;            if (H5_H5app_IsH5 == true) {                s318v = -1002;                f206();                h5games_GameOver();                return;            }            if (RubyCount < conti_Ruby && CanUsAds != true) {                f206();                s318v = 5;                Level_RestartPos = 0;                f20();                if (Integration_Type == _TX(164)) s318v = 7;                return;            }            conti_timer += v95 * 1.5;            conti_zoom *= 0.5;            if (conti_timer > 1000) {                conti_timer -= 1000;                conti_value += 0.2;                conti_zoom = 0.1;                if (conti_value > 0.8) {                    f206();                    conti_value = 0.8;                    s318v = 5;                    f156(_TX(11), 0.5, 0.25, false);                    f156(_TX(224), 0.5, 0.25, false);                    f20();                    if (Integration_Type == _TX(164)) s318v = 7;                    return;                }                f156(_TX(11), 0.5 + conti_value * 0.1, 0.5 + conti_value * 0.1, false);                f156(_TX(224), 1.0 + conti_value * 0.1, 1.0 + conti_value * 0.1, false);            }            MenuType = -1;            Road_Color = [1, 0, 0];            Scene_Color = [2.0, 0.0, 0.0];            AccelButton = false;            f150();            f141(1);            f123();            ButtonPulsB += v95 * 0.0008;            if (ButtonPulsB > 1.0) ButtonPulsB = 0;            ButtonPuls += v95 * 0.001;            if (ButtonPuls > 1.0) ButtonPuls = 0;            f212();            f122(s210v.x * 0.5, s210v.y * 0.5, 0);            f196(100, 100, 1.0);            f126(0.8, 0.3, 0.0, titleFade);            f120(0);            f226();            if (titleFade < 0.8) titleFade += v95 * 0.001;            else titleFade = 0.8;            f219(false);            f123();            var RestartButton = f121(0, _TX(262), s210v.x * 0.5, s210v.y * 0.48, 1.1 + conti_zoom);            f126(1, 1, 1, 1);            var BackButton = f121(0, _TX(261), 50, 50, 0.5);            if (BackButton == true) {                f206();                s318v = 5;                MenuType = 1;                Level_RestartPos = 0;                Level_Progress = 0;                f20();                if (Integration_Type == _TX(164)) s318v = 7;                return;            }            f141(1);            gl.blendFunc(gl.ONE, gl.ONE);            f212();            f122(s210v.x * 0.5, s210v.y * 0.5, 0);            f196(ButtonPuls * 2.5, ButtonPuls * 2.5, 1.0);            f178(ButtonPuls * 1800, 0, 0, 1);            f126(1 - ButtonPuls, 0, 0, 1);            f161(0, _TX(257));            f226();            f212();            f122(s210v.x * 0.5, s210v.y * 0.5, 0);            f196(ButtonPulsB * 2.5, ButtonPulsB * 2.5, 1.0);            f178(ButtonPulsB * 360, 0, 0, 1);            f126(0, 0, 1 - ButtonPulsB, 1);            f161(0, _TX(257));            f226();            gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);            f126(1.0, 1.0, 1.0, 1);            f212();            f122(s210v.x * 0.5, s210v.y * 0.48, 0);            f196(1.0 + conti_zoom, 1.0 + conti_zoom, 1.0);            f212();            f141(0);            f126(1.0, 0.85, 0.15, 1.0);            f122(0, 80, -1);            f196(0.41, -(0.8 - conti_value), 1);            f186(6);            f141(1);            f226();            f196(1.1, 1.1, 1.0);            f161(0, _TX(262));            f226();            f212();            if (RubyCount >= conti_Ruby) {                f122(s210v.x * 0.5, s210v.y * 0.48 + 128, 0);                f196(0.7, 0.7, 1.0);                f161(0, _TX(263));                f122(0, 84, 0);                f169(0, 0, 0, 0.9);                f168(v90);                f196(1.1, 1.2, 1.0);                f183(0, '' + conti_Ruby, 0, -86);                f226();                s5v = 100;                AccelButtonIsKeyBoard = false;                AccelButton = false;            } else {                f122(s210v.x * 0.5, s210v.y * 0.48 + 128, 0);                f196(0.7, 0.7, 1.0);                f161(0, _TX(264));                f226();                s5v = 0;                AccelButtonIsKeyBoard = false;                AccelButton = false;            }            f168(left);            f169(1, 1, 1, 1);            if (RestartButton == true && CanUsAds == true) {                f206();                conti_timer = 0;                conti_value = 0;                conti_zoom = 0.2;                s318v = 9;                f154();                f71();                return;            }            if (RestartButton == true && RubyCount >= conti_Ruby) {                f206();                conti_timer = 0;                conti_value = 0;                conti_zoom = 0.2;                RubyCount -= conti_Ruby;                conti_Ruby *= 2.0;                s318v = 10;                s5v = 100;                s9v = 100;                if (s38v > 1000) {                    s24v = [];                    s24v.push(s38v);                    s24v.push(s38v);                }                f204(true);                f111();                f156(_TX(195), 2.0, 2.0, false);                f154();                f155(_TX(251), 0.8, 1.0, true);                return;            }            break;        case 9:            if (Famo_RewardAds_Granted == true) {                se_canvas.focus();                v80.click = 0;                v80.s378v = 0;                Famo_RewardAds_Granted = false;                Famo_RewardAds_Skipped = false;                s318v = 10;                if (s38v > 1000) {                    s24v = [];                    s24v.push(s38v);                    s24v.push(s38v);                }                f204(true);                f111();                f156(_TX(195), 2.0, 2.0, false);                f154();                f155(_TX(251), 0.8, 1.0, true);            }            if (Famo_RewardAds_Skipped == true) {                se_canvas.focus();                v80.click = 0;                v80.s378v = 0;                Famo_RewardAds_Granted = false;                Famo_RewardAds_Skipped = false;                f206();                f20();                Level_RestartPos = 0;                Level_Progress = 0;                s318v = 7;            }            break;        case 10:        	Famo_ButtonNextIsResolved = false;            f150();            f148();            TestColorTimer += v95;            if (TestColorTimer > 4000) {                TestColorTimer = 0;                if (s14v == 0) {                    Road_Color = [0, 1, 0];                    Scene_Color = [0.8, 0, 0.7];                }                if (s14v == 1) {                    Road_Color = [1, 0.8, 0];                    Scene_Color = [0.0, 1, 0.7];                }                if (s14v == 2) {                    Road_Color = [0, 0.5, 1];                    Scene_Color = [0, 0, 0.7];                }                if (s14v == 3) {                    Road_Color = [1, 1, 0.8];                    Scene_Color = [0.3, 0, 0.7];                }                if (s14v == 4) {                    Road_Color = [0.5, 1, 0.5];                    Scene_Color = [0.4, 0.4, 0.4];                }                s14v++;                if (s14v > 4) s14v = 0;            }            f123();            f141(1);            f126(1, 1, 1, 0.5);            var SoundIcon = _TX(258);            if (PREF_Sounds == 0) SoundIcon = _TX(259);            if (f52() == false && H5_H5app_IsH5 != true)                var s13v = f121(0, SoundIcon, s210v.x - 30, 30, 0.3)            else var s13v = false;            if (s13v == true) {                PREF_Sounds = 1 - PREF_Sounds;                PREF_Music = PREF_Sounds;                f154();                f155(_TX(251), 0.8, 1.0, true);                if (PREF_Music == 0) f135();                else f95();                se_savePref(_TX(254), PREF_Sounds);                f156(_TX(195), 2.0, 2.0, false);                return;            }            if (Level_Based == true && Level_Show < 3000) {                Level_Show += v95;                f123();                f141(1);                var Fade = Level_Show * 0.0015;                if (Fade > 2) Fade = 2;                f122(s210v.x * 0.5, s210v.y * 0.23, -100);                f126(1, 1, 1, Fade * 0.5);                f212();                f196(10.0, 1.5, 1.0);                f120(34);                f226();                f126(0.5, 2, 0.5, Fade);                if (Math.sin(Level_Show * 0.01) > 0.0) f126(0.0, 1, 0.0, Fade * 0.5);                scale = 0.6;                f196(scale, scale, 1.0);                f212();                var ScoreText = _TX(265) + (CurrentLevel + 1);                f122(-34 * (ScoreText.length - 1.0), 0, 0);                for (var i = 0; i < ScoreText.length; i++) {                    f161(1, ScoreText[i]);                    if (i < ScoreText.length - 1) {                        f122(34, 0, 0);                        f161(1, '_');                        f122(34, 0, 0);                    }                }                f226();                f123();            }            if (Level_Based == true) {                Level_RestartPos = s44v.position[0];                var TempProgress = (s44v.position[0] - 1024) / (Levels[CurrentLevel].length * 20.48);                if (Level_Progress < TempProgress) Level_Progress = TempProgress;                if (Level_Progress < 0) Level_Progress = 0;                if (Level_Progress > 99) Level_Progress = 99;                if (s210v.y < s210v.x)                    var ProgressPosition = s210v.y - 45;                else var ProgressPosition = s210v.y * 0.8;                if (H5_H5app_IsH5 != true) {                    f212();                    f126(1, 1, 1, 1);                    f122(s210v.x * 0.5, ProgressPosition, -100);                    f196(0.7, 0.7, 1.0);                    f161(1, _TX(266));                    f212();                    f122(-159 + Level_Progress * 1.58, -2, 0);                    f196(Level_Progress * 0.316, 1.0, 1.0);                    f161(1, _TX(267));                    f226();                    f126(1, 1, 1, 0.9);                    f212();                    f122(-158 + Level_Progress * 3.16, 0, 0);                    f161(1, _TX(268));                    f226();                    f226();                }            }            if (H5_H5app_IsH5 == true) {                h5games_SendScore(Score);                if (Level_Based == true) h5games_SendProgress(Level_Progress);            }            break;        case 11:            Level_RestartPos = 0;            AccelButton = false;            Level_Progress = 100;            if (H5_H5app_IsH5 == true) {                h5games_SendScore(Score);                h5games_SendProgress(Level_Progress);            }            CarBody.velocity[0] *= 0.9;            s43v.velocity[0] *= 0.9;            s44v.velocity[0] *= 0.9;            f150();            f148();            Road_Color = [0.1, 2, 0.1];            Scene_Color = [0.0, 0.1, 0.0];            f123();            f141(1);            f126(0.5, 2, 0.5, 1.0);            f122(s210v.x * 0.5, s210v.y * 0.6, -100);            scale = 0.45;            f196(scale, scale, 1.0);            f212();            var ScoreText = _TX(252);            f122(-34 * (ScoreText.length - 1.0), 200, 0);            for (var i = 0; i < ScoreText.length; i++) {                f161(1, ScoreText[i]);                if (i < ScoreText.length - 1) {                    f122(34, 0, 0);                    f161(1, '_');                    f122(34, 0, 0);                }            }            f226();            f212();            ScoreText = _TX(269);            f122(-34 * (ScoreText.length - 1.0), 280, 0);            for (var i = 0; i < ScoreText.length; i++) {                f161(1, ScoreText[i]);                if (i < ScoreText.length - 1) {                    f122(34, 0, 0);                    f161(1, '_');                    f122(34, 0, 0);                }            }            f226();            f123();            if (PointsToAdd < 1 && PointsToAddTimer < 1) Level_timer += v95;            if (H5_H5app_IsH5 != true && Level_timer > 1500) {                f141(1);                f123();                f212();                f122(s210v.x * 0.5, s210v.y * 0.5, 0);                f126(1, 1, 1, 1.0);                gl.blendFunc(gl.ONE, gl.ONE);                ButtonPulsB += v95 * 0.0008;                if (ButtonPulsB > 1.0) ButtonPulsB = 0;                ButtonPuls += v95 * 0.001;                if (ButtonPuls > 1.0) ButtonPuls = 0;                gl.blendFunc(gl.ONE, gl.ONE);                f212();                f196(ButtonPuls * 1.5, ButtonPuls * 1.5, 1.0);                f178(ButtonPuls * 1800, 0, 0, 1);                f126(1 - ButtonPuls, 0, 0, 1);                f161(0, _TX(257));                f226();                f212();                f196(ButtonPulsB * 1.5, ButtonPulsB * 1.5, 1.0);                f178(ButtonPulsB * 360, 0, 0, 1);                f126(0, 0, 1 - ButtonPulsB, 1);                f161(0, _TX(257));                f226();                gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);                f226();                var StartButton = f121(0, _TX(257), s210v.x * 0.5, s210v.y * 0.5, 0.5);                if (StartButton == true && !GameIsPaused) {                	f189("button:result:next");                }                if(Famo_ButtonNextIsResolved === true) {                	Level_timer = 0;                	CurrentLevelPos = 0;                	if (H5_H5app_IsH5 != true) CurrentLevel++;                	if (CurrentLevel > 24) CurrentLevel = 24;                	UnlockedLevel[CurrentLevel] = 1;                	se_savePref(_TX(255), JSON.stringify(UnlockedLevel));                	f111();                	Road_Color = [0.5, 0.5, 1.0];                	Scene_Color = [0.5, 0.5, 1.0];                	s318v = 12;                	MenuType = -1;                	f156(_TX(195), 2.0, 2.0, false);                	f135();                	return;                }            }            if (H5_H5app_IsH5 == true && Level_timer > 1500) {                Level_timer = 0;                CurrentLevelPos = 0;                if (H5_H5app_IsH5 != true) CurrentLevel++;                if (CurrentLevel > 24) CurrentLevel = 24;                UnlockedLevel[CurrentLevel] = 1;                se_savePref(_TX(255), JSON.stringify(UnlockedLevel));                f111();                s318v = 10;                Road_Color = [0.5, 0.5, 1.0];                Scene_Color = [0.5, 0.5, 1.0];                if (H5_H5app_IsH5 == true) h5games_GameSucced();            }            break;        case 12:            if (Famo_AdsWatched == true) {                s318v = 10;                f95();            }            break;        case 20:            s43v.velocity[0] *= 0.01;            s43v.velocity[1] *= 0.01;            s44v.velocity[0] *= 0.01;            s44v.velocity[1] *= 0.01;            s20vA = 0;            s20vB = 0;            BlastModes469v = 0;            f154();            f22();            s318v = 21;            Game_Mode = 2;        case 21:            s24v = [];            s24v.push(1101);            MenuType = 100;            s15v = 0;            Blast_Blink = 0;            if (BlastModes469v < 200) BlastModes469v += v95 * 0.125;            else BlastModes469v = 200;            var s469vMove = v95 * BlastModes469v * 0.0045;            Scroll_X += s469vMove;            s44v.position[0] += s469vMove;            s43v.position[0] += s469vMove;            Use_Physic = false;            CarBody.velocity[1] *= 0.9;            s43v.velocity[1] *= 0.9;            s44v.velocity[1] *= 0.9;            CarBody.position[1] = CarBody.position[1] * 0.99 + 600 * 0.01;            s43v.position[1] = s43v.position[1] * 0.99 + 600 * 0.01;            s44v.position[1] = s44v.position[1] * 0.99 + 600 * 0.01;            s20vB += v95;            if (s20vB > 110) {                s20vB -= 110;                s20vA += 0.05;                f156(_TX(195), 0.1 + s20vA, 0.1 + s20vA, false);            }            f150();            break;        case 22:            if (s43v.position[1] > 650) s43v.position[1] = 650;            if (s44v.position[1] > 650) s44v.position[1] = 650;            if (s43v.position[1] < 500) s43v.position[1] = 500;            if (s44v.position[1] < 500) s44v.position[1] = 500;            MenuType = 101;            Road_Color = [1, 0, 1];            Scene_Color = [1, 0, 1];            f150();            if (BlastMode_Timer < 1) {                Game_Mode = 0;                s318v = 10;                f156(_TX(195), 2.0, 2.0, false);                f154();                f155(_TX(251), 0.8, 1.0, true);                Blast_Blink = 200;                MenuType = -1;                s43v.velocity[0] *= 0.5;                s44v.velocity[0] *= 0.5;                s43v.velocity[1] *= 0.15;                s44v.velocity[1] *= 0.15;            }            break;        case 30:            Road_Color = [0, 1, 0];            Scene_Color = [0.8, 0, 0.7];            AccelButton = false;            f9([CarCenter.x, CarCenter.y + 110, 0]);            f10([(-0.5 + Math.random()) * 0.035, 0, 0]);            f41(2 + Math.random() * 15);            f7(-0.0025);            f11(Math.random() * 360);            f1((-25.5) * 0.000125);            f16(0.000015);            f17(10);            f102()            MenuType = 30;            f150();            f141(1);            f123();            var BackButton = f121(0, _TX(261), s210v.x * 0.1, s210v.x * 0.1, 0.6);            if (BackButton == true) {                s318v = 5;                MenuType = 1;                Level_RestartPos = 0;                LevelFailTimer = 0;                Level_Progress = 0;                return;            }            f212();            f126(1, 1, 1, 1.0);            if (s210v.x > s210v.y * 0.5)                var Rows = 5;            else var Rows = 4;            var PosY = s210v.y * 0.2;            var currentRow = 0;            for (var i = 0; i < 25; i++) {                var PosX = 0;                if (Rows == 4) {                    var RowSize = s210v.x * 0.21;                    if (currentRow == 0) PosX = s210v.x * 0.5 - RowSize * 1.5;                    if (currentRow == 1) PosX = s210v.x * 0.5 - RowSize * 0.5;                    if (currentRow == 2) PosX = s210v.x * 0.5 + RowSize * 0.5;                    if (currentRow == 3) PosX = s210v.x * 0.5 + RowSize * 1.5;                } else {                    var RowSize = s210v.y * 0.23;                    if (s210v.x < s210v.y * 0.6) RowSize = s210v.y * 0.20;                    if (currentRow == 0) PosX = s210v.x * 0.5 - RowSize * 1.0;                    if (currentRow == 1) PosX = s210v.x * 0.5 - RowSize * 0.5;                    if (currentRow == 2) PosX = s210v.x * 0.5;                    if (currentRow == 3) PosX = s210v.x * 0.5 + RowSize * 0.5;                    if (currentRow == 4) PosX = s210v.x * 0.5 + RowSize * 1.0;                }                var MouseOver = false;                var IconW = 75;                var IconH = 85;                if (Rows == 4) {                    IconW *= 0.5;                    IconH *= 0.5;                } else {                    IconW *= 0.35;                    IconH *= 0.35;                }                if (                    v80.x > PosX - IconW &&                    v80.x < PosX + IconW &&                    v80.y > PosY - IconH && v80.y < PosY + IconH                ) {                    MouseOver = true;                }                f212();                f122(PosX, PosY, 0);                if (Rows == 4)                    f196(0.5, 0.5, 1.0);                else f196(0.35, 0.35, 1.0);                f196(                    1.0 + Math.cos(s69v + i * 5) * 0.05, 1.0 + Math.sin(s69v + i * 9) * 0.05, 1.0);                if (UnlockedLevel[i] == 0) {                    f126(0.3, 0.3, 0.3, 1.25);                    f120(42);                } else {                    f126(1, 1, 1, 1.0);                    if (MouseOver == true) {                        f126(2, 2, 2, 2.0);                        if (v80.click == 1) {                            Level_StartAt = i + 1;                            TitleIconID = 34;                            s318v = 10;                            titleFade = 0;                            MenuType = -1;                            f156(_TX(195), 2.0, 2.0, false);                            f156(_TX(195), 1.0, 1.0, false);                            f156(_TX(195), 1.0, 0.5, false);                            f156(_TX(195), 1.0, 0.25, false);                            f154();                            f155(_TX(251), 0.8, 1.0, true);                            f8();                            f111();                            return;                        }                    }                    f120(43);                    f196(1.3, 1.6, 1.0);                    f178(-3, 0, 0, 1);                    f122(-2, 0, 0);                    var Textnumber = '' + (i + 1);                    if (Textnumber.length < 2) {                        f161(1, '' + Textnumber[0]);                    } else {                        f122(-20, 0, 0);                        f161(1, '' + Textnumber[0]);                        f122(40, 0, 0);                        f161(1, '' + Textnumber[1]);                    }                }                f226();                currentRow++;                if (currentRow == Rows) {                    currentRow = 0;                    YStep = 0;                    if (Rows == 4)                        YStep = s210v.y * 0.11;                    else YStep = s210v.x * 0.16;                    if (YStep > s210v.y * 0.16) YStep = s210v.y * 0.16;                    PosY += YStep;                }            }            break;    }    if (s5v > 0 && H5_H5app_IsH5 != true) {        s5v -= v95 * 0.04;        if (s9v > 0) s9v -= v95 * 0.1;        else s9v = 0;        var RubyFade = s5v / 10.0;        if (RubyFade > 1) RubyFade = 1;        f123();        f141(1);        f126(1, 1, 1, RubyFade);        f212();        f122(-100 + 130 * RubyFade, s210v.y - 60, 0);        f212();        f122(60, 0, 0);        f196(2.0, 2.0, 1.0);        f120(34);        f226();        f196(0.5, 0.5, 1.0);        if (RubyCount < 10) ScoreText = "0" + RubyCount;        else ScoreText = "" + RubyCount;        f212();        f122(30, 0, 0);        f126(2, 1, 1, 1.0);        if (s9v > 0 && Math.cos(s9v * 0.5) > 0) f126(0, 10, 10, 2.0);        f161(1, '-');        f122(44, 0, 0);        for (var i = 0; i < ScoreText.length; i++) {            f161(1, ScoreText[i]);            f122(31, 0, 0);            f161(1, '_');            f122(31, 0, 0);        }        f226();        f120(22);        f183(0, 'x', 19, 0);        f226();    }}var s20vA = 0;var s20vB = 0;var Key_Left = false;var Key_Right = false;var Key_Up = false;var Key_Down = false;var Key_Action = false;var s209v = null;document.addEventListener(_TX(270), function(event) {    AccelButtonIsKeyBoard = true;    AccelButton = true;    if (event.key == _TX(271)) Key_Left = true;    if (event.key == _TX(272)) Key_Right = true;    if (event.key == _TX(273)) Key_Up = true;    if (event.key == _TX(274)) Key_Down = true;    if (event.key == 'a') Key_Left = true;    if (event.key == 'd') Key_Right = true;    if (event.key == 'A') Key_Left = true;    if (event.key == 'D') Key_Right = true;    if (event.key == ' ') Key_Action = true;    s209v = event.key;}, false);document.addEventListener(_TX(275), function(event) {    AccelButtonIsKeyBoard = true;    AccelButton = false;    if (event.key == _TX(271)) Key_Left = false;    if (event.key == _TX(272)) Key_Right = false;    if (event.key == 'a') Key_Left = false;    if (event.key == 'd') Key_Right = false;    if (event.key == 'A') Key_Left = false;    if (event.key == 'D') Key_Right = false;    if (event.key == ' ') Key_Action = false;    if (event.key == _TX(273)) Key_Up = false;    if (event.key == _TX(274)) Key_Down = false;}, false);;// Compressed with KorbenDallasMultiPack